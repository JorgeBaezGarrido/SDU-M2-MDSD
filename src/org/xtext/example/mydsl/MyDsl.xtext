grammar org.xtext.example.mydsl.MyDsl with org.eclipse.xtext.common.Terminals

generate myDsl "http://www.xtext.org/example/mydsl/MyDsl"

System:
	'game' name=ID declarations+=Declaration*;
	
Declaration:
	Locations | Relations | Moves | Entities | Teams | Attributes;
	
Locations:
	'location' loc+=Loc+
;

Loc:
	name=ID 'opponents' oname=ID
;

Relations:
	'relations' type+=Type+
;

//Simple implementation for now so it can work
Type:
	name=ID
;


TypeExpression:
	type=ID
;

Moves:
	'moves' move+=Move+
;

Move:
	'move' name=ID eType=EType att+=AltAttribute*
;

EType:
	'type' type=[Type]
;

Attributes:
	'attributes' attribute+=Attribute+
;

Attribute:
	'attribute' name=ID aVal=AttributeValues
;

AttributeValues:
	'is' (lTypes=LegalType | value=AtomicNumber) | (rule=Rule|require=Require)
;

AltAttribute:
	'attribute' attriburte+=[Attribute]+ (av=AttributeValues)?
;

//Sum cannot find the signs needed for the expression but want an AtomicNumber instead
Rule:
	'if' attribute=[Attribute] comp=Comparator value=AtomicNumber 'then' attribute2=[Attribute] sum=Sum val=AtomicNumber
;

Entities:
	'entities' entity+=Entity+
;

Entity:
	'entity' name=ID eType=EType att+=AltAttribute* eMoves+=EntityMoves*
;

EntityMoves:
	'move' move+=[Move]+
;

Teams:
	'teams' Require? bs=BattleSize team+=Team+
;

Team:
	'team' name=ID members+=Members+
;

Members:
	'members' entity+=[Entity]+
;

BattleSize:
	'battling_member_count' value=AtomicNumber req=Require?
;


Require:
	'require' ORcondition | ORcondition
;

ORcondition returns Proposition:
	ANDcondition ('OR' {or.left=current} right=ANDcondition)*
;

ANDcondition returns Proposition:
	Statement ('AND'{and.left=current} right=Statement)*
	
;

Statement returns Proposition:
	NumberComparing | '(' ORcondition ')'
;

NumberComparing:
	left=Sum comp=Comparator right=Sum
;

Comparator:
	'<' | '<=' | '==' | '>=' | '>'
;

Sum:
	Multiply (('+' {Add.left=current} | '-' {Sub.left=current}) right=Multiply)*
;

Multiply:
	AtomicNumber (('*' {Mult.left=current} | '/' {Div.left=current}) right=AtomicNumber)*
;

AtomicNumber:
	value=Float | value2=INT
;

Float:
	INT '.' INT
;

LegalType:
	'Float' | 'Integer'
;






