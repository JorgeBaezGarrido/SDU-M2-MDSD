/*
 * generated by Xtext 2.21.0
 */
package org.xtext.example.mydsl.services;

import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.List;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Alternatives;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.CrossReference;
import org.eclipse.xtext.Grammar;
import org.eclipse.xtext.GrammarUtil;
import org.eclipse.xtext.Group;
import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.TerminalRule;
import org.eclipse.xtext.common.services.TerminalsGrammarAccess;
import org.eclipse.xtext.service.AbstractElementFinder.AbstractGrammarElementFinder;
import org.eclipse.xtext.service.GrammarProvider;

@Singleton
public class MyDslGrammarAccess extends AbstractGrammarElementFinder {
	
	public class SystemElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.System");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cGameKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Assignment cDeclarationsAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cDeclarationsDeclarationParserRuleCall_2_0 = (RuleCall)cDeclarationsAssignment_2.eContents().get(0);
		
		//System:
		//	'game' name=ID declarations+=Declaration*;
		@Override public ParserRule getRule() { return rule; }
		
		//'game' name=ID declarations+=Declaration*
		public Group getGroup() { return cGroup; }
		
		//'game'
		public Keyword getGameKeyword_0() { return cGameKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//declarations+=Declaration*
		public Assignment getDeclarationsAssignment_2() { return cDeclarationsAssignment_2; }
		
		//Declaration
		public RuleCall getDeclarationsDeclarationParserRuleCall_2_0() { return cDeclarationsDeclarationParserRuleCall_2_0; }
	}
	public class DeclarationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.Declaration");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cLocationsParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cRelationsParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cMovesParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cEntitiesParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cTeamsParserRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		private final RuleCall cAttributesParserRuleCall_5 = (RuleCall)cAlternatives.eContents().get(5);
		
		//Declaration:
		//	Locations | Relations | Moves | Entities | Teams | Attributes;
		@Override public ParserRule getRule() { return rule; }
		
		//Locations | Relations | Moves | Entities | Teams | Attributes
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//Locations
		public RuleCall getLocationsParserRuleCall_0() { return cLocationsParserRuleCall_0; }
		
		//Relations
		public RuleCall getRelationsParserRuleCall_1() { return cRelationsParserRuleCall_1; }
		
		//Moves
		public RuleCall getMovesParserRuleCall_2() { return cMovesParserRuleCall_2; }
		
		//Entities
		public RuleCall getEntitiesParserRuleCall_3() { return cEntitiesParserRuleCall_3; }
		
		//Teams
		public RuleCall getTeamsParserRuleCall_4() { return cTeamsParserRuleCall_4; }
		
		//Attributes
		public RuleCall getAttributesParserRuleCall_5() { return cAttributesParserRuleCall_5; }
	}
	public class LocationsElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.Locations");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLocationKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cLocAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cLocLocParserRuleCall_1_0 = (RuleCall)cLocAssignment_1.eContents().get(0);
		
		//Locations:
		//	'location' loc+=Loc+;
		@Override public ParserRule getRule() { return rule; }
		
		//'location' loc+=Loc+
		public Group getGroup() { return cGroup; }
		
		//'location'
		public Keyword getLocationKeyword_0() { return cLocationKeyword_0; }
		
		//loc+=Loc+
		public Assignment getLocAssignment_1() { return cLocAssignment_1; }
		
		//Loc
		public RuleCall getLocLocParserRuleCall_1_0() { return cLocLocParserRuleCall_1_0; }
	}
	public class LocElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.Loc");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNameIDTerminalRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final Keyword cOpponentsKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cOnameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cOnameIDTerminalRuleCall_2_0 = (RuleCall)cOnameAssignment_2.eContents().get(0);
		
		//Loc:
		//	name=ID 'opponents' oname=ID;
		@Override public ParserRule getRule() { return rule; }
		
		//name=ID 'opponents' oname=ID
		public Group getGroup() { return cGroup; }
		
		//name=ID
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_0_0() { return cNameIDTerminalRuleCall_0_0; }
		
		//'opponents'
		public Keyword getOpponentsKeyword_1() { return cOpponentsKeyword_1; }
		
		//oname=ID
		public Assignment getOnameAssignment_2() { return cOnameAssignment_2; }
		
		//ID
		public RuleCall getOnameIDTerminalRuleCall_2_0() { return cOnameIDTerminalRuleCall_2_0; }
	}
	public class RelationsElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.Relations");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cRelationsKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cTypeAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cTypeTypeParserRuleCall_1_0 = (RuleCall)cTypeAssignment_1.eContents().get(0);
		
		//Relations:
		//	'relations' type+=Type+;
		@Override public ParserRule getRule() { return rule; }
		
		//'relations' type+=Type+
		public Group getGroup() { return cGroup; }
		
		//'relations'
		public Keyword getRelationsKeyword_0() { return cRelationsKeyword_0; }
		
		//type+=Type+
		public Assignment getTypeAssignment_1() { return cTypeAssignment_1; }
		
		//Type
		public RuleCall getTypeTypeParserRuleCall_1_0() { return cTypeTypeParserRuleCall_1_0; }
	}
	public class TypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.Type");
		private final Assignment cNameAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_0 = (RuleCall)cNameAssignment.eContents().get(0);
		
		////Simple implementation for now so it can work
		//Type:
		//	name=ID;
		@Override public ParserRule getRule() { return rule; }
		
		//name=ID
		public Assignment getNameAssignment() { return cNameAssignment; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_0() { return cNameIDTerminalRuleCall_0; }
	}
	public class TypeExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.TypeExpression");
		private final Assignment cTypeAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cTypeIDTerminalRuleCall_0 = (RuleCall)cTypeAssignment.eContents().get(0);
		
		//TypeExpression:
		//	type=ID;
		@Override public ParserRule getRule() { return rule; }
		
		//type=ID
		public Assignment getTypeAssignment() { return cTypeAssignment; }
		
		//ID
		public RuleCall getTypeIDTerminalRuleCall_0() { return cTypeIDTerminalRuleCall_0; }
	}
	public class MovesElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.Moves");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cMovesKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cMoveAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cMoveMoveParserRuleCall_1_0 = (RuleCall)cMoveAssignment_1.eContents().get(0);
		
		//Moves:
		//	'moves' move+=Move+;
		@Override public ParserRule getRule() { return rule; }
		
		//'moves' move+=Move+
		public Group getGroup() { return cGroup; }
		
		//'moves'
		public Keyword getMovesKeyword_0() { return cMovesKeyword_0; }
		
		//move+=Move+
		public Assignment getMoveAssignment_1() { return cMoveAssignment_1; }
		
		//Move
		public RuleCall getMoveMoveParserRuleCall_1_0() { return cMoveMoveParserRuleCall_1_0; }
	}
	public class MoveElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.Move");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cMoveKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Assignment cETypeAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cETypeETypeParserRuleCall_2_0 = (RuleCall)cETypeAssignment_2.eContents().get(0);
		private final Assignment cAttAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cAttAltAttributeParserRuleCall_3_0 = (RuleCall)cAttAssignment_3.eContents().get(0);
		
		//Move:
		//	'move' name=ID eType=EType att+=AltAttribute*;
		@Override public ParserRule getRule() { return rule; }
		
		//'move' name=ID eType=EType att+=AltAttribute*
		public Group getGroup() { return cGroup; }
		
		//'move'
		public Keyword getMoveKeyword_0() { return cMoveKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//eType=EType
		public Assignment getETypeAssignment_2() { return cETypeAssignment_2; }
		
		//EType
		public RuleCall getETypeETypeParserRuleCall_2_0() { return cETypeETypeParserRuleCall_2_0; }
		
		//att+=AltAttribute*
		public Assignment getAttAssignment_3() { return cAttAssignment_3; }
		
		//AltAttribute
		public RuleCall getAttAltAttributeParserRuleCall_3_0() { return cAttAltAttributeParserRuleCall_3_0; }
	}
	public class ETypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.EType");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cTypeKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cTypeAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final CrossReference cTypeTypeCrossReference_1_0 = (CrossReference)cTypeAssignment_1.eContents().get(0);
		private final RuleCall cTypeTypeIDTerminalRuleCall_1_0_1 = (RuleCall)cTypeTypeCrossReference_1_0.eContents().get(1);
		
		//EType:
		//	'type' type=[Type];
		@Override public ParserRule getRule() { return rule; }
		
		//'type' type=[Type]
		public Group getGroup() { return cGroup; }
		
		//'type'
		public Keyword getTypeKeyword_0() { return cTypeKeyword_0; }
		
		//type=[Type]
		public Assignment getTypeAssignment_1() { return cTypeAssignment_1; }
		
		//[Type]
		public CrossReference getTypeTypeCrossReference_1_0() { return cTypeTypeCrossReference_1_0; }
		
		//ID
		public RuleCall getTypeTypeIDTerminalRuleCall_1_0_1() { return cTypeTypeIDTerminalRuleCall_1_0_1; }
	}
	public class AttributesElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.Attributes");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cAttributesKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cAttributeAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cAttributeAttributeParserRuleCall_1_0 = (RuleCall)cAttributeAssignment_1.eContents().get(0);
		
		//Attributes:
		//	'attributes' attribute+=Attribute+;
		@Override public ParserRule getRule() { return rule; }
		
		//'attributes' attribute+=Attribute+
		public Group getGroup() { return cGroup; }
		
		//'attributes'
		public Keyword getAttributesKeyword_0() { return cAttributesKeyword_0; }
		
		//attribute+=Attribute+
		public Assignment getAttributeAssignment_1() { return cAttributeAssignment_1; }
		
		//Attribute
		public RuleCall getAttributeAttributeParserRuleCall_1_0() { return cAttributeAttributeParserRuleCall_1_0; }
	}
	public class AttributeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.Attribute");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cAttributeKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Assignment cAValAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cAValAttributeValuesParserRuleCall_2_0 = (RuleCall)cAValAssignment_2.eContents().get(0);
		
		//Attribute:
		//	'attribute' name=ID aVal=AttributeValues;
		@Override public ParserRule getRule() { return rule; }
		
		//'attribute' name=ID aVal=AttributeValues
		public Group getGroup() { return cGroup; }
		
		//'attribute'
		public Keyword getAttributeKeyword_0() { return cAttributeKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//aVal=AttributeValues
		public Assignment getAValAssignment_2() { return cAValAssignment_2; }
		
		//AttributeValues
		public RuleCall getAValAttributeValuesParserRuleCall_2_0() { return cAValAttributeValuesParserRuleCall_2_0; }
	}
	public class AttributeValuesElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.AttributeValues");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Keyword cIsKeyword_0_0 = (Keyword)cGroup_0.eContents().get(0);
		private final Alternatives cAlternatives_0_1 = (Alternatives)cGroup_0.eContents().get(1);
		private final Assignment cLTypesAssignment_0_1_0 = (Assignment)cAlternatives_0_1.eContents().get(0);
		private final RuleCall cLTypesLegalTypeParserRuleCall_0_1_0_0 = (RuleCall)cLTypesAssignment_0_1_0.eContents().get(0);
		private final Assignment cValueAssignment_0_1_1 = (Assignment)cAlternatives_0_1.eContents().get(1);
		private final RuleCall cValueAtomicNumberParserRuleCall_0_1_1_0 = (RuleCall)cValueAssignment_0_1_1.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cAlternatives.eContents().get(1);
		private final Assignment cRuleAssignment_1_0 = (Assignment)cAlternatives_1.eContents().get(0);
		private final RuleCall cRuleRuleParserRuleCall_1_0_0 = (RuleCall)cRuleAssignment_1_0.eContents().get(0);
		private final Assignment cRequireAssignment_1_1 = (Assignment)cAlternatives_1.eContents().get(1);
		private final RuleCall cRequireRequireParserRuleCall_1_1_0 = (RuleCall)cRequireAssignment_1_1.eContents().get(0);
		
		//AttributeValues:
		//	'is' (lTypes=LegalType | value=AtomicNumber) | (rule=Rule | require=Require);
		@Override public ParserRule getRule() { return rule; }
		
		//'is' (lTypes=LegalType | value=AtomicNumber) | (rule=Rule | require=Require)
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//'is' (lTypes=LegalType | value=AtomicNumber)
		public Group getGroup_0() { return cGroup_0; }
		
		//'is'
		public Keyword getIsKeyword_0_0() { return cIsKeyword_0_0; }
		
		//(lTypes=LegalType | value=AtomicNumber)
		public Alternatives getAlternatives_0_1() { return cAlternatives_0_1; }
		
		//lTypes=LegalType
		public Assignment getLTypesAssignment_0_1_0() { return cLTypesAssignment_0_1_0; }
		
		//LegalType
		public RuleCall getLTypesLegalTypeParserRuleCall_0_1_0_0() { return cLTypesLegalTypeParserRuleCall_0_1_0_0; }
		
		//value=AtomicNumber
		public Assignment getValueAssignment_0_1_1() { return cValueAssignment_0_1_1; }
		
		//AtomicNumber
		public RuleCall getValueAtomicNumberParserRuleCall_0_1_1_0() { return cValueAtomicNumberParserRuleCall_0_1_1_0; }
		
		//(rule=Rule | require=Require)
		public Alternatives getAlternatives_1() { return cAlternatives_1; }
		
		//rule=Rule
		public Assignment getRuleAssignment_1_0() { return cRuleAssignment_1_0; }
		
		//Rule
		public RuleCall getRuleRuleParserRuleCall_1_0_0() { return cRuleRuleParserRuleCall_1_0_0; }
		
		//require=Require
		public Assignment getRequireAssignment_1_1() { return cRequireAssignment_1_1; }
		
		//Require
		public RuleCall getRequireRequireParserRuleCall_1_1_0() { return cRequireRequireParserRuleCall_1_1_0; }
	}
	public class AltAttributeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.AltAttribute");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cAttributeKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cAttriburteAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final CrossReference cAttriburteAttributeCrossReference_1_0 = (CrossReference)cAttriburteAssignment_1.eContents().get(0);
		private final RuleCall cAttriburteAttributeIDTerminalRuleCall_1_0_1 = (RuleCall)cAttriburteAttributeCrossReference_1_0.eContents().get(1);
		private final Assignment cAvAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cAvAttributeValuesParserRuleCall_2_0 = (RuleCall)cAvAssignment_2.eContents().get(0);
		
		//AltAttribute:
		//	'attribute' attriburte+=[Attribute]+ av=AttributeValues?;
		@Override public ParserRule getRule() { return rule; }
		
		//'attribute' attriburte+=[Attribute]+ av=AttributeValues?
		public Group getGroup() { return cGroup; }
		
		//'attribute'
		public Keyword getAttributeKeyword_0() { return cAttributeKeyword_0; }
		
		//attriburte+=[Attribute]+
		public Assignment getAttriburteAssignment_1() { return cAttriburteAssignment_1; }
		
		//[Attribute]
		public CrossReference getAttriburteAttributeCrossReference_1_0() { return cAttriburteAttributeCrossReference_1_0; }
		
		//ID
		public RuleCall getAttriburteAttributeIDTerminalRuleCall_1_0_1() { return cAttriburteAttributeIDTerminalRuleCall_1_0_1; }
		
		//av=AttributeValues?
		public Assignment getAvAssignment_2() { return cAvAssignment_2; }
		
		//AttributeValues
		public RuleCall getAvAttributeValuesParserRuleCall_2_0() { return cAvAttributeValuesParserRuleCall_2_0; }
	}
	public class RuleElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.Rule");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cIfKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cAttributeAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final CrossReference cAttributeAttributeCrossReference_1_0 = (CrossReference)cAttributeAssignment_1.eContents().get(0);
		private final RuleCall cAttributeAttributeIDTerminalRuleCall_1_0_1 = (RuleCall)cAttributeAttributeCrossReference_1_0.eContents().get(1);
		private final Assignment cCompAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cCompComparatorParserRuleCall_2_0 = (RuleCall)cCompAssignment_2.eContents().get(0);
		private final Assignment cValueAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cValueAtomicNumberParserRuleCall_3_0 = (RuleCall)cValueAssignment_3.eContents().get(0);
		private final Keyword cThenKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cAttribute2Assignment_5 = (Assignment)cGroup.eContents().get(5);
		private final CrossReference cAttribute2AttributeCrossReference_5_0 = (CrossReference)cAttribute2Assignment_5.eContents().get(0);
		private final RuleCall cAttribute2AttributeIDTerminalRuleCall_5_0_1 = (RuleCall)cAttribute2AttributeCrossReference_5_0.eContents().get(1);
		private final Assignment cSumAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cSumSumParserRuleCall_6_0 = (RuleCall)cSumAssignment_6.eContents().get(0);
		private final Assignment cValAssignment_7 = (Assignment)cGroup.eContents().get(7);
		private final RuleCall cValAtomicNumberParserRuleCall_7_0 = (RuleCall)cValAssignment_7.eContents().get(0);
		
		////Sum cannot find the signs needed for the expression but want an AtomicNumber instead
		//Rule:
		//	'if' attribute=[Attribute] comp=Comparator value=AtomicNumber 'then' attribute2=[Attribute] sum=Sum val=AtomicNumber;
		@Override public ParserRule getRule() { return rule; }
		
		//'if' attribute=[Attribute] comp=Comparator value=AtomicNumber 'then' attribute2=[Attribute] sum=Sum val=AtomicNumber
		public Group getGroup() { return cGroup; }
		
		//'if'
		public Keyword getIfKeyword_0() { return cIfKeyword_0; }
		
		//attribute=[Attribute]
		public Assignment getAttributeAssignment_1() { return cAttributeAssignment_1; }
		
		//[Attribute]
		public CrossReference getAttributeAttributeCrossReference_1_0() { return cAttributeAttributeCrossReference_1_0; }
		
		//ID
		public RuleCall getAttributeAttributeIDTerminalRuleCall_1_0_1() { return cAttributeAttributeIDTerminalRuleCall_1_0_1; }
		
		//comp=Comparator
		public Assignment getCompAssignment_2() { return cCompAssignment_2; }
		
		//Comparator
		public RuleCall getCompComparatorParserRuleCall_2_0() { return cCompComparatorParserRuleCall_2_0; }
		
		//value=AtomicNumber
		public Assignment getValueAssignment_3() { return cValueAssignment_3; }
		
		//AtomicNumber
		public RuleCall getValueAtomicNumberParserRuleCall_3_0() { return cValueAtomicNumberParserRuleCall_3_0; }
		
		//'then'
		public Keyword getThenKeyword_4() { return cThenKeyword_4; }
		
		//attribute2=[Attribute]
		public Assignment getAttribute2Assignment_5() { return cAttribute2Assignment_5; }
		
		//[Attribute]
		public CrossReference getAttribute2AttributeCrossReference_5_0() { return cAttribute2AttributeCrossReference_5_0; }
		
		//ID
		public RuleCall getAttribute2AttributeIDTerminalRuleCall_5_0_1() { return cAttribute2AttributeIDTerminalRuleCall_5_0_1; }
		
		//sum=Sum
		public Assignment getSumAssignment_6() { return cSumAssignment_6; }
		
		//Sum
		public RuleCall getSumSumParserRuleCall_6_0() { return cSumSumParserRuleCall_6_0; }
		
		//val=AtomicNumber
		public Assignment getValAssignment_7() { return cValAssignment_7; }
		
		//AtomicNumber
		public RuleCall getValAtomicNumberParserRuleCall_7_0() { return cValAtomicNumberParserRuleCall_7_0; }
	}
	public class EntitiesElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.Entities");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cEntitiesKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cEntityAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cEntityEntityParserRuleCall_1_0 = (RuleCall)cEntityAssignment_1.eContents().get(0);
		
		//Entities:
		//	'entities' entity+=Entity+;
		@Override public ParserRule getRule() { return rule; }
		
		//'entities' entity+=Entity+
		public Group getGroup() { return cGroup; }
		
		//'entities'
		public Keyword getEntitiesKeyword_0() { return cEntitiesKeyword_0; }
		
		//entity+=Entity+
		public Assignment getEntityAssignment_1() { return cEntityAssignment_1; }
		
		//Entity
		public RuleCall getEntityEntityParserRuleCall_1_0() { return cEntityEntityParserRuleCall_1_0; }
	}
	public class EntityElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.Entity");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cEntityKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Assignment cETypeAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cETypeETypeParserRuleCall_2_0 = (RuleCall)cETypeAssignment_2.eContents().get(0);
		private final Assignment cAttAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cAttAltAttributeParserRuleCall_3_0 = (RuleCall)cAttAssignment_3.eContents().get(0);
		private final Assignment cEMovesAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cEMovesEntityMovesParserRuleCall_4_0 = (RuleCall)cEMovesAssignment_4.eContents().get(0);
		
		//Entity:
		//	'entity' name=ID eType=EType att+=AltAttribute* eMoves+=EntityMoves*;
		@Override public ParserRule getRule() { return rule; }
		
		//'entity' name=ID eType=EType att+=AltAttribute* eMoves+=EntityMoves*
		public Group getGroup() { return cGroup; }
		
		//'entity'
		public Keyword getEntityKeyword_0() { return cEntityKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//eType=EType
		public Assignment getETypeAssignment_2() { return cETypeAssignment_2; }
		
		//EType
		public RuleCall getETypeETypeParserRuleCall_2_0() { return cETypeETypeParserRuleCall_2_0; }
		
		//att+=AltAttribute*
		public Assignment getAttAssignment_3() { return cAttAssignment_3; }
		
		//AltAttribute
		public RuleCall getAttAltAttributeParserRuleCall_3_0() { return cAttAltAttributeParserRuleCall_3_0; }
		
		//eMoves+=EntityMoves*
		public Assignment getEMovesAssignment_4() { return cEMovesAssignment_4; }
		
		//EntityMoves
		public RuleCall getEMovesEntityMovesParserRuleCall_4_0() { return cEMovesEntityMovesParserRuleCall_4_0; }
	}
	public class EntityMovesElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.EntityMoves");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cMoveKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cMoveAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final CrossReference cMoveMoveCrossReference_1_0 = (CrossReference)cMoveAssignment_1.eContents().get(0);
		private final RuleCall cMoveMoveIDTerminalRuleCall_1_0_1 = (RuleCall)cMoveMoveCrossReference_1_0.eContents().get(1);
		
		//EntityMoves:
		//	'move' move+=[Move]+;
		@Override public ParserRule getRule() { return rule; }
		
		//'move' move+=[Move]+
		public Group getGroup() { return cGroup; }
		
		//'move'
		public Keyword getMoveKeyword_0() { return cMoveKeyword_0; }
		
		//move+=[Move]+
		public Assignment getMoveAssignment_1() { return cMoveAssignment_1; }
		
		//[Move]
		public CrossReference getMoveMoveCrossReference_1_0() { return cMoveMoveCrossReference_1_0; }
		
		//ID
		public RuleCall getMoveMoveIDTerminalRuleCall_1_0_1() { return cMoveMoveIDTerminalRuleCall_1_0_1; }
	}
	public class TeamsElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.Teams");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cTeamsKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final RuleCall cRequireParserRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		private final Assignment cBsAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cBsBattleSizeParserRuleCall_2_0 = (RuleCall)cBsAssignment_2.eContents().get(0);
		private final Assignment cTeamAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cTeamTeamParserRuleCall_3_0 = (RuleCall)cTeamAssignment_3.eContents().get(0);
		
		//Teams:
		//	'teams' Require? bs=BattleSize team+=Team+;
		@Override public ParserRule getRule() { return rule; }
		
		//'teams' Require? bs=BattleSize team+=Team+
		public Group getGroup() { return cGroup; }
		
		//'teams'
		public Keyword getTeamsKeyword_0() { return cTeamsKeyword_0; }
		
		//Require?
		public RuleCall getRequireParserRuleCall_1() { return cRequireParserRuleCall_1; }
		
		//bs=BattleSize
		public Assignment getBsAssignment_2() { return cBsAssignment_2; }
		
		//BattleSize
		public RuleCall getBsBattleSizeParserRuleCall_2_0() { return cBsBattleSizeParserRuleCall_2_0; }
		
		//team+=Team+
		public Assignment getTeamAssignment_3() { return cTeamAssignment_3; }
		
		//Team
		public RuleCall getTeamTeamParserRuleCall_3_0() { return cTeamTeamParserRuleCall_3_0; }
	}
	public class TeamElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.Team");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cTeamKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Assignment cMembersAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cMembersMembersParserRuleCall_2_0 = (RuleCall)cMembersAssignment_2.eContents().get(0);
		
		//Team:
		//	'team' name=ID members+=Members+;
		@Override public ParserRule getRule() { return rule; }
		
		//'team' name=ID members+=Members+
		public Group getGroup() { return cGroup; }
		
		//'team'
		public Keyword getTeamKeyword_0() { return cTeamKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//members+=Members+
		public Assignment getMembersAssignment_2() { return cMembersAssignment_2; }
		
		//Members
		public RuleCall getMembersMembersParserRuleCall_2_0() { return cMembersMembersParserRuleCall_2_0; }
	}
	public class MembersElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.Members");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cMembersKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cEntityAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final CrossReference cEntityEntityCrossReference_1_0 = (CrossReference)cEntityAssignment_1.eContents().get(0);
		private final RuleCall cEntityEntityIDTerminalRuleCall_1_0_1 = (RuleCall)cEntityEntityCrossReference_1_0.eContents().get(1);
		
		//Members:
		//	'members' entity+=[Entity]+;
		@Override public ParserRule getRule() { return rule; }
		
		//'members' entity+=[Entity]+
		public Group getGroup() { return cGroup; }
		
		//'members'
		public Keyword getMembersKeyword_0() { return cMembersKeyword_0; }
		
		//entity+=[Entity]+
		public Assignment getEntityAssignment_1() { return cEntityAssignment_1; }
		
		//[Entity]
		public CrossReference getEntityEntityCrossReference_1_0() { return cEntityEntityCrossReference_1_0; }
		
		//ID
		public RuleCall getEntityEntityIDTerminalRuleCall_1_0_1() { return cEntityEntityIDTerminalRuleCall_1_0_1; }
	}
	public class BattleSizeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.BattleSize");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cBattling_member_countKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cValueAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cValueAtomicNumberParserRuleCall_1_0 = (RuleCall)cValueAssignment_1.eContents().get(0);
		private final Assignment cReqAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cReqRequireParserRuleCall_2_0 = (RuleCall)cReqAssignment_2.eContents().get(0);
		
		//BattleSize:
		//	'battling_member_count' value=AtomicNumber req=Require?;
		@Override public ParserRule getRule() { return rule; }
		
		//'battling_member_count' value=AtomicNumber req=Require?
		public Group getGroup() { return cGroup; }
		
		//'battling_member_count'
		public Keyword getBattling_member_countKeyword_0() { return cBattling_member_countKeyword_0; }
		
		//value=AtomicNumber
		public Assignment getValueAssignment_1() { return cValueAssignment_1; }
		
		//AtomicNumber
		public RuleCall getValueAtomicNumberParserRuleCall_1_0() { return cValueAtomicNumberParserRuleCall_1_0; }
		
		//req=Require?
		public Assignment getReqAssignment_2() { return cReqAssignment_2; }
		
		//Require
		public RuleCall getReqRequireParserRuleCall_2_0() { return cReqRequireParserRuleCall_2_0; }
	}
	public class RequireElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.Require");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Keyword cRequireKeyword_0_0 = (Keyword)cGroup_0.eContents().get(0);
		private final RuleCall cORconditionParserRuleCall_0_1 = (RuleCall)cGroup_0.eContents().get(1);
		private final RuleCall cORconditionParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//Require:
		//	'require' ORcondition | ORcondition;
		@Override public ParserRule getRule() { return rule; }
		
		//'require' ORcondition | ORcondition
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//'require' ORcondition
		public Group getGroup_0() { return cGroup_0; }
		
		//'require'
		public Keyword getRequireKeyword_0_0() { return cRequireKeyword_0_0; }
		
		//ORcondition
		public RuleCall getORconditionParserRuleCall_0_1() { return cORconditionParserRuleCall_0_1; }
		
		//ORcondition
		public RuleCall getORconditionParserRuleCall_1() { return cORconditionParserRuleCall_1; }
	}
	public class ORconditionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.ORcondition");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cANDconditionParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cORKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Action cOrLeftAction_1_1 = (Action)cGroup_1.eContents().get(1);
		private final Assignment cRightAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cRightANDconditionParserRuleCall_1_2_0 = (RuleCall)cRightAssignment_1_2.eContents().get(0);
		
		//ORcondition Proposition:
		//	ANDcondition ('OR' {or.left=current} right=ANDcondition)*;
		@Override public ParserRule getRule() { return rule; }
		
		//ANDcondition ('OR' {or.left=current} right=ANDcondition)*
		public Group getGroup() { return cGroup; }
		
		//ANDcondition
		public RuleCall getANDconditionParserRuleCall_0() { return cANDconditionParserRuleCall_0; }
		
		//('OR' {or.left=current} right=ANDcondition)*
		public Group getGroup_1() { return cGroup_1; }
		
		//'OR'
		public Keyword getORKeyword_1_0() { return cORKeyword_1_0; }
		
		//{or.left=current}
		public Action getOrLeftAction_1_1() { return cOrLeftAction_1_1; }
		
		//right=ANDcondition
		public Assignment getRightAssignment_1_2() { return cRightAssignment_1_2; }
		
		//ANDcondition
		public RuleCall getRightANDconditionParserRuleCall_1_2_0() { return cRightANDconditionParserRuleCall_1_2_0; }
	}
	public class ANDconditionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.ANDcondition");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cStatementParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cANDKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Action cAndLeftAction_1_1 = (Action)cGroup_1.eContents().get(1);
		private final Assignment cRightAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cRightStatementParserRuleCall_1_2_0 = (RuleCall)cRightAssignment_1_2.eContents().get(0);
		
		//ANDcondition Proposition:
		//	Statement ('AND' {and.left=current} right=Statement)*;
		@Override public ParserRule getRule() { return rule; }
		
		//Statement ('AND' {and.left=current} right=Statement)*
		public Group getGroup() { return cGroup; }
		
		//Statement
		public RuleCall getStatementParserRuleCall_0() { return cStatementParserRuleCall_0; }
		
		//('AND' {and.left=current} right=Statement)*
		public Group getGroup_1() { return cGroup_1; }
		
		//'AND'
		public Keyword getANDKeyword_1_0() { return cANDKeyword_1_0; }
		
		//{and.left=current}
		public Action getAndLeftAction_1_1() { return cAndLeftAction_1_1; }
		
		//right=Statement
		public Assignment getRightAssignment_1_2() { return cRightAssignment_1_2; }
		
		//Statement
		public RuleCall getRightStatementParserRuleCall_1_2_0() { return cRightStatementParserRuleCall_1_2_0; }
	}
	public class StatementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.Statement");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cNumberComparingParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final RuleCall cORconditionParserRuleCall_1_1 = (RuleCall)cGroup_1.eContents().get(1);
		private final Keyword cRightParenthesisKeyword_1_2 = (Keyword)cGroup_1.eContents().get(2);
		
		//Statement Proposition:
		//	NumberComparing | '(' ORcondition ')';
		@Override public ParserRule getRule() { return rule; }
		
		//NumberComparing | '(' ORcondition ')'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//NumberComparing
		public RuleCall getNumberComparingParserRuleCall_0() { return cNumberComparingParserRuleCall_0; }
		
		//'(' ORcondition ')'
		public Group getGroup_1() { return cGroup_1; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_1_0() { return cLeftParenthesisKeyword_1_0; }
		
		//ORcondition
		public RuleCall getORconditionParserRuleCall_1_1() { return cORconditionParserRuleCall_1_1; }
		
		//')'
		public Keyword getRightParenthesisKeyword_1_2() { return cRightParenthesisKeyword_1_2; }
	}
	public class NumberComparingElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.NumberComparing");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cLeftAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cLeftSumParserRuleCall_0_0 = (RuleCall)cLeftAssignment_0.eContents().get(0);
		private final Assignment cCompAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cCompComparatorParserRuleCall_1_0 = (RuleCall)cCompAssignment_1.eContents().get(0);
		private final Assignment cRightAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cRightSumParserRuleCall_2_0 = (RuleCall)cRightAssignment_2.eContents().get(0);
		
		//NumberComparing:
		//	left=Sum comp=Comparator right=Sum;
		@Override public ParserRule getRule() { return rule; }
		
		//left=Sum comp=Comparator right=Sum
		public Group getGroup() { return cGroup; }
		
		//left=Sum
		public Assignment getLeftAssignment_0() { return cLeftAssignment_0; }
		
		//Sum
		public RuleCall getLeftSumParserRuleCall_0_0() { return cLeftSumParserRuleCall_0_0; }
		
		//comp=Comparator
		public Assignment getCompAssignment_1() { return cCompAssignment_1; }
		
		//Comparator
		public RuleCall getCompComparatorParserRuleCall_1_0() { return cCompComparatorParserRuleCall_1_0; }
		
		//right=Sum
		public Assignment getRightAssignment_2() { return cRightAssignment_2; }
		
		//Sum
		public RuleCall getRightSumParserRuleCall_2_0() { return cRightSumParserRuleCall_2_0; }
	}
	public class ComparatorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.Comparator");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cLessThanSignKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cLessThanSignEqualsSignKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		private final Keyword cEqualsSignEqualsSignKeyword_2 = (Keyword)cAlternatives.eContents().get(2);
		private final Keyword cGreaterThanSignEqualsSignKeyword_3 = (Keyword)cAlternatives.eContents().get(3);
		private final Keyword cGreaterThanSignKeyword_4 = (Keyword)cAlternatives.eContents().get(4);
		
		//Comparator:
		//	'<' | '<=' | '==' | '>=' | '>';
		@Override public ParserRule getRule() { return rule; }
		
		//'<' | '<=' | '==' | '>=' | '>'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//'<'
		public Keyword getLessThanSignKeyword_0() { return cLessThanSignKeyword_0; }
		
		//'<='
		public Keyword getLessThanSignEqualsSignKeyword_1() { return cLessThanSignEqualsSignKeyword_1; }
		
		//'=='
		public Keyword getEqualsSignEqualsSignKeyword_2() { return cEqualsSignEqualsSignKeyword_2; }
		
		//'>='
		public Keyword getGreaterThanSignEqualsSignKeyword_3() { return cGreaterThanSignEqualsSignKeyword_3; }
		
		//'>'
		public Keyword getGreaterThanSignKeyword_4() { return cGreaterThanSignKeyword_4; }
	}
	public class SumElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.Sum");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cMultiplyParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Alternatives cAlternatives_1_0 = (Alternatives)cGroup_1.eContents().get(0);
		private final Group cGroup_1_0_0 = (Group)cAlternatives_1_0.eContents().get(0);
		private final Keyword cPlusSignKeyword_1_0_0_0 = (Keyword)cGroup_1_0_0.eContents().get(0);
		private final Action cAddLeftAction_1_0_0_1 = (Action)cGroup_1_0_0.eContents().get(1);
		private final Group cGroup_1_0_1 = (Group)cAlternatives_1_0.eContents().get(1);
		private final Keyword cHyphenMinusKeyword_1_0_1_0 = (Keyword)cGroup_1_0_1.eContents().get(0);
		private final Action cSubLeftAction_1_0_1_1 = (Action)cGroup_1_0_1.eContents().get(1);
		private final Assignment cRightAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cRightMultiplyParserRuleCall_1_1_0 = (RuleCall)cRightAssignment_1_1.eContents().get(0);
		
		//Sum:
		//	Multiply (('+' {Add.left=current} | '-' {Sub.left=current}) right=Multiply)*;
		@Override public ParserRule getRule() { return rule; }
		
		//Multiply (('+' {Add.left=current} | '-' {Sub.left=current}) right=Multiply)*
		public Group getGroup() { return cGroup; }
		
		//Multiply
		public RuleCall getMultiplyParserRuleCall_0() { return cMultiplyParserRuleCall_0; }
		
		//(('+' {Add.left=current} | '-' {Sub.left=current}) right=Multiply)*
		public Group getGroup_1() { return cGroup_1; }
		
		//('+' {Add.left=current} | '-' {Sub.left=current})
		public Alternatives getAlternatives_1_0() { return cAlternatives_1_0; }
		
		//'+' {Add.left=current}
		public Group getGroup_1_0_0() { return cGroup_1_0_0; }
		
		//'+'
		public Keyword getPlusSignKeyword_1_0_0_0() { return cPlusSignKeyword_1_0_0_0; }
		
		//{Add.left=current}
		public Action getAddLeftAction_1_0_0_1() { return cAddLeftAction_1_0_0_1; }
		
		//'-' {Sub.left=current}
		public Group getGroup_1_0_1() { return cGroup_1_0_1; }
		
		//'-'
		public Keyword getHyphenMinusKeyword_1_0_1_0() { return cHyphenMinusKeyword_1_0_1_0; }
		
		//{Sub.left=current}
		public Action getSubLeftAction_1_0_1_1() { return cSubLeftAction_1_0_1_1; }
		
		//right=Multiply
		public Assignment getRightAssignment_1_1() { return cRightAssignment_1_1; }
		
		//Multiply
		public RuleCall getRightMultiplyParserRuleCall_1_1_0() { return cRightMultiplyParserRuleCall_1_1_0; }
	}
	public class MultiplyElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.Multiply");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cAtomicNumberParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Alternatives cAlternatives_1_0 = (Alternatives)cGroup_1.eContents().get(0);
		private final Group cGroup_1_0_0 = (Group)cAlternatives_1_0.eContents().get(0);
		private final Keyword cAsteriskKeyword_1_0_0_0 = (Keyword)cGroup_1_0_0.eContents().get(0);
		private final Action cMultLeftAction_1_0_0_1 = (Action)cGroup_1_0_0.eContents().get(1);
		private final Group cGroup_1_0_1 = (Group)cAlternatives_1_0.eContents().get(1);
		private final Keyword cSolidusKeyword_1_0_1_0 = (Keyword)cGroup_1_0_1.eContents().get(0);
		private final Action cDivLeftAction_1_0_1_1 = (Action)cGroup_1_0_1.eContents().get(1);
		private final Assignment cRightAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cRightAtomicNumberParserRuleCall_1_1_0 = (RuleCall)cRightAssignment_1_1.eContents().get(0);
		
		//Multiply:
		//	AtomicNumber (('*' {Mult.left=current} | '/' {Div.left=current}) right=AtomicNumber)*;
		@Override public ParserRule getRule() { return rule; }
		
		//AtomicNumber (('*' {Mult.left=current} | '/' {Div.left=current}) right=AtomicNumber)*
		public Group getGroup() { return cGroup; }
		
		//AtomicNumber
		public RuleCall getAtomicNumberParserRuleCall_0() { return cAtomicNumberParserRuleCall_0; }
		
		//(('*' {Mult.left=current} | '/' {Div.left=current}) right=AtomicNumber)*
		public Group getGroup_1() { return cGroup_1; }
		
		//('*' {Mult.left=current} | '/' {Div.left=current})
		public Alternatives getAlternatives_1_0() { return cAlternatives_1_0; }
		
		//'*' {Mult.left=current}
		public Group getGroup_1_0_0() { return cGroup_1_0_0; }
		
		//'*'
		public Keyword getAsteriskKeyword_1_0_0_0() { return cAsteriskKeyword_1_0_0_0; }
		
		//{Mult.left=current}
		public Action getMultLeftAction_1_0_0_1() { return cMultLeftAction_1_0_0_1; }
		
		//'/' {Div.left=current}
		public Group getGroup_1_0_1() { return cGroup_1_0_1; }
		
		//'/'
		public Keyword getSolidusKeyword_1_0_1_0() { return cSolidusKeyword_1_0_1_0; }
		
		//{Div.left=current}
		public Action getDivLeftAction_1_0_1_1() { return cDivLeftAction_1_0_1_1; }
		
		//right=AtomicNumber
		public Assignment getRightAssignment_1_1() { return cRightAssignment_1_1; }
		
		//AtomicNumber
		public RuleCall getRightAtomicNumberParserRuleCall_1_1_0() { return cRightAtomicNumberParserRuleCall_1_1_0; }
	}
	public class AtomicNumberElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.AtomicNumber");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Assignment cValueAssignment_0 = (Assignment)cAlternatives.eContents().get(0);
		private final RuleCall cValueFloatParserRuleCall_0_0 = (RuleCall)cValueAssignment_0.eContents().get(0);
		private final Assignment cValue2Assignment_1 = (Assignment)cAlternatives.eContents().get(1);
		private final RuleCall cValue2INTTerminalRuleCall_1_0 = (RuleCall)cValue2Assignment_1.eContents().get(0);
		
		//AtomicNumber:
		//	value=Float | value2=INT;
		@Override public ParserRule getRule() { return rule; }
		
		//value=Float | value2=INT
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//value=Float
		public Assignment getValueAssignment_0() { return cValueAssignment_0; }
		
		//Float
		public RuleCall getValueFloatParserRuleCall_0_0() { return cValueFloatParserRuleCall_0_0; }
		
		//value2=INT
		public Assignment getValue2Assignment_1() { return cValue2Assignment_1; }
		
		//INT
		public RuleCall getValue2INTTerminalRuleCall_1_0() { return cValue2INTTerminalRuleCall_1_0; }
	}
	public class FloatElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.Float");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cINTTerminalRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Keyword cFullStopKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final RuleCall cINTTerminalRuleCall_2 = (RuleCall)cGroup.eContents().get(2);
		
		//Float:
		//	INT '.' INT;
		@Override public ParserRule getRule() { return rule; }
		
		//INT '.' INT
		public Group getGroup() { return cGroup; }
		
		//INT
		public RuleCall getINTTerminalRuleCall_0() { return cINTTerminalRuleCall_0; }
		
		//'.'
		public Keyword getFullStopKeyword_1() { return cFullStopKeyword_1; }
		
		//INT
		public RuleCall getINTTerminalRuleCall_2() { return cINTTerminalRuleCall_2; }
	}
	public class LegalTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.LegalType");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cFloatKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cIntegerKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		
		//LegalType:
		//	'Float' | 'Integer';
		@Override public ParserRule getRule() { return rule; }
		
		//'Float' | 'Integer'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//'Float'
		public Keyword getFloatKeyword_0() { return cFloatKeyword_0; }
		
		//'Integer'
		public Keyword getIntegerKeyword_1() { return cIntegerKeyword_1; }
	}
	
	
	private final SystemElements pSystem;
	private final DeclarationElements pDeclaration;
	private final LocationsElements pLocations;
	private final LocElements pLoc;
	private final RelationsElements pRelations;
	private final TypeElements pType;
	private final TypeExpressionElements pTypeExpression;
	private final MovesElements pMoves;
	private final MoveElements pMove;
	private final ETypeElements pEType;
	private final AttributesElements pAttributes;
	private final AttributeElements pAttribute;
	private final AttributeValuesElements pAttributeValues;
	private final AltAttributeElements pAltAttribute;
	private final RuleElements pRule;
	private final EntitiesElements pEntities;
	private final EntityElements pEntity;
	private final EntityMovesElements pEntityMoves;
	private final TeamsElements pTeams;
	private final TeamElements pTeam;
	private final MembersElements pMembers;
	private final BattleSizeElements pBattleSize;
	private final RequireElements pRequire;
	private final ORconditionElements pORcondition;
	private final ANDconditionElements pANDcondition;
	private final StatementElements pStatement;
	private final NumberComparingElements pNumberComparing;
	private final ComparatorElements pComparator;
	private final SumElements pSum;
	private final MultiplyElements pMultiply;
	private final AtomicNumberElements pAtomicNumber;
	private final FloatElements pFloat;
	private final LegalTypeElements pLegalType;
	
	private final Grammar grammar;
	
	private final TerminalsGrammarAccess gaTerminals;

	@Inject
	public MyDslGrammarAccess(GrammarProvider grammarProvider,
			TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
		this.pSystem = new SystemElements();
		this.pDeclaration = new DeclarationElements();
		this.pLocations = new LocationsElements();
		this.pLoc = new LocElements();
		this.pRelations = new RelationsElements();
		this.pType = new TypeElements();
		this.pTypeExpression = new TypeExpressionElements();
		this.pMoves = new MovesElements();
		this.pMove = new MoveElements();
		this.pEType = new ETypeElements();
		this.pAttributes = new AttributesElements();
		this.pAttribute = new AttributeElements();
		this.pAttributeValues = new AttributeValuesElements();
		this.pAltAttribute = new AltAttributeElements();
		this.pRule = new RuleElements();
		this.pEntities = new EntitiesElements();
		this.pEntity = new EntityElements();
		this.pEntityMoves = new EntityMovesElements();
		this.pTeams = new TeamsElements();
		this.pTeam = new TeamElements();
		this.pMembers = new MembersElements();
		this.pBattleSize = new BattleSizeElements();
		this.pRequire = new RequireElements();
		this.pORcondition = new ORconditionElements();
		this.pANDcondition = new ANDconditionElements();
		this.pStatement = new StatementElements();
		this.pNumberComparing = new NumberComparingElements();
		this.pComparator = new ComparatorElements();
		this.pSum = new SumElements();
		this.pMultiply = new MultiplyElements();
		this.pAtomicNumber = new AtomicNumberElements();
		this.pFloat = new FloatElements();
		this.pLegalType = new LegalTypeElements();
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("org.xtext.example.mydsl.MyDsl".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	
	
	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//System:
	//	'game' name=ID declarations+=Declaration*;
	public SystemElements getSystemAccess() {
		return pSystem;
	}
	
	public ParserRule getSystemRule() {
		return getSystemAccess().getRule();
	}
	
	//Declaration:
	//	Locations | Relations | Moves | Entities | Teams | Attributes;
	public DeclarationElements getDeclarationAccess() {
		return pDeclaration;
	}
	
	public ParserRule getDeclarationRule() {
		return getDeclarationAccess().getRule();
	}
	
	//Locations:
	//	'location' loc+=Loc+;
	public LocationsElements getLocationsAccess() {
		return pLocations;
	}
	
	public ParserRule getLocationsRule() {
		return getLocationsAccess().getRule();
	}
	
	//Loc:
	//	name=ID 'opponents' oname=ID;
	public LocElements getLocAccess() {
		return pLoc;
	}
	
	public ParserRule getLocRule() {
		return getLocAccess().getRule();
	}
	
	//Relations:
	//	'relations' type+=Type+;
	public RelationsElements getRelationsAccess() {
		return pRelations;
	}
	
	public ParserRule getRelationsRule() {
		return getRelationsAccess().getRule();
	}
	
	////Simple implementation for now so it can work
	//Type:
	//	name=ID;
	public TypeElements getTypeAccess() {
		return pType;
	}
	
	public ParserRule getTypeRule() {
		return getTypeAccess().getRule();
	}
	
	//TypeExpression:
	//	type=ID;
	public TypeExpressionElements getTypeExpressionAccess() {
		return pTypeExpression;
	}
	
	public ParserRule getTypeExpressionRule() {
		return getTypeExpressionAccess().getRule();
	}
	
	//Moves:
	//	'moves' move+=Move+;
	public MovesElements getMovesAccess() {
		return pMoves;
	}
	
	public ParserRule getMovesRule() {
		return getMovesAccess().getRule();
	}
	
	//Move:
	//	'move' name=ID eType=EType att+=AltAttribute*;
	public MoveElements getMoveAccess() {
		return pMove;
	}
	
	public ParserRule getMoveRule() {
		return getMoveAccess().getRule();
	}
	
	//EType:
	//	'type' type=[Type];
	public ETypeElements getETypeAccess() {
		return pEType;
	}
	
	public ParserRule getETypeRule() {
		return getETypeAccess().getRule();
	}
	
	//Attributes:
	//	'attributes' attribute+=Attribute+;
	public AttributesElements getAttributesAccess() {
		return pAttributes;
	}
	
	public ParserRule getAttributesRule() {
		return getAttributesAccess().getRule();
	}
	
	//Attribute:
	//	'attribute' name=ID aVal=AttributeValues;
	public AttributeElements getAttributeAccess() {
		return pAttribute;
	}
	
	public ParserRule getAttributeRule() {
		return getAttributeAccess().getRule();
	}
	
	//AttributeValues:
	//	'is' (lTypes=LegalType | value=AtomicNumber) | (rule=Rule | require=Require);
	public AttributeValuesElements getAttributeValuesAccess() {
		return pAttributeValues;
	}
	
	public ParserRule getAttributeValuesRule() {
		return getAttributeValuesAccess().getRule();
	}
	
	//AltAttribute:
	//	'attribute' attriburte+=[Attribute]+ av=AttributeValues?;
	public AltAttributeElements getAltAttributeAccess() {
		return pAltAttribute;
	}
	
	public ParserRule getAltAttributeRule() {
		return getAltAttributeAccess().getRule();
	}
	
	////Sum cannot find the signs needed for the expression but want an AtomicNumber instead
	//Rule:
	//	'if' attribute=[Attribute] comp=Comparator value=AtomicNumber 'then' attribute2=[Attribute] sum=Sum val=AtomicNumber;
	public RuleElements getRuleAccess() {
		return pRule;
	}
	
	public ParserRule getRuleRule() {
		return getRuleAccess().getRule();
	}
	
	//Entities:
	//	'entities' entity+=Entity+;
	public EntitiesElements getEntitiesAccess() {
		return pEntities;
	}
	
	public ParserRule getEntitiesRule() {
		return getEntitiesAccess().getRule();
	}
	
	//Entity:
	//	'entity' name=ID eType=EType att+=AltAttribute* eMoves+=EntityMoves*;
	public EntityElements getEntityAccess() {
		return pEntity;
	}
	
	public ParserRule getEntityRule() {
		return getEntityAccess().getRule();
	}
	
	//EntityMoves:
	//	'move' move+=[Move]+;
	public EntityMovesElements getEntityMovesAccess() {
		return pEntityMoves;
	}
	
	public ParserRule getEntityMovesRule() {
		return getEntityMovesAccess().getRule();
	}
	
	//Teams:
	//	'teams' Require? bs=BattleSize team+=Team+;
	public TeamsElements getTeamsAccess() {
		return pTeams;
	}
	
	public ParserRule getTeamsRule() {
		return getTeamsAccess().getRule();
	}
	
	//Team:
	//	'team' name=ID members+=Members+;
	public TeamElements getTeamAccess() {
		return pTeam;
	}
	
	public ParserRule getTeamRule() {
		return getTeamAccess().getRule();
	}
	
	//Members:
	//	'members' entity+=[Entity]+;
	public MembersElements getMembersAccess() {
		return pMembers;
	}
	
	public ParserRule getMembersRule() {
		return getMembersAccess().getRule();
	}
	
	//BattleSize:
	//	'battling_member_count' value=AtomicNumber req=Require?;
	public BattleSizeElements getBattleSizeAccess() {
		return pBattleSize;
	}
	
	public ParserRule getBattleSizeRule() {
		return getBattleSizeAccess().getRule();
	}
	
	//Require:
	//	'require' ORcondition | ORcondition;
	public RequireElements getRequireAccess() {
		return pRequire;
	}
	
	public ParserRule getRequireRule() {
		return getRequireAccess().getRule();
	}
	
	//ORcondition Proposition:
	//	ANDcondition ('OR' {or.left=current} right=ANDcondition)*;
	public ORconditionElements getORconditionAccess() {
		return pORcondition;
	}
	
	public ParserRule getORconditionRule() {
		return getORconditionAccess().getRule();
	}
	
	//ANDcondition Proposition:
	//	Statement ('AND' {and.left=current} right=Statement)*;
	public ANDconditionElements getANDconditionAccess() {
		return pANDcondition;
	}
	
	public ParserRule getANDconditionRule() {
		return getANDconditionAccess().getRule();
	}
	
	//Statement Proposition:
	//	NumberComparing | '(' ORcondition ')';
	public StatementElements getStatementAccess() {
		return pStatement;
	}
	
	public ParserRule getStatementRule() {
		return getStatementAccess().getRule();
	}
	
	//NumberComparing:
	//	left=Sum comp=Comparator right=Sum;
	public NumberComparingElements getNumberComparingAccess() {
		return pNumberComparing;
	}
	
	public ParserRule getNumberComparingRule() {
		return getNumberComparingAccess().getRule();
	}
	
	//Comparator:
	//	'<' | '<=' | '==' | '>=' | '>';
	public ComparatorElements getComparatorAccess() {
		return pComparator;
	}
	
	public ParserRule getComparatorRule() {
		return getComparatorAccess().getRule();
	}
	
	//Sum:
	//	Multiply (('+' {Add.left=current} | '-' {Sub.left=current}) right=Multiply)*;
	public SumElements getSumAccess() {
		return pSum;
	}
	
	public ParserRule getSumRule() {
		return getSumAccess().getRule();
	}
	
	//Multiply:
	//	AtomicNumber (('*' {Mult.left=current} | '/' {Div.left=current}) right=AtomicNumber)*;
	public MultiplyElements getMultiplyAccess() {
		return pMultiply;
	}
	
	public ParserRule getMultiplyRule() {
		return getMultiplyAccess().getRule();
	}
	
	//AtomicNumber:
	//	value=Float | value2=INT;
	public AtomicNumberElements getAtomicNumberAccess() {
		return pAtomicNumber;
	}
	
	public ParserRule getAtomicNumberRule() {
		return getAtomicNumberAccess().getRule();
	}
	
	//Float:
	//	INT '.' INT;
	public FloatElements getFloatAccess() {
		return pFloat;
	}
	
	public ParserRule getFloatRule() {
		return getFloatAccess().getRule();
	}
	
	//LegalType:
	//	'Float' | 'Integer';
	public LegalTypeElements getLegalTypeAccess() {
		return pLegalType;
	}
	
	public ParserRule getLegalTypeRule() {
		return getLegalTypeAccess().getRule();
	}
	
	//terminal ID:
	//	'^'? ('a'..'z' | 'A'..'Z' | '_') ('a'..'z' | 'A'..'Z' | '_' | '0'..'9')*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	}
	
	//terminal INT returns ecore::EInt:
	//	'0'..'9'+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	}
	
	//terminal STRING:
	//	'"' ('\\' . | !('\\' | '"'))* '"' | "'" ('\\' . | !('\\' | "'"))* "'";
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	}
	
	//terminal ML_COMMENT:
	//	'/*'->'*/';
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	}
	
	//terminal SL_COMMENT:
	//	'//' !('\n' | '\r')* ('\r'? '\n')?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	}
	
	//terminal WS:
	//	' ' | '\t' | '\r' | '\n'+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	}
	
	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	}
}
