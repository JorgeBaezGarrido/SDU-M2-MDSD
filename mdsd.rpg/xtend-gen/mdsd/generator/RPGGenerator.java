/**
 * generated by Xtext 2.21.0
 */
package mdsd.generator;

import com.google.common.collect.Iterators;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import mdsd.rPG.Add;
import mdsd.rPG.AltAttribute;
import mdsd.rPG.And;
import mdsd.rPG.AtomicNumber;
import mdsd.rPG.Attribute;
import mdsd.rPG.Attributes;
import mdsd.rPG.BEffect;
import mdsd.rPG.Bigger;
import mdsd.rPG.BiggerEq;
import mdsd.rPG.Buff;
import mdsd.rPG.BuffEffect;
import mdsd.rPG.BuffRule;
import mdsd.rPG.Comparator;
import mdsd.rPG.Death;
import mdsd.rPG.Declaration;
import mdsd.rPG.Div;
import mdsd.rPG.Effect2;
import mdsd.rPG.Effects;
import mdsd.rPG.Entities;
import mdsd.rPG.Entity;
import mdsd.rPG.Eq;
import mdsd.rPG.FloatNum;
import mdsd.rPG.IntNum;
import mdsd.rPG.Locations;
import mdsd.rPG.MEffect;
import mdsd.rPG.Move;
import mdsd.rPG.MoveE;
import mdsd.rPG.MoveEffect;
import mdsd.rPG.MoveRule;
import mdsd.rPG.Moves;
import mdsd.rPG.Mult;
import mdsd.rPG.NEq;
import mdsd.rPG.NameAttribute;
import mdsd.rPG.NumberComparing;
import mdsd.rPG.Or;
import mdsd.rPG.Proposition;
import mdsd.rPG.Relations;
import mdsd.rPG.Require;
import mdsd.rPG.Smaller;
import mdsd.rPG.SmallerEq;
import mdsd.rPG.Sub;
import mdsd.rPG.Sum;
import mdsd.rPG.SystemRPG;
import mdsd.rPG.Team;
import mdsd.rPG.Teams;
import mdsd.rPG.Type;
import org.eclipse.emf.common.util.EList;
import org.eclipse.emf.ecore.resource.Resource;
import org.eclipse.xtend2.lib.StringConcatenation;
import org.eclipse.xtext.generator.AbstractGenerator;
import org.eclipse.xtext.generator.IFileSystemAccess2;
import org.eclipse.xtext.generator.IGeneratorContext;

/**
 * Generates code from your model files on save.
 * 
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#code-generation
 */
@SuppressWarnings("all")
public class RPGGenerator extends AbstractGenerator {
  @Override
  public void doGenerate(final Resource resource, final IFileSystemAccess2 fsa, final IGeneratorContext context) {
    final SystemRPG mathLul = Iterators.<SystemRPG>filter(resource.getAllContents(), SystemRPG.class).next();
    this.god(mathLul, fsa);
  }
  
  public void god(final SystemRPG thing, final IFileSystemAccess2 fsa) {
    boolean locationbool = false;
    boolean relationbool = false;
    boolean movesbool = false;
    boolean entitiesbool = false;
    boolean teamsbool = false;
    boolean attributesbool = false;
    boolean deathbool = false;
    boolean effectbool = false;
    final String classFileName = thing.getName();
    EList<Declaration> _declarations = thing.getDeclarations();
    for (final Declaration d : _declarations) {
      boolean _matched = false;
      if (d instanceof Locations) {
        _matched=true;
        if ((!locationbool)) {
          fsa.generateFile("Location.java", this.generateLocation(((Locations)d)));
          locationbool = true;
        }
      }
      if (!_matched) {
        if (d instanceof Relations) {
          _matched=true;
          if ((!relationbool)) {
            this.generateTypes(fsa, ((Relations)d));
            relationbool = true;
          }
        }
      }
      if (!_matched) {
        if (d instanceof Moves) {
          _matched=true;
          if ((!movesbool)) {
            this.generateMoves(fsa, ((Moves)d));
            this.test(((Moves)d));
            movesbool = true;
          }
        }
      }
      if (!_matched) {
        if (d instanceof Entities) {
          _matched=true;
          if ((!entitiesbool)) {
            this.generateEntities(fsa, ((Entities)d));
            entitiesbool = true;
          }
        }
      }
      if (!_matched) {
        if (d instanceof Teams) {
          _matched=true;
          if ((!teamsbool)) {
            this.generateTeams(fsa, ((Teams)d));
            teamsbool = true;
          }
        }
      }
      if (!_matched) {
        if (d instanceof Attributes) {
          _matched=true;
          if ((!attributesbool)) {
            this.generateAttributes(fsa, ((Attributes)d));
            attributesbool = true;
          }
        }
      }
      if (!_matched) {
        if (d instanceof Death) {
          _matched=true;
          if ((!deathbool)) {
            fsa.generateFile("DeathChecker.java", this.generateDeathChecker(((Death)d)));
            deathbool = true;
          }
        }
      }
      if (!_matched) {
        if (d instanceof Effects) {
          _matched=true;
          System.out.println("Hello");
          if ((!effectbool)) {
            this.generateEffectFiles(fsa, ((Effects)d));
            effectbool = true;
          }
        }
      }
      if (!_matched) {
        System.out.println("reported");
      }
    }
    fsa.generateFile((classFileName + ".java"), this.generateGamePOG2(classFileName));
  }
  
  public Object generateLocations(final Locations locations) {
    return null;
  }
  
  public CharSequence generateDeathChecker(final Death death) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("import java.util.*;");
    _builder.newLine();
    _builder.append("public class DeathChecker {");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public boolean check(Entity entity){");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("HashMap<String, Number> eData = new HashMap<>();");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("for(AttributeData aData : entity.getAttributes()){");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("eData.put(aData.getAttributeName(), aData.getNumber());");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("return (");
    CharSequence _new_re = this.new_re(death.getReq(), false);
    _builder.append(_new_re, "\t\t");
    _builder.append(");");
    _builder.newLineIfNotEmpty();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    return _builder;
  }
  
  public CharSequence generateEffect(final MoveRule moveRule) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.newLine();
    _builder.append("public class Effect{");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("Entity player;");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("Entity enemy;");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("String moveName = \"ember\";");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("Move ember;");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("int moveInt;");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public boolean effectMove(){");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("HashMap<String, Number> eData = new HashMap<>();\t\t\t");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("//if(ember.getMove(moveName).getAttributes)");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("for(AttributeData aData : ember.getMove(moveName).getMoveAttributes()){");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("eData.put(aData.getAttributeName(), aData.getNumber());");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("for(AttributeData aData : player.getAttributes()){");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("eData.put(aData.getAttributeName(), aData.getNumber());");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public void Test(){");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("if()");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("p");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    return _builder;
  }
  
  public CharSequence generateBuffEffect(final BuffRule buffRule) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.newLine();
    _builder.append("public boolean effectBuff(Move move, String name, Entity player){");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("HashMap<String, Number> eData = new HashMap<>();");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("for(AttributeData playerData : player.getAttributes()){");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("eData.put(aData.getAttributeName(), aData.getNumber());");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}\t\t\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("for(AttributeData aData : move.getMove(name).getMoveAttributes()){");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("eData.put(aData.getAttributeName(), aData.getNumber());\t\t\t\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("return ");
    CharSequence _new_logic = this.new_logic(buffRule.getOr(), false);
    _builder.append(_new_logic, "\t");
    _builder.newLineIfNotEmpty();
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("public Number changeBuff(Move move, String name Entity player){");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("HashMap<String, Number> eData = new HashMap<>();");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("for(AttributeData playerData : player.getAttributes()){");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("eData.put(aData.getAttributeName(), aData.getNumber());");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("}\t\t\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("for(AttributeData aData : move.getMove(name).getMoveAttributes()){");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("eData.put(aData.getAttributeName(), aData.getNumber());\t\t\t\t");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("return ");
    CharSequence _new_exp = this.new_exp(buffRule.getSum(), false);
    _builder.append(_new_exp, "\t\t");
    _builder.newLineIfNotEmpty();
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.newLine();
    _builder.append("public void doMove(){");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("if(effectBuff(move, \"ember\", player)){");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("for(AttributeData aData : player.getAttributes()){");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("if(aData.getName() == ");
    String _name = buffRule.getTarget().getName();
    _builder.append(_name, "\t\t\t");
    _builder.append("){");
    _builder.newLineIfNotEmpty();
    _builder.append("\t\t\t\t");
    _builder.append("aData.setNumber(changeBuff(move, \"ember\", player));");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}\t\t\t");
    _builder.newLine();
    _builder.append("}\t\t");
    _builder.newLine();
    return _builder;
  }
  
  public CharSequence generateBuffEffectAttName() {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("if((eData.get(\"current_hp\").floatValue()>(eData.get(\"current_hp\").floatValue()/5)))){");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("for(AttributeData aData : player.getAttributes()){");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("if(aData.getName() == \"power\"){");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("aData.setNumber(eData.get(\"power\").intValue()*eData.get(\"pp\").intValue()));");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    return _builder;
  }
  
  public CharSequence generateGamePOG2(final String classFileName) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("import java.util.*;");
    _builder.newLine();
    _builder.append("import java.awt.event.*;");
    _builder.newLine();
    _builder.newLine();
    _builder.append("public class ");
    _builder.append(classFileName);
    _builder.append("{");
    _builder.newLineIfNotEmpty();
    _builder.append("\t");
    _builder.append("private Type type;");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("private boolean gameFinished;");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("private List<Entity> entities;");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("private List<Entity> battleEntities;");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("private Team team;");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("private Move move;");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("private MoveInit moveInit;");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("private EntityInit entityInit;");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("private TeamInit teamInit;");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("private TypeRelationsInit tRI;");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("private String currentLocation;");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("private String currentTeam;");
    _builder.newLine();
    _builder.append("    ");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("public ");
    _builder.append(classFileName, "    ");
    _builder.append("(){");
    _builder.newLineIfNotEmpty();
    _builder.append("    \t");
    _builder.append("entities = new ArrayList<>();");
    _builder.newLine();
    _builder.append("      \t");
    _builder.append("team = new Team();");
    _builder.newLine();
    _builder.append("    \t");
    _builder.append("battleEntities = new ArrayList<>();");
    _builder.newLine();
    _builder.append("    \t");
    _builder.append("move = Move.getInstance();");
    _builder.newLine();
    _builder.append("    \t");
    _builder.append("moveInit = new MoveInit();");
    _builder.newLine();
    _builder.append("    \t");
    _builder.append("entityInit = new EntityInit();");
    _builder.newLine();
    _builder.append("    \t");
    _builder.append("teamInit = new TeamInit();");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("tRI = new TypeRelationsInit();");
    _builder.newLine();
    _builder.append("   \t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("   \t");
    _builder.newLine();
    _builder.append("   \t");
    _builder.append("public void run(){");
    _builder.newLine();
    _builder.append("   \t\t");
    _builder.append("initialize();");
    _builder.newLine();
    _builder.append("   \t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("   \t");
    _builder.newLine();
    _builder.append("   \t");
    _builder.append("private void initialize(){");
    _builder.newLine();
    _builder.append("   \t\t");
    _builder.append("moveInit.addMoves(move);");
    _builder.newLine();
    _builder.append("   \t\t");
    _builder.append("entityInit.createEntities(entities);");
    _builder.newLine();
    _builder.append("   \t\t");
    _builder.append("teamInit.createTeams(team, entities);");
    _builder.newLine();
    _builder.append("   \t\t");
    _builder.append("tRI.createRelations(type);");
    _builder.newLine();
    _builder.append("   \t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.newLine();
    return _builder;
  }
  
  public void generateAttributes(final IFileSystemAccess2 fsa, final Attributes attributes) {
    fsa.generateFile("AttributeEnum.java", this.generateAttributeEnum(attributes));
    fsa.generateFile("AttributeData.java", this.generateAttributeData());
  }
  
  public CharSequence generateAttribute() {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("import java.util.*;");
    _builder.newLine();
    _builder.newLine();
    _builder.append("public class Attribute {");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("private List<AttributeData> attributes = new ArrayList<>();");
    _builder.newLine();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("private static Attribute attribute;");
    _builder.newLine();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("private Attribute() {");
    _builder.newLine();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("public static Attribute getInstance() {");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("if (attribute == null) {");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("attribute = new Attribute();");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("return attribute;");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("public void addAttribute(AttributeData attribute) {");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("attributes.add(attribute);");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("    ");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("public List<AttributeData> getAttributes() {");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("return attributes;");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    return _builder;
  }
  
  public CharSequence generateAttributeChangeEvent() {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("public class AttributeChangeEvent{");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("private AttributeData previousState;");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("private AttributeData targetState;");
    _builder.newLine();
    _builder.newLine();
    _builder.append("  ");
    _builder.append("public AttributeChangeEvent(AttributeData previousState, AttributeData targetState){");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("this.previousState = previousState;");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("this.targetState = targetState;");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("  ");
    _builder.append("public AttributeData getTargetState(){");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("return this.targetState;");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("  ");
    _builder.append("public AttributeData getPreviousState(){");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("return this.previousState;");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    return _builder;
  }
  
  public CharSequence generateAttributeData() {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("import java.util.*;");
    _builder.newLine();
    _builder.append("public class AttributeData {");
    _builder.newLine();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("private Number number;");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("private String attributeName;");
    _builder.newLine();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("public AttributeData() {");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("public AttributeData(String attributeName, Number number) {");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("this.number = number;");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("this.attributeName = attributeName;");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("public Number getNumber() {");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("return this.number;");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("public void setNumber(Number number){");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("this.number = number;");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("public String getAttributeName() {");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("return this.attributeName;");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("public void setAttributeName(String attributeName) {");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("this.attributeName = attributeName;");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    return _builder;
  }
  
  public CharSequence generateAttributeEnum(final Attributes attributes) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("public enum AttributeEnum{");
    _builder.newLine();
    {
      EList<Attribute> _attribute = attributes.getAttribute();
      for(final Attribute attribute : _attribute) {
        String _name = attribute.getName();
        _builder.append(_name);
        _builder.append(",");
        _builder.newLineIfNotEmpty();
      }
    }
    _builder.append("}");
    _builder.newLine();
    return _builder;
  }
  
  public CharSequence generateEffect(final Moves moves) {
    return null;
  }
  
  public void generateEffectFiles(final IFileSystemAccess2 fsa, final Effects effects) {
    int i = 1;
    boolean moveEffectBoolean = false;
    boolean buffEffectBoolean = false;
    EList<Effect2> _effect = effects.getEffect();
    for (final Effect2 effect : _effect) {
      {
        System.out.println(i);
        boolean _matched = false;
        if (effect instanceof Buff) {
          _matched=true;
          if ((!buffEffectBoolean)) {
            fsa.generateFile("EffectBuff.java", this.generateEffectBuff());
            buffEffectBoolean = true;
          }
          String _name = ((Buff)effect).getName();
          String _plus = (_name + ".java");
          fsa.generateFile(_plus, this.generateBuffEffectFile(((Buff)effect)));
          System.out.println(((Buff)effect).getName());
        }
        if (!_matched) {
          if (effect instanceof MoveE) {
            _matched=true;
            if ((!moveEffectBoolean)) {
              fsa.generateFile("EffectMove.java", this.generateEffectMove());
              moveEffectBoolean = true;
            }
            String _name = ((MoveE)effect).getName();
            String _plus = (_name + ".java");
            fsa.generateFile(_plus, this.generateMoveEffectFile(((MoveE)effect)));
            System.out.println(((MoveE)effect).getName());
          }
        }
        i++;
      }
    }
  }
  
  public CharSequence generateEffectMove() {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("import java.util.*;");
    _builder.newLine();
    _builder.append("public abstract class EffectMove {");
    _builder.newLine();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("public abstract boolean effectMove(Move move, String name, Entity enemy);");
    _builder.newLine();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("public abstract Number changeMove(Move move, String name, Entity enemy);");
    _builder.newLine();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("public abstract void doEffect(Move move, String name, Entity enemy);    \t");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    return _builder;
  }
  
  public CharSequence generateEffectBuff() {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("import java.util.*;");
    _builder.newLine();
    _builder.append("public abstract class EffectBuff {");
    _builder.newLine();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("public abstract boolean effectBuff(Move move, String name, Entity player);");
    _builder.newLine();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("public abstract Number changeBuff(Move move, String name, Entity player);");
    _builder.newLine();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("public abstract void doEffect(Move move, String name, Entity player);    \t");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    return _builder;
  }
  
  public CharSequence generateBuffEffectFile(final Buff buff) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("import java.util.*;");
    _builder.newLine();
    _builder.append("public class ");
    String _name = buff.getName();
    _builder.append(_name);
    _builder.append(" extends EffectBuff{");
    _builder.newLineIfNotEmpty();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("@Override");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public boolean effectBuff(Move move, String name, Entity player){");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("HashMap<String, Number> eData = new HashMap<>();");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("for(AttributeData playerData : player.getAttributes()){");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("eData.put(playerData.getAttributeName(), playerData.getNumber());");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("}\t\t\t");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("for(AttributeData aData : move.getMove(name).getMoveAttributes()){");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("eData.put(aData.getAttributeName(), aData.getNumber());\t\t\t\t");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("return ");
    CharSequence _new_logic = this.new_logic(buff.getBuffR().getOr(), false);
    _builder.append(_new_logic, "\t\t");
    _builder.append(";");
    _builder.newLineIfNotEmpty();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t");
    _builder.append("@Override");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public Number changeBuff(Move move, String name, Entity player){");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("HashMap<String, Number> eData = new HashMap<>();");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("for(AttributeData playerData : player.getAttributes()){");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("eData.put(playerData.getAttributeName(), playerData.getNumber());");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("}\t\t\t");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("for(AttributeData aData : move.getMove(name).getMoveAttributes()){");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("eData.put(aData.getAttributeName(), aData.getNumber());\t\t\t\t");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("return ");
    CharSequence _new_exp = this.new_exp(buff.getBuffR().getSum(), false);
    _builder.append(_new_exp, "\t\t\t");
    _builder.append(";");
    _builder.newLineIfNotEmpty();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t");
    _builder.append("@Override\t\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public void doEffect(Move move, String name, Entity player){");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("if(effectBuff(move, name, player)){");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("for(AttributeData aData : player.getAttributes()){");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("if(aData.getAttributeName() == \"");
    String _name_1 = buff.getBuffR().getTarget().getName();
    _builder.append(_name_1, "\t\t\t\t");
    _builder.append("\"){");
    _builder.newLineIfNotEmpty();
    _builder.append("\t\t\t\t\t");
    _builder.append("aData.setNumber(changeBuff(move, name, player));");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("}\t\t\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    return _builder;
  }
  
  public CharSequence generateMoveEffectFile(final MoveE moveE) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("import java.util.*;");
    _builder.newLine();
    _builder.append("public class ");
    String _name = moveE.getName();
    _builder.append(_name);
    _builder.append(" extends EffectMove{");
    _builder.newLineIfNotEmpty();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("@Override");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public boolean effectMove(Move move, String name, Entity enemy){");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("HashMap<String, Number> eData = new HashMap<>();");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("for(AttributeData enemyData : enemy.getAttributes()){");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("eData.put(enemyData.getAttributeName(), enemyData.getNumber());");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("}\t\t\t");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("for(AttributeData aData : move.getMove(name).getMoveAttributes()){");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("eData.put(aData.getAttributeName(), aData.getNumber());\t\t\t\t");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("return ");
    CharSequence _new_logic = this.new_logic(moveE.getMoveR().getOr(), false);
    _builder.append(_new_logic, "\t\t");
    _builder.append(";");
    _builder.newLineIfNotEmpty();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("@Override");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public Number changeMove(Move move, String name, Entity enemy){");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("HashMap<String, Number> eData = new HashMap<>();");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("for(AttributeData enemyData : enemy.getAttributes()){");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("eData.put(enemyData.getAttributeName(), enemyData.getNumber());");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("}\t\t\t");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("for(AttributeData aData : move.getMove(name).getMoveAttributes()){");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("eData.put(aData.getAttributeName(), aData.getNumber());\t\t\t\t");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("return ");
    CharSequence _new_exp = this.new_exp(moveE.getMoveR().getSum(), false);
    _builder.append(_new_exp, "\t\t\t");
    _builder.append(";");
    _builder.newLineIfNotEmpty();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t");
    _builder.append("@Override\t\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public void doEffect(Move move, String name, Entity enemy){");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("if(effectMove(move, name, enemy)){");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("for(AttributeData aData : enemy.getAttributes()){");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("if(aData.getAttributeName() == \"");
    String _name_1 = moveE.getMoveR().getTarget().getName();
    _builder.append(_name_1, "\t\t\t\t");
    _builder.append("\"){");
    _builder.newLineIfNotEmpty();
    _builder.append("\t\t\t\t\t");
    _builder.append("aData.setNumber(changeMove(move, name, enemy));");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("}\t\t\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    return _builder;
  }
  
  public void test(final Moves moves) {
    ArrayList<Object> list = new ArrayList<Object>();
    EList<Move> _move = moves.getMove();
    for (final Move move : _move) {
      boolean _isEmpty = move.getMoveE().isEmpty();
      boolean _not = (!_isEmpty);
      if (_not) {
        EList<MoveEffect> _moveE = move.getMoveE();
        for (final MoveEffect effects : _moveE) {
          this.generateEffect(effects.getMoveR());
        }
        boolean _isEmpty_1 = move.getBuffE().isEmpty();
        boolean _not_1 = (!_isEmpty_1);
        if (_not_1) {
          EList<BuffEffect> _buffE = move.getBuffE();
          for (final BuffEffect effects_1 : _buffE) {
            this.generateBuffEffect(effects_1.getMoveB());
          }
        }
      }
    }
    for (final Object o : list) {
      System.out.println(o.toString());
    }
  }
  
  public Object moveRuleTest(final MoveRule moveRule) {
    return null;
  }
  
  protected Object _exp2(final Add x, final List<Object> list) {
    Object _xblockexpression = null;
    {
      this.exp2(x.getLeft(), list);
      list.add("+");
      _xblockexpression = this.exp2(x.getRight(), list);
    }
    return _xblockexpression;
  }
  
  protected Object _exp2(final Sub x, final List<Object> list) {
    Object _xblockexpression = null;
    {
      this.exp2(x.getLeft(), list);
      list.add("-");
      _xblockexpression = this.exp2(x.getRight(), list);
    }
    return _xblockexpression;
  }
  
  protected Object _exp2(final Mult x, final List<Object> list) {
    Object _xblockexpression = null;
    {
      this.exp2(x.getLeft(), list);
      list.add("*");
      _xblockexpression = this.exp2(x.getRight(), list);
    }
    return _xblockexpression;
  }
  
  protected Object _exp2(final Div x, final List<Object> list) {
    Object _xblockexpression = null;
    {
      this.exp2(x.getLeft(), list);
      list.add("/");
      _xblockexpression = this.exp2(x.getRight(), list);
    }
    return _xblockexpression;
  }
  
  protected Object _exp2(final IntNum x, final List<Object> list) {
    return Boolean.valueOf(list.add(Integer.valueOf(x.getValue())));
  }
  
  protected Object _exp2(final FloatNum x, final List<Object> list) {
    return Boolean.valueOf(list.add(Integer.valueOf(x.getDecimal())));
  }
  
  protected Object _exp2(final NameAttribute x, final List<Object> list) {
    return Boolean.valueOf(list.add(x.getAttribute().getAVal()));
  }
  
  public void generateEntities(final IFileSystemAccess2 fsa, final Entities entities) {
    fsa.generateFile("Entity.java", this.generateEntity());
    fsa.generateFile("EntityEnum.java", this.generateEntityEnum(entities));
    fsa.generateFile("EntityState.java", this.generateEntityState());
    fsa.generateFile("EntityInit.java", this.generateEntityInit(entities));
  }
  
  public CharSequence generateEntity() {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("import java.util.*;");
    _builder.newLine();
    _builder.append("public class Entity{");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("private String name;");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("private String type;");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("private EntityState state;");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("private List<AttributeData> attribute;");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("private List<MoveData> moves;");
    _builder.newLine();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("public Entity(){");
    _builder.newLine();
    _builder.append("      ");
    _builder.append("attribute = new ArrayList<>();");
    _builder.newLine();
    _builder.append("      ");
    _builder.append("moves = new ArrayList<>();");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("public Entity(Entity e){");
    _builder.newLine();
    _builder.append("      ");
    _builder.append("this();");
    _builder.newLine();
    _builder.append("      ");
    _builder.append("this.name = e.getName();");
    _builder.newLine();
    _builder.append("      ");
    _builder.append("this.type = e.getType();");
    _builder.newLine();
    _builder.append("      ");
    _builder.append("this.state = e.getEntityState();");
    _builder.newLine();
    _builder.append("      ");
    _builder.append("if(!e.getAttributes().isEmpty())");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("this.attribute.addAll(e.getAttributes());");
    _builder.newLine();
    _builder.append("      ");
    _builder.append("if(!e.getMoveData().isEmpty())");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("this.moves.addAll(e.getMoveData());");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("public String getName(){");
    _builder.newLine();
    _builder.append("      ");
    _builder.append("return this.name;");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("public void setName(String name){");
    _builder.newLine();
    _builder.append("      ");
    _builder.append("this.name = name;");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("public String getType(){");
    _builder.newLine();
    _builder.append("      ");
    _builder.append("return this.type;");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("public void setType(String type){");
    _builder.newLine();
    _builder.append("      ");
    _builder.append("this.type = type;");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("public List<AttributeData> getAttributes(){");
    _builder.newLine();
    _builder.append("      ");
    _builder.append("return attribute;");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("public EntityState getEntityState(){");
    _builder.newLine();
    _builder.append("      ");
    _builder.append("return state;");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("public void setEntityState(EntityState state){");
    _builder.newLine();
    _builder.append("      ");
    _builder.append("this.state = state;");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("public void addAttribute(AttributeData attribute){");
    _builder.newLine();
    _builder.append("      ");
    _builder.append("this.attribute.add(attribute);");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("public List<MoveData> getMoveData(){");
    _builder.newLine();
    _builder.append("      ");
    _builder.append("return moves;");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("public List<String> getMoveNameList(){");
    _builder.newLine();
    _builder.append("      ");
    _builder.append("List<String> moveNames = new ArrayList<>();");
    _builder.newLine();
    _builder.append("      ");
    _builder.append("for (MoveData moveData : getMoveData()) {");
    _builder.newLine();
    _builder.append("          ");
    _builder.append("moveNames.add(moveData.getMoveName());");
    _builder.newLine();
    _builder.append("      ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("      ");
    _builder.append("return moveNames;");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("    ");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("public void addMoveData(MoveData moveData){");
    _builder.newLine();
    _builder.append("      ");
    _builder.append("moves.add(moveData);");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    return _builder;
  }
  
  public CharSequence generateEntityEnum(final Entities entities) {
    CharSequence _xblockexpression = null;
    {
      String entityEnum = "";
      int i = 1;
      EList<Entity> _entity = entities.getEntity();
      for (final Entity entity : _entity) {
        {
          String _entityEnum = entityEnum;
          String _name = entity.getName();
          entityEnum = (_entityEnum + _name);
          int _size = entities.getEntity().size();
          boolean _lessThan = (i < _size);
          if (_lessThan) {
            String _entityEnum_1 = entityEnum;
            entityEnum = (_entityEnum_1 + ", ");
            i++;
          } else {
            String _entityEnum_2 = entityEnum;
            entityEnum = (_entityEnum_2 + ";");
          }
        }
      }
      StringConcatenation _builder = new StringConcatenation();
      _builder.append("enum EntityEnum{");
      _builder.newLine();
      _builder.append("\t");
      _builder.append(entityEnum, "\t");
      _builder.newLineIfNotEmpty();
      _builder.append("}");
      _builder.newLine();
      _xblockexpression = _builder;
    }
    return _xblockexpression;
  }
  
  public CharSequence generateEntityState() {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("public enum EntityState {");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("DEAD, ALIVE");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    return _builder;
  }
  
  public CharSequence generateEntityInit(final Entities entities) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("import java.util.*;");
    _builder.newLine();
    _builder.newLine();
    _builder.append("public class EntityInit{");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public void createEntities(List<Entity> entities){");
    _builder.newLine();
    {
      EList<Entity> _entity = entities.getEntity();
      for(final Entity entity : _entity) {
        _builder.append("\t\t");
        _builder.append("Entity ");
        String _lowerCase = entity.getName().toLowerCase();
        _builder.append(_lowerCase, "\t\t");
        _builder.append(" = new Entity();");
        _builder.newLineIfNotEmpty();
        _builder.append("\t\t");
        String _lowerCase_1 = entity.getName().toLowerCase();
        _builder.append(_lowerCase_1, "\t\t");
        _builder.append(".setName(\"");
        String _name = entity.getName();
        _builder.append(_name, "\t\t");
        _builder.append("\");");
        _builder.newLineIfNotEmpty();
        _builder.append("\t\t");
        String _lowerCase_2 = entity.getName().toLowerCase();
        _builder.append(_lowerCase_2, "\t\t");
        _builder.append(".setType(\"");
        String _name_1 = entity.getEType().getType().getName();
        _builder.append(_name_1, "\t\t");
        _builder.append("\");");
        _builder.newLineIfNotEmpty();
        {
          EList<Move> _move = entity.getEMoves().getMove();
          for(final Move move : _move) {
            _builder.append("\t\t");
            String _lowerCase_3 = entity.getName().toLowerCase();
            _builder.append(_lowerCase_3, "\t\t");
            _builder.append(".addMoveData(Move.getInstance().getMove(\"");
            String _name_2 = move.getName();
            _builder.append(_name_2, "\t\t");
            _builder.append("\"));");
            _builder.newLineIfNotEmpty();
          }
        }
        {
          EList<AltAttribute> _att = entity.getAtt();
          for(final AltAttribute att : _att) {
            {
              Number _numberFromAtomicDab = this.getNumberFromAtomicDab(att.getAv().getAn());
              if ((_numberFromAtomicDab instanceof Number)) {
                _builder.append("\t\t");
                String _lowerCase_4 = entity.getName().toLowerCase();
                _builder.append(_lowerCase_4, "\t\t");
                _builder.append(".addAttribute(new AttributeData(\"");
                String _name_3 = att.getAttribute().getName();
                _builder.append(_name_3, "\t\t");
                _builder.append("\", ");
                Number _numberFromAtomicDab_1 = this.getNumberFromAtomicDab(att.getAv().getAn());
                _builder.append(_numberFromAtomicDab_1, "\t\t");
                _builder.append("));");
                _builder.newLineIfNotEmpty();
              }
            }
          }
        }
        _builder.append("\t\t");
        _builder.append("entities.add(");
        String _lowerCase_5 = entity.getName().toLowerCase();
        _builder.append(_lowerCase_5, "\t\t");
        _builder.append(");");
        _builder.newLineIfNotEmpty();
      }
    }
    _builder.append("\t\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    return _builder;
  }
  
  public CharSequence generateGamePOG(final SystemRPG systemRPG) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("import java.util.*;");
    _builder.newLine();
    _builder.append("import java.awt.event.*;");
    _builder.newLine();
    _builder.newLine();
    _builder.append("public class Game implements KeyListener{");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("private Type type;");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("private List<Attribute> attributes;");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("private Attribute attribute;");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("private boolean gameFinished;");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("private List<Entity> eList; ");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("private List<Entity> battleEntities;");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("private Team team;");
    _builder.newLine();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("private String currentLocation;");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("private String currentTeam;");
    _builder.newLine();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("public Game(){");
    _builder.newLine();
    _builder.append("      ");
    _builder.append("eList = new ArrayList<>();");
    _builder.newLine();
    _builder.append("      ");
    _builder.append("attributes = new ArrayList<>();");
    _builder.newLine();
    _builder.append("      ");
    _builder.append("team = new Team();");
    _builder.newLine();
    _builder.append("      ");
    _builder.append("battleEntities = new ArrayList<>();");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("public boolean isGameFinished(){");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("return gameFinished;");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("public void toggleGameFinished(){");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("gameFinished = !gameFinished;");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("public void addTypes(){");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("type = Type.getInstance();");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("for(TypeEnum typeName : TypeEnum.values()){");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("type.addType(typeName.toString());");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("System.out.println(type.getTypes());");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("type = null;");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("public void addMoves(){");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("Move moves = Move.getInstance();");
    _builder.newLine();
    _builder.newLine();
    _builder.append("        ");
    _builder.append("for(MoveEnum mE: MoveEnum.values()){");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("MoveData tempMoveData = new MoveData();");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("tempMoveData.setMoveName(mE.toString());");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("tempMoveData.setType(mE.getType());");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("tempMoveData.addAttribute(AttributeData.createAttributeWithStringAndDefaultValues(\"power\"));");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("tempMoveData.addAttribute(AttributeData.createAttributeDataWithInt(\"pp\", 25));");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("moves.addMove(tempMoveData);");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("moves = null;");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("public Move getMove(){");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("return Move.getInstance();");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("public void addAttributes(){");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("attribute = Attribute.getInstance();");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("for (AttributeEnum e : AttributeEnum.values()){");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("attribute.addAttribute(AttributeData.createAttributeWithStringAndDefaultValues(e.toString()));");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("System.out.println(attribute.getAttributes());");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("public void addTeam() {");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("Entity zyndaquil = new Entity();");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("Entity zotodile = new Entity();");
    _builder.newLine();
    _builder.newLine();
    _builder.append("        ");
    _builder.append("zyndaquil.setName(\"zyndaquil\");");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("zyndaquil.setType(\"fire\");");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("zyndaquil.addMoveData(Move.getInstance().getMove(\"Ember\"));");
    _builder.newLine();
    _builder.newLine();
    _builder.newLine();
    _builder.append("        ");
    _builder.append("zotodile.setName(\"zotodile\");");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("zotodile.setType(\"water\");");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("zotodile.addMoveData(Move.getInstance().getMove(\"Water_gun\"));");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("zotodile.addMoveData(Move.getInstance().getMove(\"Razor_leaf\"));");
    _builder.newLine();
    _builder.newLine();
    _builder.newLine();
    _builder.append("        ");
    _builder.append("getAttributes().forEach(element -> zyndaquil.addAttribute(element));");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("getAttributes().forEach(element -> zotodile.addAttribute(element));");
    _builder.newLine();
    _builder.newLine();
    _builder.newLine();
    _builder.append("        ");
    _builder.append("team.addTeamMember(\"Zilver\", zyndaquil);");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("team.addTeamMember(\"Zilver\", zotodile);");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("team.addTeamMember(\"Rival\", zotodile);");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("team.addTeamMember(\"Rival\", zyndaquil);");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("team.addTeamMember(\"Red\", zotodile);");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("team.addTeamMember(\"Red\", zotodile);");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("public void addLocation(){");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("Location tempLoc = Location.getInstance();");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("tempLoc.addLocation(\"Johto\");");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("tempLoc.addTeamToLocation(\"Johto\", \"Rival\");");
    _builder.newLine();
    _builder.newLine();
    _builder.append("        ");
    _builder.append("tempLoc.addLocation(\"Kanto\");");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("tempLoc.addTeamToLocation(\"Kanto\", \"Red\");");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("public Location getLocation(){");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("return Location.getInstance();");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("public List<String> getTypes(){");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("Type tempType = Type.getInstance();");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("List<String> aString = new ArrayList<>();");
    _builder.newLine();
    _builder.newLine();
    _builder.append("        ");
    _builder.append("aString.addAll(tempType.getTypes());");
    _builder.newLine();
    _builder.newLine();
    _builder.append("        ");
    _builder.append("tempType = null;");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("return aString;");
    _builder.newLine();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("public List<AttributeData> getAttributes(){");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("Attribute tempAttribute = Attribute.getInstance();");
    _builder.newLine();
    _builder.newLine();
    _builder.append("        ");
    _builder.append("List<AttributeData> aAttribute = new ArrayList<>();");
    _builder.newLine();
    _builder.newLine();
    _builder.append("        ");
    _builder.append("aAttribute.addAll(tempAttribute.getAttributes());");
    _builder.newLine();
    _builder.newLine();
    _builder.append("        ");
    _builder.append("tempAttribute = null;");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("return aAttribute;");
    _builder.newLine();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("public void addEntity(){");
    _builder.newLine();
    _builder.append("      ");
    _builder.append("String[] types = {\"fire\", \"water\", \"grass\"};");
    _builder.newLine();
    _builder.append("      ");
    _builder.append("int index = 0;");
    _builder.newLine();
    _builder.append("      ");
    _builder.append("for (EntityEnum ee : EntityEnum.values() ) {");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("Entity e = new Entity();");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("e.setName(ee.toString());");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("e.setType(types[index]);");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("Attribute.getInstance().getAttributes().forEach(element -> e.addAttribute(element));");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("Move.getInstance().getMoves().forEach(element -> e.addMoveData(element)); ");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("eList.add(e);");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("if(index<2){");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("index++;");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("} else {");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("index = 0;");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("      ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("public List<Entity> getEList(){");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("return eList;");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("public List<Entity> getBattleEntities(){");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("return this.battleEntities;");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("/**");
    _builder.newLine();
    _builder.append("     ");
    _builder.append("* @return the team");
    _builder.newLine();
    _builder.append("     ");
    _builder.append("*/");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("public Team getTeam() {");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("return team;");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("public String getCurrentLocation(){");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("return this.currentLocation;");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("public void setCurrentLocation(String currentLocation) {");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("this.currentLocation = currentLocation;");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("public String getCurrentTeam(){");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("return this.currentTeam;");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("public void setCurrentTeam(String currentTeam) {");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("this.currentTeam = currentTeam;");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("@Override");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("public void keyPressed(KeyEvent e){");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("if (e.getKeyChar() == \'x\') {");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("toggleGameFinished();");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("@Override");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("public void keyReleased(KeyEvent e){");
    _builder.newLine();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("@Override");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("public void keyTyped(KeyEvent e){");
    _builder.newLine();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    return _builder;
  }
  
  public CharSequence generateKillable(final Death death) {
    return null;
  }
  
  public CharSequence re(final Require req) {
    return this.logic(req.getLog());
  }
  
  public CharSequence new_re(final Require req, final boolean effect) {
    return this.new_logic(req.getLog(), effect);
  }
  
  protected CharSequence _logic(final Or x) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("(");
    CharSequence _logic = this.logic(x.getLeft());
    _builder.append(_logic);
    _builder.append("||");
    CharSequence _logic_1 = this.logic(x.getRight());
    _builder.append(_logic_1);
    _builder.append(")");
    return _builder;
  }
  
  protected CharSequence _logic(final And x) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("(");
    CharSequence _logic = this.logic(x.getLeft());
    _builder.append(_logic);
    _builder.append("&&");
    CharSequence _logic_1 = this.logic(x.getRight());
    _builder.append(_logic_1);
    _builder.append(")");
    return _builder;
  }
  
  protected CharSequence _logic(final NumberComparing x) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("(");
    CharSequence _exp = this.exp(x.getLeft());
    _builder.append(_exp);
    String _generateComp = this.generateComp(x.getComp());
    _builder.append(_generateComp);
    CharSequence _exp_1 = this.exp(x.getRight());
    _builder.append(_exp_1);
    _builder.append(")");
    return _builder;
  }
  
  public String generateComp(final Comparator op) {
    String _switchResult = null;
    boolean _matched = false;
    if (op instanceof Eq) {
      _matched=true;
      _switchResult = "==";
    }
    if (!_matched) {
      if (op instanceof Smaller) {
        _matched=true;
        _switchResult = "<";
      }
    }
    if (!_matched) {
      if (op instanceof Bigger) {
        _matched=true;
        _switchResult = ">";
      }
    }
    if (!_matched) {
      if (op instanceof SmallerEq) {
        _matched=true;
        _switchResult = "<=";
      }
    }
    if (!_matched) {
      if (op instanceof BiggerEq) {
        _matched=true;
        _switchResult = ">=";
      }
    }
    if (!_matched) {
      if (op instanceof NEq) {
        _matched=true;
        _switchResult = "!=";
      }
    }
    return _switchResult;
  }
  
  protected CharSequence _exp(final Add x) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("(");
    CharSequence _exp = this.exp(x.getLeft());
    _builder.append(_exp);
    _builder.append("+");
    CharSequence _exp_1 = this.exp(x.getRight());
    _builder.append(_exp_1);
    _builder.append(")");
    return _builder;
  }
  
  protected CharSequence _exp(final Sub x) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("(");
    CharSequence _exp = this.exp(x.getLeft());
    _builder.append(_exp);
    _builder.append("-");
    CharSequence _exp_1 = this.exp(x.getRight());
    _builder.append(_exp_1);
    _builder.append(")");
    return _builder;
  }
  
  protected CharSequence _exp(final Mult x) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("(");
    CharSequence _exp = this.exp(x.getLeft());
    _builder.append(_exp);
    _builder.append("*");
    CharSequence _exp_1 = this.exp(x.getRight());
    _builder.append(_exp_1);
    _builder.append(")");
    return _builder;
  }
  
  protected CharSequence _exp(final Div x) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("(");
    CharSequence _exp = this.exp(x.getLeft());
    _builder.append(_exp);
    _builder.append("/");
    CharSequence _exp_1 = this.exp(x.getRight());
    _builder.append(_exp_1);
    _builder.append(")");
    return _builder;
  }
  
  protected CharSequence _exp(final IntNum x) {
    return Integer.toString(x.getValue());
  }
  
  protected CharSequence _exp(final FloatNum x) {
    String _string = Integer.toString(x.getI());
    String _plus = (_string + ".");
    String _string_1 = Integer.toString(x.getDecimal());
    return (_plus + _string_1);
  }
  
  protected CharSequence _exp(final NameAttribute x) {
    String _name = x.getAttribute().getName();
    return ("_" + _name);
  }
  
  protected CharSequence _new_logic(final Or x, final boolean effect) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("(");
    CharSequence _new_logic = this.new_logic(x.getLeft(), effect);
    _builder.append(_new_logic);
    _builder.append("||");
    CharSequence _new_logic_1 = this.new_logic(x.getRight(), effect);
    _builder.append(_new_logic_1);
    _builder.append(")");
    return _builder;
  }
  
  protected CharSequence _new_logic(final And x, final boolean effect) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("(");
    CharSequence _new_logic = this.new_logic(x.getLeft(), effect);
    _builder.append(_new_logic);
    _builder.append("&&");
    CharSequence _new_logic_1 = this.new_logic(x.getRight(), effect);
    _builder.append(_new_logic_1);
    _builder.append(")");
    return _builder;
  }
  
  protected CharSequence _new_logic(final NumberComparing x, final boolean effect) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("(");
    CharSequence _new_exp = this.new_exp(x.getLeft(), effect);
    _builder.append(_new_exp);
    String _generateComp = this.generateComp(x.getComp());
    _builder.append(_generateComp);
    CharSequence _new_exp_1 = this.new_exp(x.getRight(), effect);
    _builder.append(_new_exp_1);
    _builder.append(")");
    return _builder;
  }
  
  protected CharSequence _new_exp(final Add x, final boolean effect) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("(");
    CharSequence _new_exp = this.new_exp(x.getLeft(), effect);
    _builder.append(_new_exp);
    _builder.append("+");
    CharSequence _new_exp_1 = this.new_exp(x.getRight(), effect);
    _builder.append(_new_exp_1);
    _builder.append(")");
    return _builder;
  }
  
  protected CharSequence _new_exp(final Sub x, final boolean effect) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("(");
    CharSequence _new_exp = this.new_exp(x.getLeft(), effect);
    _builder.append(_new_exp);
    _builder.append("-");
    CharSequence _new_exp_1 = this.new_exp(x.getRight(), effect);
    _builder.append(_new_exp_1);
    _builder.append(")");
    return _builder;
  }
  
  protected CharSequence _new_exp(final Mult x, final boolean effect) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("(");
    CharSequence _new_exp = this.new_exp(x.getLeft(), effect);
    _builder.append(_new_exp);
    _builder.append("*");
    CharSequence _new_exp_1 = this.new_exp(x.getRight(), effect);
    _builder.append(_new_exp_1);
    _builder.append(")");
    return _builder;
  }
  
  protected CharSequence _new_exp(final Div x, final boolean effect) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("(");
    CharSequence _new_exp = this.new_exp(x.getLeft(), effect);
    _builder.append(_new_exp);
    _builder.append("/");
    CharSequence _new_exp_1 = this.new_exp(x.getRight(), effect);
    _builder.append(_new_exp_1);
    _builder.append(")");
    return _builder;
  }
  
  protected CharSequence _new_exp(final IntNum x, final boolean effect) {
    return Integer.toString(x.getValue());
  }
  
  protected CharSequence _new_exp(final FloatNum x, final boolean effect) {
    String _string = Integer.toString(x.getI());
    String _plus = (_string + ".");
    String _string_1 = Integer.toString(x.getDecimal());
    return (_plus + _string_1);
  }
  
  protected CharSequence _new_exp(final NameAttribute x, final boolean effect) {
    String _xifexpression = null;
    if ((!effect)) {
      String _xifexpression_1 = null;
      if (((x.getAttribute().getAVal().getLTypes() != null) && x.getAttribute().getAVal().getLTypes().equals("Integer"))) {
        String _name = x.getAttribute().getName();
        String _plus = (("eData.get(" + "\"") + _name);
        String _plus_1 = (_plus + "\"");
        _xifexpression_1 = (_plus_1 + ").intValue()");
      } else {
        String _xifexpression_2 = null;
        if (((x.getAttribute().getAVal().getLTypes() != null) && x.getAttribute().getAVal().getLTypes().equals("Float"))) {
          String _name_1 = x.getAttribute().getName();
          String _plus_2 = (("eData.get(" + "\"") + _name_1);
          String _plus_3 = (_plus_2 + "\"");
          _xifexpression_2 = (_plus_3 + ").floatValue()");
        } else {
          String _xifexpression_3 = null;
          if (((x.getAttribute().getAVal().getAn() != null) && (x.getAttribute().getAVal().getAn() instanceof IntNum))) {
            String _name_2 = x.getAttribute().getName();
            String _plus_4 = (("eData.get(" + "\"") + _name_2);
            String _plus_5 = (_plus_4 + "\"");
            _xifexpression_3 = (_plus_5 + ").intValue()");
          } else {
            String _xifexpression_4 = null;
            if (((x.getAttribute().getAVal().getAn() != null) && (x.getAttribute().getAVal().getAn() instanceof FloatNum))) {
              String _name_3 = x.getAttribute().getName();
              String _plus_6 = (("eData.get(" + "\"") + _name_3);
              String _plus_7 = (_plus_6 + "\"");
              _xifexpression_4 = (_plus_7 + ").floatValue()");
            } else {
              _xifexpression_4 = "Shit son";
            }
            _xifexpression_3 = _xifexpression_4;
          }
          _xifexpression_2 = _xifexpression_3;
        }
        _xifexpression_1 = _xifexpression_2;
      }
      _xifexpression = _xifexpression_1;
    } else {
      String _xifexpression_5 = null;
      if (((x.getAttribute().getAVal().getLTypes() != null) && x.getAttribute().getAVal().getLTypes().equals("Integer"))) {
        _xifexpression_5 = "eData.get(moveEffect.getList(i)).intValue()";
      } else {
        String _xifexpression_6 = null;
        if (((x.getAttribute().getAVal().getLTypes() != null) && x.getAttribute().getAVal().getLTypes().equals("Float"))) {
          String _name_4 = x.getAttribute().getName();
          String _plus_8 = (("eData.get(" + "\"") + _name_4);
          String _plus_9 = (_plus_8 + "\"");
          _xifexpression_6 = (_plus_9 + ").floatValue()");
        } else {
          String _xifexpression_7 = null;
          if (((x.getAttribute().getAVal().getAn() != null) && (x.getAttribute().getAVal().getAn() instanceof IntNum))) {
            String _name_5 = x.getAttribute().getName();
            String _plus_10 = (("eData.get(" + "\"") + _name_5);
            String _plus_11 = (_plus_10 + "\"");
            _xifexpression_7 = (_plus_11 + ").intValue()");
          } else {
            String _xifexpression_8 = null;
            if (((x.getAttribute().getAVal().getAn() != null) && (x.getAttribute().getAVal().getAn() instanceof FloatNum))) {
              String _name_6 = x.getAttribute().getName();
              String _plus_12 = (("eData.get(" + "\"") + _name_6);
              String _plus_13 = (_plus_12 + "\"");
              _xifexpression_8 = (_plus_13 + ").floatValue()");
            } else {
              _xifexpression_8 = "Shit son";
            }
            _xifexpression_7 = _xifexpression_8;
          }
          _xifexpression_6 = _xifexpression_7;
        }
        _xifexpression_5 = _xifexpression_6;
      }
      _xifexpression = _xifexpression_5;
    }
    return _xifexpression;
  }
  
  protected Number _getNumberFromAtomicDab(final IntNum x) {
    return Integer.valueOf(x.getValue());
  }
  
  protected Number _getNumberFromAtomicDab(final FloatNum x) {
    Float _xblockexpression = null;
    {
      int _i = x.getI();
      String _plus = (Integer.valueOf(_i) + ".");
      int _decimal = x.getDecimal();
      final String floatstring = (_plus + Integer.valueOf(_decimal));
      _xblockexpression = Float.valueOf(floatstring);
    }
    return _xblockexpression;
  }
  
  public CharSequence generateLocation(final Locations locations) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("import java.util.*;");
    _builder.newLine();
    _builder.newLine();
    _builder.append("public class Location {");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("private List<String> locations;");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("private String currentLocation;");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("private String currentTeam;");
    _builder.newLine();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("private Map<String, String> teams;");
    _builder.newLine();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("private static Location location;    ");
    _builder.newLine();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("private Location(){");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("locations = new ArrayList<>();");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("teams = new HashMap<>();");
    _builder.newLine();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("public static Location getInstance(){");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("if(location == null){");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("location = new Location();");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("return location;");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("public String getCurrentLocation(){");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("return this.currentLocation;");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("public String getCurrentTeam(){");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("return this.currentTeam;");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("public Map<String, String> getTeams(){");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("return this.teams;");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("public List<String> getLocations(){");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("return this.locations;");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("public void setLocations(List<String> locations){");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("this.locations = locations;");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("public void setCurrentLocation(String currentLocation){");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("this.currentLocation = currentLocation;");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("public void addLocation(String location){");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("locations.add(location);");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("public void addTeamToLocation(String location, String team){");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("if(locations.contains(location)){");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("teams.put(location, team);");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    return _builder;
  }
  
  public void generateMoves(final IFileSystemAccess2 fsa, final Moves moves) {
    fsa.generateFile("Move.java", this.generateMove());
    fsa.generateFile("MoveEnum.java", this.generateMoveEnum(moves));
    fsa.generateFile("EntityState.java", this.generateEntityState());
    fsa.generateFile("MoveInit.java", this.generateMoveInit(moves));
    fsa.generateFile("MoveData.java", this.generateMoveData());
    fsa.generateFile("MoveEffectData.java", this.generateMoveEffectData());
    fsa.generateFile("BuffEffectData.java", this.generateBuffEffectData());
  }
  
  public CharSequence generateMove() {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("import java.util.*;");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.newLine();
    _builder.append("public class Move{\t\t\t");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t");
    _builder.append("private static Move move;");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("private List<MoveData> moves = new ArrayList<>();");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("private Move(){}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public static Move getInstance(){");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("if (move == null){");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("move = new Move();");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("return move;");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public void addMove(MoveData move){");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("moves.add(move);");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public MoveData getMove(String move){");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("MoveData mD = null;");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("for (MoveData moveData : moves) {");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("if(moveData.getMoveName().equals(move)){");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("mD = moveData;");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("return mD;");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public List<MoveData> getMoves(){");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("return moves;");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    return _builder;
  }
  
  public CharSequence generateMoveData() {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("import java.util.*;");
    _builder.newLine();
    _builder.newLine();
    _builder.append("public class MoveData{");
    _builder.newLine();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("private String moveName;");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("private String type;");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("private List<AttributeData> moveAttributes;");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("private List<EffectMove> moveEffects;");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("private List<EffectBuff> buffEffects;\t\t    ");
    _builder.newLine();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("public MoveData(){");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("this.moveAttributes = new ArrayList<>();");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("public MoveData(String moveName, String type, List<AttributeData> moveAttributes, List<EffectMove> moveEffects, List<EffectBuff> buffEffects) {");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("this.moveName = moveName;");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("this.type = type;");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("this.moveAttributes = moveAttributes;");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("this.moveEffects = moveEffects;");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("this.buffEffects = buffEffects;\t\t        ");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("public String getMoveName(){");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("return this.moveName;");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("public void setMoveName(String moveName) {");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("this.moveName = moveName;");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("public String getType() {");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("return this.type;");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("public void setType(String type) {");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("this.type = type;");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("public List<AttributeData> getMoveAttributes() {");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("return this.moveAttributes;");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("public void setMoveAttributes(List<AttributeData> moveAttributes) {");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("this.moveAttributes = moveAttributes;");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("public void addAttribute(AttributeData attribute){");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("moveAttributes.add(attribute);");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("    ");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public List<EffectBuff> getBuffEffects(){");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("return this.buffEffects;");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public List<EffectMove> getMoveEffects(){");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("return this.moveEffects;");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public void addMoveEffect(EffectMove moveEffect){");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("this.moveEffects.add(moveEffect);");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public void addBuffEffect(EffectBuff buffEffect){");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("this.buffEffects.add(buffEffect);");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}\t\t    ");
    _builder.newLine();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("@Override");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("public boolean equals(Object o) {");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("if (o == this)");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("return true;");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("if (!(o instanceof MoveData)) {");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("return false;");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("MoveData moveData = (MoveData) o;");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("return Objects.equals(moveName, moveData.moveName) && Objects.equals(type, moveData.type) && Objects.equals(moveAttributes, moveData.moveAttributes);");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("@Override");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("public int hashCode() {");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("return Objects.hash(moveName, type, moveAttributes);");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("@Override");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("public String toString() {");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("return getMoveName();");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    return _builder;
  }
  
  public CharSequence generateMoveEnum(final Moves moves) {
    CharSequence _xblockexpression = null;
    {
      String moveEnums = "";
      int i = 1;
      EList<Move> _move = moves.getMove();
      for (final Move move : _move) {
        {
          String name = move.getName();
          String type = move.getEType().getType().getName();
          String _moveEnums = moveEnums;
          moveEnums = (_moveEnums + name);
          String _moveEnums_1 = moveEnums;
          moveEnums = (_moveEnums_1 + (((("(" + "\"") + type) + "\"") + ")"));
          int _size = moves.getMove().size();
          boolean _lessThan = (i < _size);
          if (_lessThan) {
            String _moveEnums_2 = moveEnums;
            moveEnums = (_moveEnums_2 + ", ");
            i++;
          } else {
            String _moveEnums_3 = moveEnums;
            moveEnums = (_moveEnums_3 + ";");
          }
        }
      }
      StringConcatenation _builder = new StringConcatenation();
      _builder.append("enum MoveEnum{");
      _builder.newLine();
      _builder.append("    ");
      _builder.append(moveEnums, "    ");
      _builder.newLineIfNotEmpty();
      _builder.append("    ");
      _builder.append("private String type;");
      _builder.newLine();
      _builder.newLine();
      _builder.append("    ");
      _builder.append("private MoveEnum(String type){");
      _builder.newLine();
      _builder.append("        ");
      _builder.append("this.type = type;");
      _builder.newLine();
      _builder.append("    ");
      _builder.append("}");
      _builder.newLine();
      _builder.newLine();
      _builder.append("    ");
      _builder.append("public String getType(){");
      _builder.newLine();
      _builder.append("        ");
      _builder.append("return this.type;");
      _builder.newLine();
      _builder.append("    ");
      _builder.append("}");
      _builder.newLine();
      _builder.append("}");
      _builder.newLine();
      _xblockexpression = _builder;
    }
    return _xblockexpression;
  }
  
  public CharSequence generateMoveInit(final Moves moves) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("import java.util.*;");
    _builder.newLine();
    _builder.newLine();
    _builder.append("public class MoveInit{");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public void addMoves(Move moves){ //private Move moves = Move.getInstance()");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("MoveData tempMoveData;");
    _builder.newLine();
    {
      EList<Move> _move = moves.getMove();
      for(final Move move : _move) {
        _builder.append("\t\t");
        _builder.append("tempMoveData = new MoveData();");
        _builder.newLine();
        _builder.append("\t\t");
        _builder.append("tempMoveData.setMoveName(\"");
        String _name = move.getName();
        _builder.append(_name, "\t\t");
        _builder.append("\");");
        _builder.newLineIfNotEmpty();
        _builder.append("\t\t");
        _builder.append("tempMoveData.setType(\"");
        String _name_1 = move.getEType().getType().getName();
        _builder.append(_name_1, "\t\t");
        _builder.append("\");");
        _builder.newLineIfNotEmpty();
        {
          EList<AltAttribute> _att = move.getAtt();
          for(final AltAttribute att : _att) {
            {
              Number _numberFromAtomicDab = this.getNumberFromAtomicDab(att.getAv().getAn());
              if ((_numberFromAtomicDab instanceof Number)) {
                _builder.append("\t\t");
                _builder.append("tempMoveData.addAttribute(new AttributeData(\"");
                String _name_2 = att.getAttribute().getName();
                _builder.append(_name_2, "\t\t");
                _builder.append("\", ");
                Number _numberFromAtomicDab_1 = this.getNumberFromAtomicDab(att.getAv().getAn());
                _builder.append(_numberFromAtomicDab_1, "\t\t");
                _builder.append("));");
                _builder.newLineIfNotEmpty();
              }
            }
          }
        }
        {
          EList<MEffect> _mEffect = move.getMEffect();
          for(final MEffect moveEffect : _mEffect) {
            {
              if ((moveEffect != null)) {
                _builder.append("\t\t");
                _builder.append("tempMoveData.addMoveEffect(new ");
                String _name_3 = moveEffect.getMoveEName().getName();
                _builder.append(_name_3, "\t\t");
                _builder.append("());");
                _builder.newLineIfNotEmpty();
              }
            }
          }
        }
        {
          EList<BEffect> _bEffect = move.getBEffect();
          for(final BEffect buffEffect : _bEffect) {
            {
              if ((buffEffect != null)) {
                _builder.append("\t\t");
                _builder.append("tempMoveData.addBuffEffect(new ");
                String _name_4 = buffEffect.getBuffEName().getName();
                _builder.append(_name_4, "\t\t");
                _builder.append("());");
                _builder.newLineIfNotEmpty();
              }
            }
          }
        }
        _builder.append("\t\t");
        _builder.append("moves.addMove(tempMoveData);");
        _builder.newLine();
      }
    }
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    return _builder;
  }
  
  public CharSequence generateMoveEffectData() {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("public class MoveEffectData {");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("private String statement;");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("private String attributeName;");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("private String changeStatement;");
    _builder.newLine();
    _builder.newLine();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("public MoveEffectData(String statement, String attributeName, String changeStatement){");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("this.statement = statement;");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("this.attributeName = attributeName;");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("this.changeStatement = changeStatement;");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("public String getStatement() {");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("return this.statement;");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("public String getAttributeName() {");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("return this.attributeName;");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("public String getChangeStatement() {");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("return this.changeStatement;");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    return _builder;
  }
  
  public CharSequence generateBuffEffectData() {
    StringConcatenation _builder = new StringConcatenation();
    _builder.newLine();
    _builder.append("public class BuffEffectData {");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("private String statement;");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("private String attributeName;");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("private String changeStatement;");
    _builder.newLine();
    _builder.newLine();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("public BuffEffectData(String statement, String attributeName, String changeStatement){");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("this.statement = statement;");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("this.attributeName = attributeName;");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("this.changeStatement = changeStatement;");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("public String getStatement() {");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("return this.statement;");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("public String getAttributeName() {");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("return this.attributeName;");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("public String getChangeStatement() {");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("return this.changeStatement;");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    return _builder;
  }
  
  public void generateTeams(final IFileSystemAccess2 fsa, final Teams teams) {
    fsa.generateFile("Team.java", this.generateTeam());
    fsa.generateFile("TeamInit.java", this.generateTeamInit(teams));
  }
  
  public String addTeamMemberString(final Team team) {
    String _xblockexpression = null;
    {
      String _name = team.getName();
      String _plus = (("team.addTeamMember(" + "\"") + _name);
      String _plus_1 = (_plus + "\"");
      String createTeamString = (_plus_1 + ", ");
      int i = 1;
      EList<Entity> _entity = team.getMembers().getEntity();
      for (final Entity e : _entity) {
        {
          String _createTeamString = createTeamString;
          String _name_1 = e.getName();
          String _plus_2 = (("findEntityByName(" + "\"") + _name_1);
          String _plus_3 = (_plus_2 + "\"");
          String _plus_4 = (_plus_3 + ", entities");
          String _plus_5 = (_plus_4 + ")");
          createTeamString = (_createTeamString + _plus_5);
          int _size = team.getMembers().getEntity().size();
          boolean _greaterThan = (_size > i);
          if (_greaterThan) {
            i++;
            String _createTeamString_1 = createTeamString;
            createTeamString = (_createTeamString_1 + ", ");
          } else {
            String _createTeamString_2 = createTeamString;
            createTeamString = (_createTeamString_2 + ");");
          }
        }
      }
      _xblockexpression = createTeamString;
    }
    return _xblockexpression;
  }
  
  public CharSequence generateTeam() {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("import java.util.*;");
    _builder.newLine();
    _builder.newLine();
    _builder.append("public class Team {");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("private Map<String, List<Entity>> teams;");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("private List<String> teamNames;");
    _builder.newLine();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("public Team() {");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("teams = new HashMap<>();");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("teamNames = new ArrayList<>(); ");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("public List<Entity> getTeamByName(String name) {");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("if (!teams.containsKey(name)) {");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("return null;");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("return teams.get(name);");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("public void addTeamMember(String team, Entity... entity) {");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("if (!teams.containsKey(team)) {");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("teams.put(team, entityAdder(entity));");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("teamNames.add(team);");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("} else {");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("teams.get(team).addAll(entityAdder(entity));");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("public List<Entity> entityAdder(Entity... entity) {");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("List<Entity> eList = new ArrayList<>();");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("for (Entity entity2 : entity) {");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("Entity tempEntity = new Entity(entity2);");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("eList.add(tempEntity);");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("return eList;");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("public Map<String, List<Entity>> getTeams(){");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("return teams;");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("public List<Entity> getPlayerTeam(){");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("return teams.get(teamNames.get(0));");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("public boolean checkPlayerEntities(){");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("int playerTeamSize = getPlayerTeam().size();");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("int deadEntities = 0;");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("for (Entity entity : getPlayerTeam()) {");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("if(entity.getEntityState() == EntityState.DEAD) break;");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("deadEntities++;");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("if(deadEntities == playerTeamSize) return true;");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("return false;");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("public int playerEntitiesAlive(){");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("int alive = 0;");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("for (Entity entity : getPlayerTeam()) {");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("if(entity.getEntityState() != EntityState.DEAD) alive++;");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("return alive;");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    return _builder;
  }
  
  public CharSequence generateTeamInit(final Teams teams) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("import java.util.*;");
    _builder.newLine();
    _builder.newLine();
    _builder.append("public class TeamInit{");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public void createTeams(Team team, List<Entity> entities){");
    _builder.newLine();
    {
      EList<Team> _team = teams.getTeam();
      for(final Team team : _team) {
        _builder.append("\t\t");
        String _addTeamMemberString = this.addTeamMemberString(team);
        _builder.append(_addTeamMemberString, "\t\t");
        _builder.newLineIfNotEmpty();
      }
    }
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("private Entity findEntityByName(String name, List<Entity> entities){");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("for(Entity e : entities){");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("if(e.toString().equals(name)){");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("return e;");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("return null;");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.newLine();
    _builder.newLine();
    _builder.newLine();
    return _builder;
  }
  
  public void generateTypes(final IFileSystemAccess2 fsa, final Relations relations) {
    fsa.generateFile("Type.java", this.generateType());
    fsa.generateFile("TypeEnum.java", this.generateTypeEnum(relations));
    fsa.generateFile("TypeRelation.java", this.generateTypeRelation());
    fsa.generateFile("TypeRelationsInit.java", this.generateTypeInit(relations));
  }
  
  public CharSequence generateTypeRelation() {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("import java.util.ArrayList;");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("public class TypeRelation {");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.newLine();
    _builder.append("\t\t    ");
    _builder.append("private ArrayList<String> weakAgainst;");
    _builder.newLine();
    _builder.append("\t\t    ");
    _builder.append("private ArrayList<String> strongAgainst;");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.newLine();
    _builder.append("\t\t    ");
    _builder.append("public TypeRelation(){");
    _builder.newLine();
    _builder.append("\t\t        ");
    _builder.append("weakAgainst = new ArrayList<>();");
    _builder.newLine();
    _builder.append("\t\t        ");
    _builder.append("strongAgainst = new ArrayList<>();");
    _builder.newLine();
    _builder.append("\t\t    ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.newLine();
    _builder.append("\t\t    ");
    _builder.append("public void addStrongAgainst(String strong){");
    _builder.newLine();
    _builder.append("\t\t        ");
    _builder.append("strongAgainst.add(strong);");
    _builder.newLine();
    _builder.append("\t\t    ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.newLine();
    _builder.append("\t\t    ");
    _builder.append("public void addWeakAgainst(String weak){");
    _builder.newLine();
    _builder.append("\t\t        ");
    _builder.append("strongAgainst.add(weak);");
    _builder.newLine();
    _builder.append("\t\t    ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.newLine();
    _builder.append("\t\t    ");
    _builder.append("public ArrayList<String> getWeakAgainst(){");
    _builder.newLine();
    _builder.append("\t\t        ");
    _builder.append("return weakAgainst;");
    _builder.newLine();
    _builder.append("\t\t    ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.newLine();
    _builder.append("\t\t    ");
    _builder.append("public ArrayList<String> getStrongAgainst(){");
    _builder.newLine();
    _builder.append("\t\t        ");
    _builder.append("return strongAgainst;");
    _builder.newLine();
    _builder.append("\t\t    ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("}");
    _builder.newLine();
    return _builder;
  }
  
  public CharSequence generateTypeInit(final Relations relations) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("import java.util.*;");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.newLine();
    _builder.append("public class TypeRelationsInit{");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public void createRelations(Type type){");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("TypeRelation tr;");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("String currentType;");
    _builder.newLine();
    {
      EList<Type> _type = relations.getType();
      for(final Type t : _type) {
        _builder.append("\t\t");
        _builder.append("tr = new TypeRelation();");
        _builder.newLine();
        _builder.append("\t\t");
        _builder.append("currentType = \"");
        String _name = t.getName();
        _builder.append(_name, "\t\t");
        _builder.append("\";");
        _builder.newLineIfNotEmpty();
        _builder.append("\t\t");
        _builder.append("tr.addStrongAgainst(\"");
        String _name_1 = t.getTExpression().getStrong().getName();
        _builder.append(_name_1, "\t\t");
        _builder.append("\");");
        _builder.newLineIfNotEmpty();
        {
          EList<Type> _strong2 = t.getTExpression().getStrong2();
          for(final Type better : _strong2) {
            _builder.append("\t\t");
            _builder.append("tr.addStrongAgainst(\"");
            String _name_2 = better.getName();
            _builder.append(_name_2, "\t\t");
            _builder.append("\");");
            _builder.newLineIfNotEmpty();
          }
        }
        _builder.append("\t\t");
        _builder.append("tr.addWeakAgainst(\"");
        String _name_3 = t.getTExpression().getWeak().getName();
        _builder.append(_name_3, "\t\t");
        _builder.append("\");");
        _builder.newLineIfNotEmpty();
        {
          EList<Type> _weak2 = t.getTExpression().getWeak2();
          for(final Type worse : _weak2) {
            _builder.append("\t\t");
            _builder.append("tr.addWeakAgainst(\"");
            String _name_4 = worse.getName();
            _builder.append(_name_4, "\t\t");
            _builder.append("\");");
            _builder.newLineIfNotEmpty();
          }
        }
        _builder.append("\t\t");
        _builder.append("type.addTypeRelation(currentType, tr);");
        _builder.newLine();
      }
    }
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    return _builder;
  }
  
  public CharSequence generateType() {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("import java.util.*;");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.newLine();
    _builder.append("public class Type{");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("private List<String> types = new ArrayList<>();");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("private HashMap<String, TypeRelation> typeRelations = new HashMap<>();");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t");
    _builder.append("private static Type type;");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("private Type(){}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public static Type getInstance(){");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("if(type == null){");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("type = new Type();");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("return type;");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t\t\t\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public void addType(String type){");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("types.add(type);");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public List<String> getTypes(){");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("return types;");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public void addTypeRelation(String typeString, TypeRelation tr){");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("typeRelations.put(typeString, tr);");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public HashMap<String, TypeRelation> getTypeRelations(){");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("return typeRelations;");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    return _builder;
  }
  
  public CharSequence generateTypeEnum(final Relations relations) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("public enum TypeEnum{");
    _builder.newLine();
    {
      EList<Type> _type = relations.getType();
      for(final Type type : _type) {
        String _name = type.getName();
        _builder.append(_name);
        _builder.append(",");
        _builder.newLineIfNotEmpty();
      }
    }
    _builder.append("}");
    _builder.newLine();
    return _builder;
  }
  
  public Object exp2(final Sum x, final List<Object> list) {
    if (x instanceof FloatNum) {
      return _exp2((FloatNum)x, list);
    } else if (x instanceof IntNum) {
      return _exp2((IntNum)x, list);
    } else if (x instanceof NameAttribute) {
      return _exp2((NameAttribute)x, list);
    } else if (x instanceof Div) {
      return _exp2((Div)x, list);
    } else if (x instanceof Mult) {
      return _exp2((Mult)x, list);
    } else if (x instanceof Add) {
      return _exp2((Add)x, list);
    } else if (x instanceof Sub) {
      return _exp2((Sub)x, list);
    } else {
      throw new IllegalArgumentException("Unhandled parameter types: " +
        Arrays.<Object>asList(x, list).toString());
    }
  }
  
  public CharSequence logic(final Proposition x) {
    if (x instanceof And) {
      return _logic((And)x);
    } else if (x instanceof NumberComparing) {
      return _logic((NumberComparing)x);
    } else if (x instanceof Or) {
      return _logic((Or)x);
    } else {
      throw new IllegalArgumentException("Unhandled parameter types: " +
        Arrays.<Object>asList(x).toString());
    }
  }
  
  public CharSequence exp(final Sum x) {
    if (x instanceof FloatNum) {
      return _exp((FloatNum)x);
    } else if (x instanceof IntNum) {
      return _exp((IntNum)x);
    } else if (x instanceof NameAttribute) {
      return _exp((NameAttribute)x);
    } else if (x instanceof Div) {
      return _exp((Div)x);
    } else if (x instanceof Mult) {
      return _exp((Mult)x);
    } else if (x instanceof Add) {
      return _exp((Add)x);
    } else if (x instanceof Sub) {
      return _exp((Sub)x);
    } else {
      throw new IllegalArgumentException("Unhandled parameter types: " +
        Arrays.<Object>asList(x).toString());
    }
  }
  
  public CharSequence new_logic(final Proposition x, final boolean effect) {
    if (x instanceof And) {
      return _new_logic((And)x, effect);
    } else if (x instanceof NumberComparing) {
      return _new_logic((NumberComparing)x, effect);
    } else if (x instanceof Or) {
      return _new_logic((Or)x, effect);
    } else {
      throw new IllegalArgumentException("Unhandled parameter types: " +
        Arrays.<Object>asList(x, effect).toString());
    }
  }
  
  public CharSequence new_exp(final Sum x, final boolean effect) {
    if (x instanceof FloatNum) {
      return _new_exp((FloatNum)x, effect);
    } else if (x instanceof IntNum) {
      return _new_exp((IntNum)x, effect);
    } else if (x instanceof NameAttribute) {
      return _new_exp((NameAttribute)x, effect);
    } else if (x instanceof Div) {
      return _new_exp((Div)x, effect);
    } else if (x instanceof Mult) {
      return _new_exp((Mult)x, effect);
    } else if (x instanceof Add) {
      return _new_exp((Add)x, effect);
    } else if (x instanceof Sub) {
      return _new_exp((Sub)x, effect);
    } else {
      throw new IllegalArgumentException("Unhandled parameter types: " +
        Arrays.<Object>asList(x, effect).toString());
    }
  }
  
  public Number getNumberFromAtomicDab(final AtomicNumber x) {
    if (x instanceof FloatNum) {
      return _getNumberFromAtomicDab((FloatNum)x);
    } else if (x instanceof IntNum) {
      return _getNumberFromAtomicDab((IntNum)x);
    } else {
      throw new IllegalArgumentException("Unhandled parameter types: " +
        Arrays.<Object>asList(x).toString());
    }
  }
}
