/**
 * generated by Xtext 2.21.0
 */
package mdsd.generator;

import com.google.common.collect.Iterators;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import mdsd.rPG.Add;
import mdsd.rPG.AltAttribute;
import mdsd.rPG.And;
import mdsd.rPG.AtomicNumber;
import mdsd.rPG.Attribute;
import mdsd.rPG.Attributes;
import mdsd.rPG.Bigger;
import mdsd.rPG.BiggerEq;
import mdsd.rPG.Carl;
import mdsd.rPG.Comparator;
import mdsd.rPG.Death;
import mdsd.rPG.Declaration;
import mdsd.rPG.Div;
import mdsd.rPG.Effect;
import mdsd.rPG.Entities;
import mdsd.rPG.Entity;
import mdsd.rPG.EntityAttributes;
import mdsd.rPG.Eq;
import mdsd.rPG.FloatNum;
import mdsd.rPG.IntNum;
import mdsd.rPG.Locations;
import mdsd.rPG.Move;
import mdsd.rPG.MoveAttributes;
import mdsd.rPG.Moves;
import mdsd.rPG.Mult;
import mdsd.rPG.NEq;
import mdsd.rPG.NameAttribute;
import mdsd.rPG.NumberComparing;
import mdsd.rPG.Or;
import mdsd.rPG.Proposition;
import mdsd.rPG.Relations;
import mdsd.rPG.Require;
import mdsd.rPG.Smaller;
import mdsd.rPG.SmallerEq;
import mdsd.rPG.Sub;
import mdsd.rPG.Sum;
import mdsd.rPG.SystemRPG;
import mdsd.rPG.Team;
import mdsd.rPG.Teams;
import mdsd.rPG.Type;
import org.eclipse.emf.common.util.EList;
import org.eclipse.emf.ecore.resource.Resource;
import org.eclipse.xtend2.lib.StringConcatenation;
import org.eclipse.xtext.generator.AbstractGenerator;
import org.eclipse.xtext.generator.IFileSystemAccess2;
import org.eclipse.xtext.generator.IGeneratorContext;

/**
 * Generates code from your model files on save.
 * 
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#code-generation
 */
@SuppressWarnings("all")
public class RPGGenerator extends AbstractGenerator {
  @Override
  public void doGenerate(final Resource resource, final IFileSystemAccess2 fsa, final IGeneratorContext context) {
    final SystemRPG mathLul = Iterators.<SystemRPG>filter(resource.getAllContents(), SystemRPG.class).next();
    this.god(mathLul, fsa);
  }
  
  public void god(final SystemRPG thing, final IFileSystemAccess2 fsa) {
    String gamefile = "";
    boolean locationbool = false;
    boolean relationbool = false;
    boolean movesbool = false;
    boolean entitiesbool = false;
    boolean teamsbool = false;
    boolean attributesbool = false;
    boolean deathbool = false;
    String _name = thing.getName();
    final String classFileName = (_name + ".java");
    EList<Declaration> _declarations = thing.getDeclarations();
    for (final Declaration d : _declarations) {
      boolean _matched = false;
      if (d instanceof Locations) {
        _matched=true;
        if ((!locationbool)) {
          fsa.generateFile("Location.java", this.generateLocation(((Locations)d)));
          locationbool = true;
        }
      }
      if (!_matched) {
        if (d instanceof Relations) {
          _matched=true;
          if ((!relationbool)) {
            fsa.generateFile("TypeEnum.java", this.generateTypeEnum(((Relations)d)));
            relationbool = true;
          }
        }
      }
      if (!_matched) {
        if (d instanceof Moves) {
          _matched=true;
          if ((!movesbool)) {
            String _gamefile = gamefile;
            CharSequence _generateMoves = this.generateMoves(fsa, ((Moves)d));
            gamefile = (_gamefile + _generateMoves);
            this.test(((Moves)d));
            movesbool = true;
          }
        }
      }
      if (!_matched) {
        if (d instanceof Entities) {
          _matched=true;
          if ((!entitiesbool)) {
            String _gamefile = gamefile;
            CharSequence _generateEntities = this.generateEntities(fsa, ((Entities)d));
            gamefile = (_gamefile + _generateEntities);
            entitiesbool = true;
          }
        }
      }
      if (!_matched) {
        if (d instanceof Teams) {
          _matched=true;
          if ((!teamsbool)) {
            String _gamefile = gamefile;
            CharSequence _generateTeams = this.generateTeams(fsa, ((Teams)d));
            gamefile = (_gamefile + _generateTeams);
            teamsbool = true;
          }
        }
      }
      if (!_matched) {
        if (d instanceof Attributes) {
          _matched=true;
          if ((!attributesbool)) {
            fsa.generateFile("Attribute.java", this.generateAttribute(((Attributes)d)));
            fsa.generateFile("AttributeEnum.java", this.generateAttributeEnum(((Attributes)d)));
            attributesbool = true;
          }
        }
      }
      if (!_matched) {
        if (d instanceof Death) {
          _matched=true;
          System.out.println("Do this");
        }
      }
      if (!_matched) {
        System.out.println("reported");
      }
    }
    fsa.generateFile(classFileName, gamefile);
  }
  
  public CharSequence generateAttribute(final Attributes attribute) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("import java.util.*;");
    _builder.newLine();
    _builder.newLine();
    _builder.append("public class Attribute {");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("private List<AttributeData> attributes = new ArrayList<>();");
    _builder.newLine();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("private static Attribute attribute;");
    _builder.newLine();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("private Attribute() {");
    _builder.newLine();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("public static Attribute getInstance() {");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("if (attribute == null) {");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("attribute = new Attribute();");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("return attribute;");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("public void addAttribute(AttributeData attribute) {");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("attributes.add(attribute);");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("    ");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("public List<AttributeData> getAttributes() {");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("return attributes;");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    return _builder;
  }
  
  public CharSequence generateMoveAttribute(final MoveAttributes attribute) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("import java.util.*;");
    _builder.newLine();
    _builder.newLine();
    _builder.append("public class MoveAttributes {");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("private List<AttributeData> moveattributes = new ArrayList<>();");
    _builder.newLine();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("private static MoveAttributes attribute;");
    _builder.newLine();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("private MoveAttributes() {");
    _builder.newLine();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("public static MoveAttributes getInstance() {");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("if (attribute == null) {");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("attribute = new MoveAttributes();");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("return attribute;");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("public void addAttribute(AttributeData attribute) {");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("moveattributes.add(attribute);");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("    ");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("public List<AttributeData> getAttributes() {");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("return moveattributes;");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    return _builder;
  }
  
  public CharSequence generateEntityAttribute(final EntityAttributes attribute) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("import java.util.*;");
    _builder.newLine();
    _builder.newLine();
    _builder.append("public class EntityAttributes {");
    _builder.newLine();
    _builder.append("private List<AttributeData> entityattributes = new ArrayList<>();");
    _builder.newLine();
    _builder.append("private static EntityAttributes attribute;");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t");
    _builder.append("private EntityAttributes() {");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("public static EntityAttributes getInstance() {");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("if (attribute == null) {");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("attribute = new EntityAttributes();");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("return attribute;");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("public void addAttribute(AttributeData attribute) {");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("entityattributes.add(attribute);");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("    ");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("public List<AttributeData> getAttributes() {");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("return entityattributes;");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    return _builder;
  }
  
  public CharSequence generateAttributeChangeEvent() {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("public class AttributeChangeEvent{");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("private AttributeData previousState;");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("private AttributeData targetState;");
    _builder.newLine();
    _builder.newLine();
    _builder.append("  ");
    _builder.append("public AttributeChangeEvent(AttributeData previousState, AttributeData targetState){");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("this.previousState = previousState;");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("this.targetState = targetState;");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("  ");
    _builder.append("public AttributeData getTargetState(){");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("return this.targetState;");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("  ");
    _builder.append("public AttributeData getPreviousState(){");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("return this.previousState;");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    return _builder;
  }
  
  public CharSequence generateAttributeData() {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("import java.util.*;");
    _builder.newLine();
    _builder.append("public class AttributeData {");
    _builder.newLine();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("private int intValue;");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("private float floatValue;");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("private String attributeName;");
    _builder.newLine();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("public AttributeData() {");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("public AttributeData(int intValue, float floatValue, String attributeName) {");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("this.intValue = intValue;");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("this.floatValue = floatValue;");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("this.attributeName = attributeName;");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("public static AttributeData createAttributeWithStringAndDefaultValues(String s){");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("AttributeData a = new AttributeData();");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("a.setAttributeName(s);");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("a.setFloatValue(45.0f);");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("a.setIntValue(45);");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("Attribute ab = Attribute.getInstance();");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("ab.addAttribute(a);");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("ab = null;");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("return a;");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("    ");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("public static AttributeData createAttributeDataWithFloat(String attributeData, float f) {");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("AttributeData a = new AttributeData();");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("a.setAttributeName(attributeData);");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("a.setFloatValue(f);");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("Attribute ab = Attribute.getInstance();");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("ab.addAttribute(a);");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("ab = null;");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("return a;");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("public static AttributeData createAttributeDataWithInt(String attributeData, int i) {");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("AttributeData a = new AttributeData();");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("a.setAttributeName(attributeData);");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("a.setIntValue(i);");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("Attribute ab = Attribute.getInstance();");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("ab.addAttribute(a);");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("ab = null;");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("return a;");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("public int getIntValue() {");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("return this.intValue;");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("public void setIntValue(int intValue) {");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("this.intValue = intValue;");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("public float getFloatValue() {");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("return this.floatValue;");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("public void setFloatValue(float floatValue) {");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("this.floatValue = floatValue;");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("public String getAttributeName() {");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("return this.attributeName;");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("public void setAttributeName(String attributeName) {");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("this.attributeName = attributeName;");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("@Override");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("public boolean equals(Object o) {");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("if (o == this)");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("return true;");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("if (!(o instanceof AttributeData)) {");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("return false;");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("AttributeData attributeData = (AttributeData) o;");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("return intValue == attributeData.intValue && floatValue == attributeData.floatValue && Objects.equals(attributeName, attributeData.attributeName);");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("@Override");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("public int hashCode() {");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("return Objects.hash(intValue, floatValue, attributeName);");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("@Override");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("public String toString() {");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("return \"{\" +");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("\" intValue=\'\" + getIntValue() + \"\'\" +");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("\", floatValue=\'\" + getFloatValue() + \"\'\" +");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("\", attributeName=\'\" + getAttributeName() + \"\'\" +");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("\"}\";");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    return _builder;
  }
  
  public CharSequence generateAttributeEnum(final Attributes attributes) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("public enum AttributeEnum{");
    _builder.newLine();
    {
      EList<Attribute> _attribute = attributes.getAttribute();
      for(final Attribute attribute : _attribute) {
        String _name = attribute.getName();
        _builder.append(_name);
        _builder.append(",");
        _builder.newLineIfNotEmpty();
      }
    }
    _builder.append("}");
    _builder.newLine();
    return _builder;
  }
  
  public CharSequence generateEffect(final Moves moves) {
    StringConcatenation _builder = new StringConcatenation();
    {
      EList<Move> _move = moves.getMove();
      for(final Move move : _move) {
        {
          EList<Effect> _effect = move.getEffect();
          for(final Effect effect : _effect) {
            Carl _carl = effect.getRule().getCarl();
            _builder.append(_carl);
            _builder.newLineIfNotEmpty();
            String _name = effect.getRule().getCarl().getAttribute().getAttribute().getName();
            _builder.append(_name);
            _builder.append("=");
            CharSequence _exp = this.exp(effect.getRule().getCarl().getChange());
            _builder.append(_exp);
            _builder.newLineIfNotEmpty();
          }
        }
      }
    }
    return _builder;
  }
  
  public void test(final Moves moves) {
    ArrayList<Object> list = new ArrayList<Object>();
    EList<Move> _move = moves.getMove();
    for (final Move move : _move) {
      EList<Effect> _effect = move.getEffect();
      for (final Effect effects : _effect) {
        this.exp2(effects.getRule().getCarl().getChange(), list);
      }
    }
    for (final Object o : list) {
      System.out.println(o.toString());
    }
  }
  
  protected Object _exp2(final Add x, final List<Object> list) {
    Object _xblockexpression = null;
    {
      this.exp2(x.getLeft(), list);
      list.add("+");
      _xblockexpression = this.exp2(x.getRight(), list);
    }
    return _xblockexpression;
  }
  
  protected Object _exp2(final Sub x, final List<Object> list) {
    Object _xblockexpression = null;
    {
      this.exp2(x.getLeft(), list);
      list.add("-");
      _xblockexpression = this.exp2(x.getRight(), list);
    }
    return _xblockexpression;
  }
  
  protected Object _exp2(final Mult x, final List<Object> list) {
    Object _xblockexpression = null;
    {
      this.exp2(x.getLeft(), list);
      list.add("*");
      _xblockexpression = this.exp2(x.getRight(), list);
    }
    return _xblockexpression;
  }
  
  protected Object _exp2(final Div x, final List<Object> list) {
    Object _xblockexpression = null;
    {
      this.exp2(x.getLeft(), list);
      list.add("/");
      _xblockexpression = this.exp2(x.getRight(), list);
    }
    return _xblockexpression;
  }
  
  protected Object _exp2(final IntNum x, final List<Object> list) {
    return Boolean.valueOf(list.add(Integer.valueOf(x.getValue())));
  }
  
  protected Object _exp2(final FloatNum x, final List<Object> list) {
    return Boolean.valueOf(list.add(Integer.valueOf(x.getDecimal())));
  }
  
  protected Object _exp2(final NameAttribute x, final List<Object> list) {
    return Boolean.valueOf(list.add(x.getAttribute().getAVal()));
  }
  
  public CharSequence generateEntities(final IFileSystemAccess2 fsa, final Entities entities) {
    CharSequence _xblockexpression = null;
    {
      fsa.generateFile("Entity.java", this.generateEntity());
      fsa.generateFile("EntityEnum.java", this.generateEntityEnum(entities));
      fsa.generateFile("EntityState.java", this.generateEntityState());
      StringConcatenation _builder = new StringConcatenation();
      _builder.append("private List<Entity> entities;");
      _builder.newLine();
      _builder.append("private List<Entity> battleEntities;");
      _builder.newLine();
      _builder.append("private Attribute attribute;");
      _builder.newLine();
      _builder.newLine();
      _builder.append("private void createEntities(){");
      _builder.newLine();
      {
        EList<Entity> _entity = entities.getEntity();
        for(final Entity entity : _entity) {
          _builder.append("\t");
          _builder.append("Entity ");
          String _lowerCase = entity.getName().toLowerCase();
          _builder.append(_lowerCase, "\t");
          _builder.append(" = new Entity();");
          _builder.newLineIfNotEmpty();
          _builder.append("\t");
          String _lowerCase_1 = entity.getName().toLowerCase();
          _builder.append(_lowerCase_1, "\t");
          _builder.append(".setName(\"");
          String _name = entity.getName();
          _builder.append(_name, "\t");
          _builder.append("\");");
          _builder.newLineIfNotEmpty();
          _builder.append("\t");
          String _lowerCase_2 = entity.getName().toLowerCase();
          _builder.append(_lowerCase_2, "\t");
          _builder.append(".setType(");
          String _name_1 = entity.getEType().getType().getName();
          _builder.append(_name_1, "\t");
          _builder.append(");");
          _builder.newLineIfNotEmpty();
          {
            EList<Move> _move = entity.getEMoves().getMove();
            for(final Move move : _move) {
              _builder.append("\t");
              String _lowerCase_3 = entity.getName().toLowerCase();
              _builder.append(_lowerCase_3, "\t");
              _builder.append(".addMoveData(Move.getInstance().getMove(\"");
              String _name_2 = move.getName();
              _builder.append(_name_2, "\t");
              _builder.append("\"));");
              _builder.newLineIfNotEmpty();
            }
          }
          {
            EList<AltAttribute> _att = entity.getAtt();
            for(final AltAttribute att : _att) {
              {
                Number _numberFromAtomicDab = this.getNumberFromAtomicDab(att.getAv().getAn());
                if ((_numberFromAtomicDab instanceof Integer)) {
                  _builder.append("\t");
                  String _lowerCase_4 = entity.getName().toLowerCase();
                  _builder.append(_lowerCase_4, "\t");
                  _builder.append(".addAttribute(AttributeData.createAttributeDataWithInt(\"");
                  String _name_3 = att.getAttribute().getName();
                  _builder.append(_name_3, "\t");
                  _builder.append("\", ");
                  Number _numberFromAtomicDab_1 = this.getNumberFromAtomicDab(att.getAv().getAn());
                  _builder.append(_numberFromAtomicDab_1, "\t");
                  _builder.append("));");
                  _builder.newLineIfNotEmpty();
                } else {
                  Number _numberFromAtomicDab_2 = this.getNumberFromAtomicDab(att.getAv().getAn());
                  if ((_numberFromAtomicDab_2 instanceof Float)) {
                    _builder.append("\t");
                    String _lowerCase_5 = entity.getName().toLowerCase();
                    _builder.append(_lowerCase_5, "\t");
                    _builder.append(".addAttribute(AttributeData.createAttributeDataWithFloat(\"");
                    String _name_4 = att.getAttribute().getName();
                    _builder.append(_name_4, "\t");
                    _builder.append("\", ");
                    Number _numberFromAtomicDab_3 = this.getNumberFromAtomicDab(att.getAv().getAn());
                    _builder.append(_numberFromAtomicDab_3, "\t");
                    _builder.append("));");
                    _builder.newLineIfNotEmpty();
                  }
                }
              }
            }
          }
          _builder.append("\t");
          _builder.append("entities.add(");
          String _lowerCase_6 = entity.getName().toLowerCase();
          _builder.append(_lowerCase_6, "\t");
          _builder.append(");");
          _builder.newLineIfNotEmpty();
        }
      }
      _builder.append("\t");
      _builder.newLine();
      _builder.append("}");
      _builder.newLine();
      _builder.newLine();
      _xblockexpression = _builder;
    }
    return _xblockexpression;
  }
  
  public CharSequence generateEntity() {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("import java.util.*;");
    _builder.newLine();
    _builder.append("import java.util.concurrent.*;");
    _builder.newLine();
    _builder.append("public class Entity{");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("private String name;");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("private String type;");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("private EntityState state;");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("private List<AttributeData> attribute;");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("private List<AttributeData> changingAttributes;");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("private List<MoveData> moves;");
    _builder.newLine();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("public Entity(){");
    _builder.newLine();
    _builder.append("      ");
    _builder.append("attribute = new ArrayList<>();");
    _builder.newLine();
    _builder.append("      ");
    _builder.append("moves = new ArrayList<>();");
    _builder.newLine();
    _builder.append("      ");
    _builder.append("changingAttributes = new CopyOnWriteArrayList<>();");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("public Entity(Entity e){");
    _builder.newLine();
    _builder.append("      ");
    _builder.append("this();");
    _builder.newLine();
    _builder.append("      ");
    _builder.append("this.name = e.getName();");
    _builder.newLine();
    _builder.append("      ");
    _builder.append("this.type = e.getType();");
    _builder.newLine();
    _builder.append("      ");
    _builder.append("this.state = e.getEntityState();");
    _builder.newLine();
    _builder.append("      ");
    _builder.append("if(!e.getAttributes().isEmpty())");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("this.attribute.addAll(e.getAttributes());");
    _builder.newLine();
    _builder.append("      ");
    _builder.append("if(!e.getChangingAttributes().isEmpty())");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("this.changingAttributes.addAll(e.getChangingAttributes());");
    _builder.newLine();
    _builder.append("      ");
    _builder.append("if(!e.getMoveData().isEmpty())");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("this.moves.addAll(e.getMoveData());");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("public String getName(){");
    _builder.newLine();
    _builder.append("      ");
    _builder.append("return this.name;");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("public void setName(String name){");
    _builder.newLine();
    _builder.append("      ");
    _builder.append("this.name = name;");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("public String getType(){");
    _builder.newLine();
    _builder.append("      ");
    _builder.append("return this.type;");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("public void setType(String type){");
    _builder.newLine();
    _builder.append("      ");
    _builder.append("this.type = type;");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("public List<AttributeData> getAttributes(){");
    _builder.newLine();
    _builder.append("      ");
    _builder.append("return attribute;");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("public List<AttributeData> getChangingAttributes(){");
    _builder.newLine();
    _builder.append("      ");
    _builder.append("return changingAttributes;");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("public EntityState getEntityState(){");
    _builder.newLine();
    _builder.append("      ");
    _builder.append("return state;");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("public void setEntityState(EntityState state){");
    _builder.newLine();
    _builder.append("      ");
    _builder.append("this.state = state;");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("public void addAttribute(AttributeData attribute){");
    _builder.newLine();
    _builder.append("      ");
    _builder.append("this.attribute.add(attribute);");
    _builder.newLine();
    _builder.append("      ");
    _builder.append("this.changingAttributes.add(attribute);");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("public List<MoveData> getMoveData(){");
    _builder.newLine();
    _builder.append("      ");
    _builder.append("return moves;");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("public List<String> getMoveNameList(){");
    _builder.newLine();
    _builder.append("      ");
    _builder.append("List<String> moveNames = new ArrayList<>();");
    _builder.newLine();
    _builder.append("      ");
    _builder.append("for (MoveData moveData : getMoveData()) {");
    _builder.newLine();
    _builder.append("          ");
    _builder.append("moveNames.add(moveData.getMoveName());");
    _builder.newLine();
    _builder.append("      ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("      ");
    _builder.append("return moveNames;");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("    ");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("public void addMoveData(MoveData moveData){");
    _builder.newLine();
    _builder.append("      ");
    _builder.append("moves.add(moveData);");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("public void requestChange(AttributeChangeEvent attribute){");
    _builder.newLine();
    _builder.append("      ");
    _builder.append("if(changingAttributes.contains(attribute.getPreviousState())){");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("changingAttributes.remove(attribute.getPreviousState());");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("changingAttributes.add(attribute.getTargetState());");
    _builder.newLine();
    _builder.append("      ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("public void die(){");
    _builder.newLine();
    _builder.append("      ");
    _builder.append("state = EntityState.DEAD;");
    _builder.newLine();
    _builder.append("      ");
    _builder.append("System.out.println(\"[\" + this.toString() + \"] \" +  \"Ufff I died\");");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("@Override");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("public String toString() {");
    _builder.newLine();
    _builder.append("      ");
    _builder.newLine();
    _builder.append("      ");
    _builder.append("return this.name;");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    return _builder;
  }
  
  public CharSequence generateEntityEnum(final Entities entities) {
    CharSequence _xblockexpression = null;
    {
      String entityEnum = "";
      int i = 1;
      EList<Entity> _entity = entities.getEntity();
      for (final Entity entity : _entity) {
        {
          String _entityEnum = entityEnum;
          String _name = entity.getName();
          entityEnum = (_entityEnum + _name);
          int _size = entities.getEntity().size();
          boolean _lessThan = (i < _size);
          if (_lessThan) {
            String _entityEnum_1 = entityEnum;
            entityEnum = (_entityEnum_1 + ", ");
            i++;
          } else {
            String _entityEnum_2 = entityEnum;
            entityEnum = (_entityEnum_2 + ";");
          }
        }
      }
      StringConcatenation _builder = new StringConcatenation();
      _builder.append("enum EntityEnum{");
      _builder.newLine();
      _builder.append("\t");
      _builder.append(entityEnum, "\t");
      _builder.newLineIfNotEmpty();
      _builder.append("}");
      _builder.newLine();
      _xblockexpression = _builder;
    }
    return _xblockexpression;
  }
  
  public CharSequence generateEntityState() {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("public enum EntityState {");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("DEAD, ALIVE");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    return _builder;
  }
  
  public CharSequence generateGamePOG(final SystemRPG systemRPG) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("import java.util.*;");
    _builder.newLine();
    _builder.append("import java.awt.event.*;");
    _builder.newLine();
    _builder.newLine();
    _builder.append("public class Game implements KeyListener{");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("private Type type;");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("private List<Attribute> attributes;");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("private Attribute attribute;");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("private boolean gameFinished;");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("private List<Entity> eList; ");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("private List<Entity> battleEntities;");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("private Team team;");
    _builder.newLine();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("private String currentLocation;");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("private String currentTeam;");
    _builder.newLine();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("public Game(){");
    _builder.newLine();
    _builder.append("      ");
    _builder.append("eList = new ArrayList<>();");
    _builder.newLine();
    _builder.append("      ");
    _builder.append("attributes = new ArrayList<>();");
    _builder.newLine();
    _builder.append("      ");
    _builder.append("team = new Team();");
    _builder.newLine();
    _builder.append("      ");
    _builder.append("battleEntities = new ArrayList<>();");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("public boolean isGameFinished(){");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("return gameFinished;");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("public void toggleGameFinished(){");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("gameFinished = !gameFinished;");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("public void addTypes(){");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("type = Type.getInstance();");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("for(TypeEnum typeName : TypeEnum.values()){");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("type.addType(typeName.toString());");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("System.out.println(type.getTypes());");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("type = null;");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("public void addMoves(){");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("Move moves = Move.getInstance();");
    _builder.newLine();
    _builder.newLine();
    _builder.append("        ");
    _builder.append("for(MoveEnum mE: MoveEnum.values()){");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("MoveData tempMoveData = new MoveData();");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("tempMoveData.setMoveName(mE.toString());");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("tempMoveData.setType(mE.getType());");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("tempMoveData.addAttribute(AttributeData.createAttributeWithStringAndDefaultValues(\"power\"));");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("tempMoveData.addAttribute(AttributeData.createAttributeDataWithInt(\"pp\", 25));");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("moves.addMove(tempMoveData);");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("moves = null;");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("public Move getMove(){");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("return Move.getInstance();");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("public void addAttributes(){");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("attribute = Attribute.getInstance();");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("for (AttributeEnum e : AttributeEnum.values()){");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("attribute.addAttribute(AttributeData.createAttributeWithStringAndDefaultValues(e.toString()));");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("System.out.println(attribute.getAttributes());");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("public void addTeam() {");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("Entity zyndaquil = new Entity();");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("Entity zotodile = new Entity();");
    _builder.newLine();
    _builder.newLine();
    _builder.append("        ");
    _builder.append("zyndaquil.setName(\"zyndaquil\");");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("zyndaquil.setType(\"fire\");");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("zyndaquil.addMoveData(Move.getInstance().getMove(\"Ember\"));");
    _builder.newLine();
    _builder.newLine();
    _builder.newLine();
    _builder.append("        ");
    _builder.append("zotodile.setName(\"zotodile\");");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("zotodile.setType(\"water\");");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("zotodile.addMoveData(Move.getInstance().getMove(\"Water_gun\"));");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("zotodile.addMoveData(Move.getInstance().getMove(\"Razor_leaf\"));");
    _builder.newLine();
    _builder.newLine();
    _builder.newLine();
    _builder.append("        ");
    _builder.append("getAttributes().forEach(element -> zyndaquil.addAttribute(element));");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("getAttributes().forEach(element -> zotodile.addAttribute(element));");
    _builder.newLine();
    _builder.newLine();
    _builder.newLine();
    _builder.append("        ");
    _builder.append("team.addTeamMember(\"Zilver\", zyndaquil);");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("team.addTeamMember(\"Zilver\", zotodile);");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("team.addTeamMember(\"Rival\", zotodile);");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("team.addTeamMember(\"Rival\", zyndaquil);");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("team.addTeamMember(\"Red\", zotodile);");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("team.addTeamMember(\"Red\", zotodile);");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("public void addLocation(){");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("Location tempLoc = Location.getInstance();");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("tempLoc.addLocation(\"Johto\");");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("tempLoc.addTeamToLocation(\"Johto\", \"Rival\");");
    _builder.newLine();
    _builder.newLine();
    _builder.append("        ");
    _builder.append("tempLoc.addLocation(\"Kanto\");");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("tempLoc.addTeamToLocation(\"Kanto\", \"Red\");");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("public Location getLocation(){");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("return Location.getInstance();");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("public List<String> getTypes(){");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("Type tempType = Type.getInstance();");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("List<String> aString = new ArrayList<>();");
    _builder.newLine();
    _builder.newLine();
    _builder.append("        ");
    _builder.append("aString.addAll(tempType.getTypes());");
    _builder.newLine();
    _builder.newLine();
    _builder.append("        ");
    _builder.append("tempType = null;");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("return aString;");
    _builder.newLine();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("public List<AttributeData> getAttributes(){");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("Attribute tempAttribute = Attribute.getInstance();");
    _builder.newLine();
    _builder.newLine();
    _builder.append("        ");
    _builder.append("List<AttributeData> aAttribute = new ArrayList<>();");
    _builder.newLine();
    _builder.newLine();
    _builder.append("        ");
    _builder.append("aAttribute.addAll(tempAttribute.getAttributes());");
    _builder.newLine();
    _builder.newLine();
    _builder.append("        ");
    _builder.append("tempAttribute = null;");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("return aAttribute;");
    _builder.newLine();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("public void addEntity(){");
    _builder.newLine();
    _builder.append("      ");
    _builder.append("String[] types = {\"fire\", \"water\", \"grass\"};");
    _builder.newLine();
    _builder.append("      ");
    _builder.append("int index = 0;");
    _builder.newLine();
    _builder.append("      ");
    _builder.append("for (EntityEnum ee : EntityEnum.values() ) {");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("Entity e = new Entity();");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("e.setName(ee.toString());");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("e.setType(types[index]);");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("Attribute.getInstance().getAttributes().forEach(element -> e.addAttribute(element));");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("Move.getInstance().getMoves().forEach(element -> e.addMoveData(element)); ");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("eList.add(e);");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("if(index<2){");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("index++;");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("} else {");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("index = 0;");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("      ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("public List<Entity> getEList(){");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("return eList;");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("public List<Entity> getBattleEntities(){");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("return this.battleEntities;");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("/**");
    _builder.newLine();
    _builder.append("     ");
    _builder.append("* @return the team");
    _builder.newLine();
    _builder.append("     ");
    _builder.append("*/");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("public Team getTeam() {");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("return team;");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("public String getCurrentLocation(){");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("return this.currentLocation;");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("public void setCurrentLocation(String currentLocation) {");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("this.currentLocation = currentLocation;");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("public String getCurrentTeam(){");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("return this.currentTeam;");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("public void setCurrentTeam(String currentTeam) {");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("this.currentTeam = currentTeam;");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("@Override");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("public void keyPressed(KeyEvent e){");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("if (e.getKeyChar() == \'x\') {");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("toggleGameFinished();");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("@Override");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("public void keyReleased(KeyEvent e){");
    _builder.newLine();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("@Override");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("public void keyTyped(KeyEvent e){");
    _builder.newLine();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    return _builder;
  }
  
  public CharSequence generateKillable(final Death death) {
    return null;
  }
  
  public CharSequence re(final Require req) {
    return this.logic(req.getLog());
  }
  
  protected CharSequence _logic(final Or x) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("(");
    CharSequence _logic = this.logic(x.getLeft());
    _builder.append(_logic);
    _builder.append("||");
    CharSequence _logic_1 = this.logic(x.getRight());
    _builder.append(_logic_1);
    _builder.append(")");
    return _builder;
  }
  
  protected CharSequence _logic(final And x) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("(");
    CharSequence _logic = this.logic(x.getLeft());
    _builder.append(_logic);
    _builder.append("&&");
    CharSequence _logic_1 = this.logic(x.getRight());
    _builder.append(_logic_1);
    _builder.append(")");
    return _builder;
  }
  
  protected CharSequence _logic(final NumberComparing x) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("(");
    CharSequence _exp = this.exp(x.getLeft());
    _builder.append(_exp);
    String _generateComp = this.generateComp(x.getComp());
    _builder.append(_generateComp);
    CharSequence _exp_1 = this.exp(x.getRight());
    _builder.append(_exp_1);
    _builder.append(")");
    return _builder;
  }
  
  public String generateComp(final Comparator op) {
    String _switchResult = null;
    boolean _matched = false;
    if (op instanceof Eq) {
      _matched=true;
      _switchResult = "==";
    }
    if (!_matched) {
      if (op instanceof Smaller) {
        _matched=true;
        _switchResult = "<";
      }
    }
    if (!_matched) {
      if (op instanceof Bigger) {
        _matched=true;
        _switchResult = ">";
      }
    }
    if (!_matched) {
      if (op instanceof SmallerEq) {
        _matched=true;
        _switchResult = "<=";
      }
    }
    if (!_matched) {
      if (op instanceof BiggerEq) {
        _matched=true;
        _switchResult = ">=";
      }
    }
    if (!_matched) {
      if (op instanceof NEq) {
        _matched=true;
        _switchResult = "!=";
      }
    }
    return _switchResult;
  }
  
  protected CharSequence _exp(final Add x) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("(");
    CharSequence _exp = this.exp(x.getLeft());
    _builder.append(_exp);
    _builder.append("+");
    CharSequence _exp_1 = this.exp(x.getRight());
    _builder.append(_exp_1);
    _builder.append(")");
    return _builder;
  }
  
  protected CharSequence _exp(final Sub x) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("(");
    CharSequence _exp = this.exp(x.getLeft());
    _builder.append(_exp);
    _builder.append("-");
    CharSequence _exp_1 = this.exp(x.getRight());
    _builder.append(_exp_1);
    _builder.append(")");
    return _builder;
  }
  
  protected CharSequence _exp(final Mult x) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("(");
    CharSequence _exp = this.exp(x.getLeft());
    _builder.append(_exp);
    _builder.append("*");
    CharSequence _exp_1 = this.exp(x.getRight());
    _builder.append(_exp_1);
    _builder.append(")");
    return _builder;
  }
  
  protected CharSequence _exp(final Div x) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("(");
    CharSequence _exp = this.exp(x.getLeft());
    _builder.append(_exp);
    _builder.append("/");
    CharSequence _exp_1 = this.exp(x.getRight());
    _builder.append(_exp_1);
    _builder.append(")");
    return _builder;
  }
  
  protected CharSequence _exp(final IntNum x) {
    return Integer.toString(x.getValue());
  }
  
  protected CharSequence _exp(final FloatNum x) {
    String _string = Integer.toString(x.getI());
    String _plus = (_string + ".");
    String _string_1 = Integer.toString(x.getDecimal());
    return (_plus + _string_1);
  }
  
  protected CharSequence _exp(final NameAttribute x) {
    String _name = x.getAttribute().getName();
    return ("_" + _name);
  }
  
  protected Number _getNumberFromAtomicDab(final IntNum x) {
    return Integer.valueOf(x.getValue());
  }
  
  protected Number _getNumberFromAtomicDab(final FloatNum x) {
    Float _xblockexpression = null;
    {
      int _i = x.getI();
      String _plus = (Integer.valueOf(_i) + ".");
      int _decimal = x.getDecimal();
      final String floatstring = (_plus + Integer.valueOf(_decimal));
      _xblockexpression = Float.valueOf(floatstring);
    }
    return _xblockexpression;
  }
  
  public CharSequence generateLocation(final Locations locations) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("import java.util.*;");
    _builder.newLine();
    _builder.newLine();
    _builder.append("public class Location {");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("private List<String> locations;");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("private String currentLocation;");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("private String currentTeam;");
    _builder.newLine();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("private Map<String, String> teams;");
    _builder.newLine();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("private static Location location;    ");
    _builder.newLine();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("private Location(){");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("locations = new ArrayList<>();");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("teams = new HashMap<>();");
    _builder.newLine();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("public static Location getInstance(){");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("if(location == null){");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("location = new Location();");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("return location;");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("public String getCurrentLocation(){");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("return this.currentLocation;");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("public String getCurrentTeam(){");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("return this.currentTeam;");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("public Map<String, String> getTeams(){");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("return this.teams;");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("public List<String> getLocations(){");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("return this.locations;");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("public void setLocations(List<String> locations){");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("this.locations = locations;");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("public void setCurrentLocation(String currentLocation){");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("this.currentLocation = currentLocation;");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("public void addLocation(String location){");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("locations.add(location);");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("public void addTeamToLocation(String location, String team){");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("if(locations.contains(location)){");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("teams.put(location, team);");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    return _builder;
  }
  
  public CharSequence generateMoves(final IFileSystemAccess2 fsa, final Moves moves) {
    CharSequence _xblockexpression = null;
    {
      fsa.generateFile("Move.java", this.generateEntity());
      fsa.generateFile("MoveEnum.java", this.generateMoveEnum(moves));
      fsa.generateFile("EntityState.java", this.generateEntityState());
      StringConcatenation _builder = new StringConcatenation();
      _builder.newLine();
      _builder.append("private Move moves = Move.getInstance()");
      _builder.newLine();
      _builder.newLine();
      _builder.append("private void addMoves(){");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("MoveData tempMoveData;");
      _builder.newLine();
      {
        EList<Move> _move = moves.getMove();
        for(final Move move : _move) {
          _builder.append("\t");
          _builder.append("tempMoveData = new MoveData();");
          _builder.newLine();
          _builder.append("\t");
          _builder.append("tempMoveData.setMoveName(\"");
          String _name = move.getName();
          _builder.append(_name, "\t");
          _builder.append("\");");
          _builder.newLineIfNotEmpty();
          _builder.append("\t");
          _builder.append("tempMoveData.setType(\"");
          String _name_1 = move.getEType().getType().getName();
          _builder.append(_name_1, "\t");
          _builder.append("\");");
          _builder.newLineIfNotEmpty();
          {
            EList<AltAttribute> _att = move.getAtt();
            for(final AltAttribute att : _att) {
              {
                Number _numberFromAtomicDab = this.getNumberFromAtomicDab(att.getAv().getAn());
                if ((_numberFromAtomicDab instanceof Integer)) {
                  _builder.append("\t");
                  _builder.append("\t");
                  _builder.append("tempMoveData.addAttribute(AttributeData.createAttributeDataWithInt(\"");
                  String _name_2 = att.getAttribute().getName();
                  _builder.append(_name_2, "\t\t");
                  _builder.append("\", ");
                  Number _numberFromAtomicDab_1 = this.getNumberFromAtomicDab(att.getAv().getAn());
                  _builder.append(_numberFromAtomicDab_1, "\t\t");
                  _builder.append("));");
                  _builder.newLineIfNotEmpty();
                } else {
                  Number _numberFromAtomicDab_2 = this.getNumberFromAtomicDab(att.getAv().getAn());
                  if ((_numberFromAtomicDab_2 instanceof Float)) {
                    _builder.append("\t");
                    _builder.append("\t");
                    _builder.append("tempMoveData.addAttribute(AttributeData.createAttributeDataWithFloat(\"");
                    String _name_3 = att.getAttribute().getName();
                    _builder.append(_name_3, "\t\t");
                    _builder.append("\", ");
                    Number _numberFromAtomicDab_3 = this.getNumberFromAtomicDab(att.getAv().getAn());
                    _builder.append(_numberFromAtomicDab_3, "\t\t");
                    _builder.append("));");
                    _builder.newLineIfNotEmpty();
                  }
                }
              }
            }
          }
        }
      }
      _builder.append("}");
      _builder.newLine();
      _builder.newLine();
      _xblockexpression = _builder;
    }
    return _xblockexpression;
  }
  
  public CharSequence generateMove() {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("import java.util.*;");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.newLine();
    _builder.append("public class Move{\t\t\t");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t");
    _builder.append("private static Move move;");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("private List<MoveData> moves = new ArrayList<>();");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("private Move(){}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public static Move getInstance(){");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("if (move == null){");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("move = new Move();");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("return move;");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public void addMove(MoveData move){");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("moves.add(move);");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public MoveData getMove(String move){");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("MoveData mD = null;");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("for (MoveData moveData : moves) {");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("if(moveData.getMoveName().equals(move)){");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("mD = moveData;");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("return mD;");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public List<MoveData> getMoves(){");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("return moves;");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    return _builder;
  }
  
  public CharSequence generateMoveData() {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("import java.util.*;");
    _builder.newLine();
    _builder.newLine();
    _builder.append("public class MoveData{");
    _builder.newLine();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("private String moveName;");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("private String type;");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("private List<AttributeData> moveAttributes;");
    _builder.newLine();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("public MoveData(){");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("this.moveAttributes = new ArrayList<>();");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("public MoveData(String moveName, String type, List<AttributeData> moveAttributes) {");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("this.moveName = moveName;");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("this.type = type;");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("this.moveAttributes = moveAttributes;");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("public String getMoveName(){");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("return this.moveName;");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("public void setMoveName(String moveName) {");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("this.moveName = moveName;");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("public String getType() {");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("return this.type;");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("public void setType(String type) {");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("this.type = type;");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("public List<AttributeData> getMoveAttributes() {");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("return this.moveAttributes;");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("public void setMoveAttributes(List<AttributeData> moveAttributes) {");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("this.moveAttributes = moveAttributes;");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("public void addAttribute(AttributeData attribute){");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("moveAttributes.add(attribute);");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("@Override");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("public boolean equals(Object o) {");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("if (o == this)");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("return true;");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("if (!(o instanceof MoveData)) {");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("return false;");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("MoveData moveData = (MoveData) o;");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("return Objects.equals(moveName, moveData.moveName) && Objects.equals(type, moveData.type) && Objects.equals(moveAttributes, moveData.moveAttributes);");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("@Override");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("public int hashCode() {");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("return Objects.hash(moveName, type, moveAttributes);");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("@Override");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("public String toString() {");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("return getMoveName();");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    return _builder;
  }
  
  public CharSequence generateMoveEnum(final Moves moves) {
    CharSequence _xblockexpression = null;
    {
      String moveEnums = "";
      int i = 1;
      EList<Move> _move = moves.getMove();
      for (final Move move : _move) {
        {
          String name = move.getName();
          String type = move.getEType().getType().getName();
          String _moveEnums = moveEnums;
          moveEnums = (_moveEnums + name);
          String _moveEnums_1 = moveEnums;
          moveEnums = (_moveEnums_1 + (((("(" + "\"") + type) + "\"") + ")"));
          int _size = moves.getMove().size();
          boolean _lessThan = (i < _size);
          if (_lessThan) {
            String _moveEnums_2 = moveEnums;
            moveEnums = (_moveEnums_2 + ", ");
            i++;
          } else {
            String _moveEnums_3 = moveEnums;
            moveEnums = (_moveEnums_3 + ";");
          }
        }
      }
      StringConcatenation _builder = new StringConcatenation();
      _builder.append("enum MoveEnum{");
      _builder.newLine();
      _builder.append("    ");
      _builder.append(moveEnums, "    ");
      _builder.newLineIfNotEmpty();
      _builder.append("    ");
      _builder.append("private String type;");
      _builder.newLine();
      _builder.newLine();
      _builder.append("    ");
      _builder.append("private MoveEnum(String type){");
      _builder.newLine();
      _builder.append("        ");
      _builder.append("this.type = type;");
      _builder.newLine();
      _builder.append("    ");
      _builder.append("}");
      _builder.newLine();
      _builder.newLine();
      _builder.append("    ");
      _builder.append("public String getType(){");
      _builder.newLine();
      _builder.append("        ");
      _builder.append("return this.type;");
      _builder.newLine();
      _builder.append("    ");
      _builder.append("}");
      _builder.newLine();
      _builder.append("}");
      _builder.newLine();
      _xblockexpression = _builder;
    }
    return _xblockexpression;
  }
  
  public CharSequence generateTeams(final IFileSystemAccess2 fsa, final Teams teams) {
    CharSequence _xblockexpression = null;
    {
      fsa.generateFile("Team.java", this.generateTeam());
      StringConcatenation _builder = new StringConcatenation();
      _builder.newLine();
      _builder.append("private Team team = new Team();");
      _builder.newLine();
      _builder.newLine();
      _builder.append("private void createTeams(){");
      _builder.newLine();
      {
        EList<Team> _team = teams.getTeam();
        for(final Team team : _team) {
          _builder.append("\t");
          String _addTeamMemberString = this.addTeamMemberString(team);
          _builder.append(_addTeamMemberString, "\t");
          _builder.newLineIfNotEmpty();
        }
      }
      _builder.append("}");
      _builder.newLine();
      _builder.newLine();
      _builder.append("private Entity findEntityByName(String name){");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("for(Entity e : entities){");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("if(e.toString().equals(name){");
      _builder.newLine();
      _builder.append("\t\t\t");
      _builder.append("return e;");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("}");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("}");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("return null;");
      _builder.newLine();
      _builder.append("}");
      _builder.newLine();
      _builder.newLine();
      _xblockexpression = _builder;
    }
    return _xblockexpression;
  }
  
  public String addTeamMemberString(final Team team) {
    String _xblockexpression = null;
    {
      String _name = team.getName();
      String _plus = (("team.addTeamMember(" + "\"") + _name);
      String _plus_1 = (_plus + "\"");
      String createTeamString = (_plus_1 + ", ");
      int i = 1;
      EList<Entity> _entity = team.getMembers().getEntity();
      for (final Entity e : _entity) {
        {
          String _createTeamString = createTeamString;
          String _name_1 = e.getName();
          String _plus_2 = (("findEntityByName(" + "\"") + _name_1);
          String _plus_3 = (_plus_2 + "\"");
          String _plus_4 = (_plus_3 + ")");
          createTeamString = (_createTeamString + _plus_4);
          int _size = team.getMembers().getEntity().size();
          boolean _greaterThan = (_size > i);
          if (_greaterThan) {
            i++;
            String _createTeamString_1 = createTeamString;
            createTeamString = (_createTeamString_1 + ", ");
          } else {
            String _createTeamString_2 = createTeamString;
            createTeamString = (_createTeamString_2 + ");");
          }
        }
      }
      _xblockexpression = createTeamString;
    }
    return _xblockexpression;
  }
  
  public CharSequence generateTeam() {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("import java.util.*;");
    _builder.newLine();
    _builder.newLine();
    _builder.append("public class Team {");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("private Map<String, List<Entity>> teams;");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("private List<String> teamNames;");
    _builder.newLine();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("public Team() {");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("teams = new HashMap<>();");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("teamNames = new ArrayList<>(); ");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("public List<Entity> getTeamByName(String name) {");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("if (!teams.containsKey(name)) {");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("return null;");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("return teams.get(name);");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("public void addTeamMember(String team, Entity... entity) {");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("if (!teams.containsKey(team)) {");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("teams.put(team, entityAdder(entity));");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("teamNames.add(team);");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("} else {");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("teams.get(team).addAll(entityAdder(entity));");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("public List<Entity> entityAdder(Entity... entity) {");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("List<Entity> eList = new ArrayList<>();");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("for (Entity entity2 : entity) {");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("Entity tempEntity = new Entity(entity2);");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("eList.add(tempEntity);");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("return eList;");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("public Map<String, List<Entity>> getTeams(){");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("return teams;");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("public List<Entity> getPlayerTeam(){");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("return teams.get(teamNames.get(0));");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("public boolean checkPlayerEntities(){");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("int playerTeamSize = getPlayerTeam().size();");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("int deadEntities = 0;");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("for (Entity entity : getPlayerTeam()) {");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("if(entity.getEntityState() == EntityState.DEAD) break;");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("deadEntities++;");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("if(deadEntities == playerTeamSize) return true;");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("return false;");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("public int playerEntitiesAlive(){");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("int alive = 0;");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("for (Entity entity : getPlayerTeam()) {");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("if(entity.getEntityState() != EntityState.DEAD) alive++;");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("return alive;");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    return _builder;
  }
  
  public CharSequence generateType() {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("import java.util.*;");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.newLine();
    _builder.append("public class Type{");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("private List<String> types = new ArrayList<>();");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("//private String typeName;");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("private static Type type;");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("private Type(){}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public static Type getInstance(){");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("if(type == null){");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("type = new Type();");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("return type;");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t\t\t\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public void addType(String type){");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("types.add(type);");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public List<String> getTypes(){");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("return types;");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    return _builder;
  }
  
  public CharSequence generateTypeEnum(final Relations relation) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("public enum TypeEnum{");
    _builder.newLine();
    {
      EList<Type> _type = relation.getType();
      for(final Type type : _type) {
        String _name = type.getName();
        _builder.append(_name);
        _builder.append(",");
        _builder.newLineIfNotEmpty();
      }
    }
    _builder.append("}");
    _builder.newLine();
    return _builder;
  }
  
  public Object exp2(final Sum x, final List<Object> list) {
    if (x instanceof FloatNum) {
      return _exp2((FloatNum)x, list);
    } else if (x instanceof IntNum) {
      return _exp2((IntNum)x, list);
    } else if (x instanceof NameAttribute) {
      return _exp2((NameAttribute)x, list);
    } else if (x instanceof Div) {
      return _exp2((Div)x, list);
    } else if (x instanceof Mult) {
      return _exp2((Mult)x, list);
    } else if (x instanceof Add) {
      return _exp2((Add)x, list);
    } else if (x instanceof Sub) {
      return _exp2((Sub)x, list);
    } else {
      throw new IllegalArgumentException("Unhandled parameter types: " +
        Arrays.<Object>asList(x, list).toString());
    }
  }
  
  public CharSequence logic(final Proposition x) {
    if (x instanceof And) {
      return _logic((And)x);
    } else if (x instanceof NumberComparing) {
      return _logic((NumberComparing)x);
    } else if (x instanceof Or) {
      return _logic((Or)x);
    } else {
      throw new IllegalArgumentException("Unhandled parameter types: " +
        Arrays.<Object>asList(x).toString());
    }
  }
  
  public CharSequence exp(final Sum x) {
    if (x instanceof FloatNum) {
      return _exp((FloatNum)x);
    } else if (x instanceof IntNum) {
      return _exp((IntNum)x);
    } else if (x instanceof NameAttribute) {
      return _exp((NameAttribute)x);
    } else if (x instanceof Div) {
      return _exp((Div)x);
    } else if (x instanceof Mult) {
      return _exp((Mult)x);
    } else if (x instanceof Add) {
      return _exp((Add)x);
    } else if (x instanceof Sub) {
      return _exp((Sub)x);
    } else {
      throw new IllegalArgumentException("Unhandled parameter types: " +
        Arrays.<Object>asList(x).toString());
    }
  }
  
  public Number getNumberFromAtomicDab(final AtomicNumber x) {
    if (x instanceof FloatNum) {
      return _getNumberFromAtomicDab((FloatNum)x);
    } else if (x instanceof IntNum) {
      return _getNumberFromAtomicDab((IntNum)x);
    } else {
      throw new IllegalArgumentException("Unhandled parameter types: " +
        Arrays.<Object>asList(x).toString());
    }
  }
}
