/**
 * generated by Xtext 2.21.0
 */
package mdsd.rPG.impl;

import mdsd.rPG.MoveEffect;
import mdsd.rPG.MoveRule;
import mdsd.rPG.RPGPackage;

import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;
import org.eclipse.emf.ecore.impl.MinimalEObjectImpl;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Move Effect</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link mdsd.rPG.impl.MoveEffectImpl#getMoveR <em>Move R</em>}</li>
 * </ul>
 *
 * @generated
 */
public class MoveEffectImpl extends MinimalEObjectImpl.Container implements MoveEffect
{
  /**
   * The cached value of the '{@link #getMoveR() <em>Move R</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getMoveR()
   * @generated
   * @ordered
   */
  protected MoveRule moveR;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected MoveEffectImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return RPGPackage.Literals.MOVE_EFFECT;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public MoveRule getMoveR()
  {
    return moveR;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetMoveR(MoveRule newMoveR, NotificationChain msgs)
  {
    MoveRule oldMoveR = moveR;
    moveR = newMoveR;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, RPGPackage.MOVE_EFFECT__MOVE_R, oldMoveR, newMoveR);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setMoveR(MoveRule newMoveR)
  {
    if (newMoveR != moveR)
    {
      NotificationChain msgs = null;
      if (moveR != null)
        msgs = ((InternalEObject)moveR).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - RPGPackage.MOVE_EFFECT__MOVE_R, null, msgs);
      if (newMoveR != null)
        msgs = ((InternalEObject)newMoveR).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - RPGPackage.MOVE_EFFECT__MOVE_R, null, msgs);
      msgs = basicSetMoveR(newMoveR, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, RPGPackage.MOVE_EFFECT__MOVE_R, newMoveR, newMoveR));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs)
  {
    switch (featureID)
    {
      case RPGPackage.MOVE_EFFECT__MOVE_R:
        return basicSetMoveR(null, msgs);
    }
    return super.eInverseRemove(otherEnd, featureID, msgs);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case RPGPackage.MOVE_EFFECT__MOVE_R:
        return getMoveR();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case RPGPackage.MOVE_EFFECT__MOVE_R:
        setMoveR((MoveRule)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case RPGPackage.MOVE_EFFECT__MOVE_R:
        setMoveR((MoveRule)null);
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case RPGPackage.MOVE_EFFECT__MOVE_R:
        return moveR != null;
    }
    return super.eIsSet(featureID);
  }

} //MoveEffectImpl
