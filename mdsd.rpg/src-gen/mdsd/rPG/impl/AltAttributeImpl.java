/**
 * generated by Xtext 2.21.0
 */
package mdsd.rPG.impl;

import java.util.Collection;

import mdsd.rPG.AltAttribute;
import mdsd.rPG.Attribute;
import mdsd.rPG.AttributeValues;
import mdsd.rPG.RPGPackage;

import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.common.util.EList;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;
import org.eclipse.emf.ecore.impl.MinimalEObjectImpl;

import org.eclipse.emf.ecore.util.EObjectResolvingEList;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Alt Attribute</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link mdsd.rPG.impl.AltAttributeImpl#getAttriburte <em>Attriburte</em>}</li>
 *   <li>{@link mdsd.rPG.impl.AltAttributeImpl#getAv <em>Av</em>}</li>
 * </ul>
 *
 * @generated
 */
public class AltAttributeImpl extends MinimalEObjectImpl.Container implements AltAttribute
{
  /**
   * The cached value of the '{@link #getAttriburte() <em>Attriburte</em>}' reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getAttriburte()
   * @generated
   * @ordered
   */
  protected EList<Attribute> attriburte;

  /**
   * The cached value of the '{@link #getAv() <em>Av</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getAv()
   * @generated
   * @ordered
   */
  protected AttributeValues av;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected AltAttributeImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return RPGPackage.Literals.ALT_ATTRIBUTE;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EList<Attribute> getAttriburte()
  {
    if (attriburte == null)
    {
      attriburte = new EObjectResolvingEList<Attribute>(Attribute.class, this, RPGPackage.ALT_ATTRIBUTE__ATTRIBURTE);
    }
    return attriburte;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public AttributeValues getAv()
  {
    return av;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetAv(AttributeValues newAv, NotificationChain msgs)
  {
    AttributeValues oldAv = av;
    av = newAv;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, RPGPackage.ALT_ATTRIBUTE__AV, oldAv, newAv);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setAv(AttributeValues newAv)
  {
    if (newAv != av)
    {
      NotificationChain msgs = null;
      if (av != null)
        msgs = ((InternalEObject)av).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - RPGPackage.ALT_ATTRIBUTE__AV, null, msgs);
      if (newAv != null)
        msgs = ((InternalEObject)newAv).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - RPGPackage.ALT_ATTRIBUTE__AV, null, msgs);
      msgs = basicSetAv(newAv, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, RPGPackage.ALT_ATTRIBUTE__AV, newAv, newAv));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs)
  {
    switch (featureID)
    {
      case RPGPackage.ALT_ATTRIBUTE__AV:
        return basicSetAv(null, msgs);
    }
    return super.eInverseRemove(otherEnd, featureID, msgs);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case RPGPackage.ALT_ATTRIBUTE__ATTRIBURTE:
        return getAttriburte();
      case RPGPackage.ALT_ATTRIBUTE__AV:
        return getAv();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @SuppressWarnings("unchecked")
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case RPGPackage.ALT_ATTRIBUTE__ATTRIBURTE:
        getAttriburte().clear();
        getAttriburte().addAll((Collection<? extends Attribute>)newValue);
        return;
      case RPGPackage.ALT_ATTRIBUTE__AV:
        setAv((AttributeValues)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case RPGPackage.ALT_ATTRIBUTE__ATTRIBURTE:
        getAttriburte().clear();
        return;
      case RPGPackage.ALT_ATTRIBUTE__AV:
        setAv((AttributeValues)null);
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case RPGPackage.ALT_ATTRIBUTE__ATTRIBURTE:
        return attriburte != null && !attriburte.isEmpty();
      case RPGPackage.ALT_ATTRIBUTE__AV:
        return av != null;
    }
    return super.eIsSet(featureID);
  }

} //AltAttributeImpl
