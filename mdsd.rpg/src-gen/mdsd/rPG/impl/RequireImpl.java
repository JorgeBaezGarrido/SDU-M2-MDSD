/**
 * generated by Xtext 2.21.0
 */
package mdsd.rPG.impl;

import java.util.Collection;

import mdsd.rPG.BattleSize;
import mdsd.rPG.Declaration;
import mdsd.rPG.Proposition;
import mdsd.rPG.RPGPackage;
import mdsd.rPG.Require;
import mdsd.rPG.Team;
import mdsd.rPG.Teams;

import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.common.util.EList;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;

import org.eclipse.emf.ecore.util.EObjectContainmentEList;
import org.eclipse.emf.ecore.util.InternalEList;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Require</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link mdsd.rPG.impl.RequireImpl#getBs <em>Bs</em>}</li>
 *   <li>{@link mdsd.rPG.impl.RequireImpl#getTeam <em>Team</em>}</li>
 *   <li>{@link mdsd.rPG.impl.RequireImpl#getLog <em>Log</em>}</li>
 * </ul>
 *
 * @generated
 */
public class RequireImpl extends AttributeValuesImpl implements Require
{
  /**
   * The cached value of the '{@link #getBs() <em>Bs</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getBs()
   * @generated
   * @ordered
   */
  protected BattleSize bs;

  /**
   * The cached value of the '{@link #getTeam() <em>Team</em>}' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getTeam()
   * @generated
   * @ordered
   */
  protected EList<Team> team;

  /**
   * The cached value of the '{@link #getLog() <em>Log</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getLog()
   * @generated
   * @ordered
   */
  protected Proposition log;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected RequireImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return RPGPackage.Literals.REQUIRE;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public BattleSize getBs()
  {
    return bs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetBs(BattleSize newBs, NotificationChain msgs)
  {
    BattleSize oldBs = bs;
    bs = newBs;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, RPGPackage.REQUIRE__BS, oldBs, newBs);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setBs(BattleSize newBs)
  {
    if (newBs != bs)
    {
      NotificationChain msgs = null;
      if (bs != null)
        msgs = ((InternalEObject)bs).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - RPGPackage.REQUIRE__BS, null, msgs);
      if (newBs != null)
        msgs = ((InternalEObject)newBs).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - RPGPackage.REQUIRE__BS, null, msgs);
      msgs = basicSetBs(newBs, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, RPGPackage.REQUIRE__BS, newBs, newBs));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EList<Team> getTeam()
  {
    if (team == null)
    {
      team = new EObjectContainmentEList<Team>(Team.class, this, RPGPackage.REQUIRE__TEAM);
    }
    return team;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Proposition getLog()
  {
    return log;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetLog(Proposition newLog, NotificationChain msgs)
  {
    Proposition oldLog = log;
    log = newLog;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, RPGPackage.REQUIRE__LOG, oldLog, newLog);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setLog(Proposition newLog)
  {
    if (newLog != log)
    {
      NotificationChain msgs = null;
      if (log != null)
        msgs = ((InternalEObject)log).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - RPGPackage.REQUIRE__LOG, null, msgs);
      if (newLog != null)
        msgs = ((InternalEObject)newLog).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - RPGPackage.REQUIRE__LOG, null, msgs);
      msgs = basicSetLog(newLog, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, RPGPackage.REQUIRE__LOG, newLog, newLog));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs)
  {
    switch (featureID)
    {
      case RPGPackage.REQUIRE__BS:
        return basicSetBs(null, msgs);
      case RPGPackage.REQUIRE__TEAM:
        return ((InternalEList<?>)getTeam()).basicRemove(otherEnd, msgs);
      case RPGPackage.REQUIRE__LOG:
        return basicSetLog(null, msgs);
    }
    return super.eInverseRemove(otherEnd, featureID, msgs);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case RPGPackage.REQUIRE__BS:
        return getBs();
      case RPGPackage.REQUIRE__TEAM:
        return getTeam();
      case RPGPackage.REQUIRE__LOG:
        return getLog();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @SuppressWarnings("unchecked")
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case RPGPackage.REQUIRE__BS:
        setBs((BattleSize)newValue);
        return;
      case RPGPackage.REQUIRE__TEAM:
        getTeam().clear();
        getTeam().addAll((Collection<? extends Team>)newValue);
        return;
      case RPGPackage.REQUIRE__LOG:
        setLog((Proposition)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case RPGPackage.REQUIRE__BS:
        setBs((BattleSize)null);
        return;
      case RPGPackage.REQUIRE__TEAM:
        getTeam().clear();
        return;
      case RPGPackage.REQUIRE__LOG:
        setLog((Proposition)null);
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case RPGPackage.REQUIRE__BS:
        return bs != null;
      case RPGPackage.REQUIRE__TEAM:
        return team != null && !team.isEmpty();
      case RPGPackage.REQUIRE__LOG:
        return log != null;
    }
    return super.eIsSet(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public int eBaseStructuralFeatureID(int derivedFeatureID, Class<?> baseClass)
  {
    if (baseClass == Declaration.class)
    {
      switch (derivedFeatureID)
      {
        default: return -1;
      }
    }
    if (baseClass == Teams.class)
    {
      switch (derivedFeatureID)
      {
        case RPGPackage.REQUIRE__BS: return RPGPackage.TEAMS__BS;
        case RPGPackage.REQUIRE__TEAM: return RPGPackage.TEAMS__TEAM;
        default: return -1;
      }
    }
    return super.eBaseStructuralFeatureID(derivedFeatureID, baseClass);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public int eDerivedStructuralFeatureID(int baseFeatureID, Class<?> baseClass)
  {
    if (baseClass == Declaration.class)
    {
      switch (baseFeatureID)
      {
        default: return -1;
      }
    }
    if (baseClass == Teams.class)
    {
      switch (baseFeatureID)
      {
        case RPGPackage.TEAMS__BS: return RPGPackage.REQUIRE__BS;
        case RPGPackage.TEAMS__TEAM: return RPGPackage.REQUIRE__TEAM;
        default: return -1;
      }
    }
    return super.eDerivedStructuralFeatureID(baseFeatureID, baseClass);
  }

} //RequireImpl
