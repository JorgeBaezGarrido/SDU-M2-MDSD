/**
 * generated by Xtext 2.21.0
 */
package mdsd.rPG.impl;

import java.util.Collection;

import mdsd.rPG.Attribute;
import mdsd.rPG.Proposition;
import mdsd.rPG.RPGPackage;
import mdsd.rPG.Rule;
import mdsd.rPG.Sum;

import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.common.util.EList;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;

import org.eclipse.emf.ecore.util.EObjectContainmentEList;
import org.eclipse.emf.ecore.util.EObjectResolvingEList;
import org.eclipse.emf.ecore.util.InternalEList;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Rule</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link mdsd.rPG.impl.RuleImpl#getOperator <em>Operator</em>}</li>
 *   <li>{@link mdsd.rPG.impl.RuleImpl#getAttritbuteToSet <em>Attritbute To Set</em>}</li>
 *   <li>{@link mdsd.rPG.impl.RuleImpl#getChange <em>Change</em>}</li>
 * </ul>
 *
 * @generated
 */
public class RuleImpl extends EffectImpl implements Rule
{
  /**
   * The cached value of the '{@link #getOperator() <em>Operator</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getOperator()
   * @generated
   * @ordered
   */
  protected Proposition operator;

  /**
   * The cached value of the '{@link #getAttritbuteToSet() <em>Attritbute To Set</em>}' reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getAttritbuteToSet()
   * @generated
   * @ordered
   */
  protected EList<Attribute> attritbuteToSet;

  /**
   * The cached value of the '{@link #getChange() <em>Change</em>}' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getChange()
   * @generated
   * @ordered
   */
  protected EList<Sum> change;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected RuleImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return RPGPackage.Literals.RULE;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Proposition getOperator()
  {
    return operator;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetOperator(Proposition newOperator, NotificationChain msgs)
  {
    Proposition oldOperator = operator;
    operator = newOperator;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, RPGPackage.RULE__OPERATOR, oldOperator, newOperator);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setOperator(Proposition newOperator)
  {
    if (newOperator != operator)
    {
      NotificationChain msgs = null;
      if (operator != null)
        msgs = ((InternalEObject)operator).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - RPGPackage.RULE__OPERATOR, null, msgs);
      if (newOperator != null)
        msgs = ((InternalEObject)newOperator).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - RPGPackage.RULE__OPERATOR, null, msgs);
      msgs = basicSetOperator(newOperator, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, RPGPackage.RULE__OPERATOR, newOperator, newOperator));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EList<Attribute> getAttritbuteToSet()
  {
    if (attritbuteToSet == null)
    {
      attritbuteToSet = new EObjectResolvingEList<Attribute>(Attribute.class, this, RPGPackage.RULE__ATTRITBUTE_TO_SET);
    }
    return attritbuteToSet;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EList<Sum> getChange()
  {
    if (change == null)
    {
      change = new EObjectContainmentEList<Sum>(Sum.class, this, RPGPackage.RULE__CHANGE);
    }
    return change;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs)
  {
    switch (featureID)
    {
      case RPGPackage.RULE__OPERATOR:
        return basicSetOperator(null, msgs);
      case RPGPackage.RULE__CHANGE:
        return ((InternalEList<?>)getChange()).basicRemove(otherEnd, msgs);
    }
    return super.eInverseRemove(otherEnd, featureID, msgs);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case RPGPackage.RULE__OPERATOR:
        return getOperator();
      case RPGPackage.RULE__ATTRITBUTE_TO_SET:
        return getAttritbuteToSet();
      case RPGPackage.RULE__CHANGE:
        return getChange();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @SuppressWarnings("unchecked")
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case RPGPackage.RULE__OPERATOR:
        setOperator((Proposition)newValue);
        return;
      case RPGPackage.RULE__ATTRITBUTE_TO_SET:
        getAttritbuteToSet().clear();
        getAttritbuteToSet().addAll((Collection<? extends Attribute>)newValue);
        return;
      case RPGPackage.RULE__CHANGE:
        getChange().clear();
        getChange().addAll((Collection<? extends Sum>)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case RPGPackage.RULE__OPERATOR:
        setOperator((Proposition)null);
        return;
      case RPGPackage.RULE__ATTRITBUTE_TO_SET:
        getAttritbuteToSet().clear();
        return;
      case RPGPackage.RULE__CHANGE:
        getChange().clear();
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case RPGPackage.RULE__OPERATOR:
        return operator != null;
      case RPGPackage.RULE__ATTRITBUTE_TO_SET:
        return attritbuteToSet != null && !attritbuteToSet.isEmpty();
      case RPGPackage.RULE__CHANGE:
        return change != null && !change.isEmpty();
    }
    return super.eIsSet(featureID);
  }

} //RuleImpl
