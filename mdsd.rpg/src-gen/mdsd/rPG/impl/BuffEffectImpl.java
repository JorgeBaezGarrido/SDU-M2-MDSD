/**
 * generated by Xtext 2.21.0
 */
package mdsd.rPG.impl;

import mdsd.rPG.BuffEffect;
import mdsd.rPG.BuffRule;
import mdsd.rPG.RPGPackage;

import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;
import org.eclipse.emf.ecore.impl.MinimalEObjectImpl;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Buff Effect</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link mdsd.rPG.impl.BuffEffectImpl#getMoveB <em>Move B</em>}</li>
 * </ul>
 *
 * @generated
 */
public class BuffEffectImpl extends MinimalEObjectImpl.Container implements BuffEffect
{
  /**
   * The cached value of the '{@link #getMoveB() <em>Move B</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getMoveB()
   * @generated
   * @ordered
   */
  protected BuffRule moveB;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected BuffEffectImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return RPGPackage.Literals.BUFF_EFFECT;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public BuffRule getMoveB()
  {
    return moveB;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetMoveB(BuffRule newMoveB, NotificationChain msgs)
  {
    BuffRule oldMoveB = moveB;
    moveB = newMoveB;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, RPGPackage.BUFF_EFFECT__MOVE_B, oldMoveB, newMoveB);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setMoveB(BuffRule newMoveB)
  {
    if (newMoveB != moveB)
    {
      NotificationChain msgs = null;
      if (moveB != null)
        msgs = ((InternalEObject)moveB).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - RPGPackage.BUFF_EFFECT__MOVE_B, null, msgs);
      if (newMoveB != null)
        msgs = ((InternalEObject)newMoveB).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - RPGPackage.BUFF_EFFECT__MOVE_B, null, msgs);
      msgs = basicSetMoveB(newMoveB, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, RPGPackage.BUFF_EFFECT__MOVE_B, newMoveB, newMoveB));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs)
  {
    switch (featureID)
    {
      case RPGPackage.BUFF_EFFECT__MOVE_B:
        return basicSetMoveB(null, msgs);
    }
    return super.eInverseRemove(otherEnd, featureID, msgs);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case RPGPackage.BUFF_EFFECT__MOVE_B:
        return getMoveB();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case RPGPackage.BUFF_EFFECT__MOVE_B:
        setMoveB((BuffRule)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case RPGPackage.BUFF_EFFECT__MOVE_B:
        setMoveB((BuffRule)null);
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case RPGPackage.BUFF_EFFECT__MOVE_B:
        return moveB != null;
    }
    return super.eIsSet(featureID);
  }

} //BuffEffectImpl
