/*
 * generated by Xtext 2.21.0
 */
grammar InternalRPG;

options {
	superClass=AbstractInternalAntlrParser;
}

@lexer::header {
package mdsd.parser.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.parser.antlr.Lexer;
}

@parser::header {
package mdsd.parser.antlr.internal;

import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.AbstractInternalAntlrParser;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.parser.antlr.AntlrDatatypeRuleToken;
import mdsd.services.RPGGrammarAccess;

}

@parser::members {

 	private RPGGrammarAccess grammarAccess;

    public InternalRPGParser(TokenStream input, RPGGrammarAccess grammarAccess) {
        this(input);
        this.grammarAccess = grammarAccess;
        registerRules(grammarAccess.getGrammar());
    }

    @Override
    protected String getFirstRuleName() {
    	return "SystemRPG";
   	}

   	@Override
   	protected RPGGrammarAccess getGrammarAccess() {
   		return grammarAccess;
   	}

}

@rulecatch {
    catch (RecognitionException re) {
        recover(input,re);
        appendSkippedTokens();
    }
}

// Entry rule entryRuleSystemRPG
entryRuleSystemRPG returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getSystemRPGRule()); }
	iv_ruleSystemRPG=ruleSystemRPG
	{ $current=$iv_ruleSystemRPG.current; }
	EOF;

// Rule SystemRPG
ruleSystemRPG returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='game'
		{
			newLeafNode(otherlv_0, grammarAccess.getSystemRPGAccess().getGameKeyword_0());
		}
		(
			(
				lv_name_1_0=RULE_ID
				{
					newLeafNode(lv_name_1_0, grammarAccess.getSystemRPGAccess().getNameIDTerminalRuleCall_1_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getSystemRPGRule());
					}
					setWithLastConsumed(
						$current,
						"name",
						lv_name_1_0,
						"org.eclipse.xtext.common.Terminals.ID");
				}
			)
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getSystemRPGAccess().getDeclarationsDeclarationParserRuleCall_2_0());
				}
				lv_declarations_2_0=ruleDeclaration
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getSystemRPGRule());
					}
					add(
						$current,
						"declarations",
						lv_declarations_2_0,
						"mdsd.RPG.Declaration");
					afterParserOrEnumRuleCall();
				}
			)
		)*
	)
;

// Entry rule entryRuleDeclaration
entryRuleDeclaration returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getDeclarationRule()); }
	iv_ruleDeclaration=ruleDeclaration
	{ $current=$iv_ruleDeclaration.current; }
	EOF;

// Rule Declaration
ruleDeclaration returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getDeclarationAccess().getLocationsParserRuleCall_0());
		}
		this_Locations_0=ruleLocations
		{
			$current = $this_Locations_0.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getDeclarationAccess().getRelationsParserRuleCall_1());
		}
		this_Relations_1=ruleRelations
		{
			$current = $this_Relations_1.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getDeclarationAccess().getMovesParserRuleCall_2());
		}
		this_Moves_2=ruleMoves
		{
			$current = $this_Moves_2.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getDeclarationAccess().getEntitiesParserRuleCall_3());
		}
		this_Entities_3=ruleEntities
		{
			$current = $this_Entities_3.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getDeclarationAccess().getTeamsParserRuleCall_4());
		}
		this_Teams_4=ruleTeams
		{
			$current = $this_Teams_4.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getDeclarationAccess().getAttributesParserRuleCall_5());
		}
		this_Attributes_5=ruleAttributes
		{
			$current = $this_Attributes_5.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getDeclarationAccess().getDeathParserRuleCall_6());
		}
		this_Death_6=ruleDeath
		{
			$current = $this_Death_6.current;
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRuleLocations
entryRuleLocations returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getLocationsRule()); }
	iv_ruleLocations=ruleLocations
	{ $current=$iv_ruleLocations.current; }
	EOF;

// Rule Locations
ruleLocations returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='location'
		{
			newLeafNode(otherlv_0, grammarAccess.getLocationsAccess().getLocationKeyword_0());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getLocationsAccess().getLocLocParserRuleCall_1_0());
				}
				lv_loc_1_0=ruleLoc
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getLocationsRule());
					}
					add(
						$current,
						"loc",
						lv_loc_1_0,
						"mdsd.RPG.Loc");
					afterParserOrEnumRuleCall();
				}
			)
		)+
	)
;

// Entry rule entryRuleLoc
entryRuleLoc returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getLocRule()); }
	iv_ruleLoc=ruleLoc
	{ $current=$iv_ruleLoc.current; }
	EOF;

// Rule Loc
ruleLoc returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				lv_name_0_0=RULE_ID
				{
					newLeafNode(lv_name_0_0, grammarAccess.getLocAccess().getNameIDTerminalRuleCall_0_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getLocRule());
					}
					setWithLastConsumed(
						$current,
						"name",
						lv_name_0_0,
						"org.eclipse.xtext.common.Terminals.ID");
				}
			)
		)
		otherlv_1='opponents'
		{
			newLeafNode(otherlv_1, grammarAccess.getLocAccess().getOpponentsKeyword_1());
		}
		(
			(
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getLocRule());
					}
				}
				otherlv_2=RULE_ID
				{
					newLeafNode(otherlv_2, grammarAccess.getLocAccess().getTeamTeamCrossReference_2_0());
				}
			)
		)
	)
;

// Entry rule entryRuleRelations
entryRuleRelations returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getRelationsRule()); }
	iv_ruleRelations=ruleRelations
	{ $current=$iv_ruleRelations.current; }
	EOF;

// Rule Relations
ruleRelations returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='relations'
		{
			newLeafNode(otherlv_0, grammarAccess.getRelationsAccess().getRelationsKeyword_0());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getRelationsAccess().getTypeTypeParserRuleCall_1_0());
				}
				lv_type_1_0=ruleType
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getRelationsRule());
					}
					add(
						$current,
						"type",
						lv_type_1_0,
						"mdsd.RPG.Type");
					afterParserOrEnumRuleCall();
				}
			)
		)+
	)
;

// Entry rule entryRuleType
entryRuleType returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getTypeRule()); }
	iv_ruleType=ruleType
	{ $current=$iv_ruleType.current; }
	EOF;

// Rule Type
ruleType returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='type'
		{
			newLeafNode(otherlv_0, grammarAccess.getTypeAccess().getTypeKeyword_0());
		}
		(
			(
				lv_name_1_0=RULE_ID
				{
					newLeafNode(lv_name_1_0, grammarAccess.getTypeAccess().getNameIDTerminalRuleCall_1_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getTypeRule());
					}
					setWithLastConsumed(
						$current,
						"name",
						lv_name_1_0,
						"org.eclipse.xtext.common.Terminals.ID");
				}
			)
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getTypeAccess().getTExpressionTypeExpressionParserRuleCall_2_0());
				}
				lv_tExpression_2_0=ruleTypeExpression
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getTypeRule());
					}
					set(
						$current,
						"tExpression",
						lv_tExpression_2_0,
						"mdsd.RPG.TypeExpression");
					afterParserOrEnumRuleCall();
				}
			)
		)?
	)
;

// Entry rule entryRuleTypeExpression
entryRuleTypeExpression returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getTypeExpressionRule()); }
	iv_ruleTypeExpression=ruleTypeExpression
	{ $current=$iv_ruleTypeExpression.current; }
	EOF;

// Rule TypeExpression
ruleTypeExpression returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getTypeExpressionRule());
					}
				}
				otherlv_0=RULE_ID
				{
					newLeafNode(otherlv_0, grammarAccess.getTypeExpressionAccess().getStrongTypeCrossReference_0_0());
				}
			)
		)
		(
			otherlv_1=','
			{
				newLeafNode(otherlv_1, grammarAccess.getTypeExpressionAccess().getCommaKeyword_1_0());
			}
			(
				(
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getTypeExpressionRule());
						}
					}
					otherlv_2=RULE_ID
					{
						newLeafNode(otherlv_2, grammarAccess.getTypeExpressionAccess().getStrong2TypeCrossReference_1_1_0());
					}
				)
			)
		)*
		otherlv_3='<'
		{
			newLeafNode(otherlv_3, grammarAccess.getTypeExpressionAccess().getLessThanSignKeyword_2());
		}
		(
			(
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getTypeExpressionRule());
					}
				}
				otherlv_4=RULE_ID
				{
					newLeafNode(otherlv_4, grammarAccess.getTypeExpressionAccess().getCurrentTTypeCrossReference_3_0());
				}
			)
		)
		otherlv_5='<'
		{
			newLeafNode(otherlv_5, grammarAccess.getTypeExpressionAccess().getLessThanSignKeyword_4());
		}
		(
			(
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getTypeExpressionRule());
					}
				}
				otherlv_6=RULE_ID
				{
					newLeafNode(otherlv_6, grammarAccess.getTypeExpressionAccess().getWeakTypeCrossReference_5_0());
				}
			)
		)
		(
			otherlv_7=','
			{
				newLeafNode(otherlv_7, grammarAccess.getTypeExpressionAccess().getCommaKeyword_6_0());
			}
			(
				(
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getTypeExpressionRule());
						}
					}
					otherlv_8=RULE_ID
					{
						newLeafNode(otherlv_8, grammarAccess.getTypeExpressionAccess().getWeak2TypeCrossReference_6_1_0());
					}
				)
			)
		)*
	)
;

// Entry rule entryRuleMoves
entryRuleMoves returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getMovesRule()); }
	iv_ruleMoves=ruleMoves
	{ $current=$iv_ruleMoves.current; }
	EOF;

// Rule Moves
ruleMoves returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='moves'
		{
			newLeafNode(otherlv_0, grammarAccess.getMovesAccess().getMovesKeyword_0());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getMovesAccess().getMoveMoveParserRuleCall_1_0());
				}
				lv_move_1_0=ruleMove
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getMovesRule());
					}
					add(
						$current,
						"move",
						lv_move_1_0,
						"mdsd.RPG.Move");
					afterParserOrEnumRuleCall();
				}
			)
		)+
	)
;

// Entry rule entryRuleMove
entryRuleMove returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getMoveRule()); }
	iv_ruleMove=ruleMove
	{ $current=$iv_ruleMove.current; }
	EOF;

// Rule Move
ruleMove returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='move'
		{
			newLeafNode(otherlv_0, grammarAccess.getMoveAccess().getMoveKeyword_0());
		}
		(
			(
				lv_name_1_0=RULE_ID
				{
					newLeafNode(lv_name_1_0, grammarAccess.getMoveAccess().getNameIDTerminalRuleCall_1_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getMoveRule());
					}
					setWithLastConsumed(
						$current,
						"name",
						lv_name_1_0,
						"org.eclipse.xtext.common.Terminals.ID");
				}
			)
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getMoveAccess().getETypeETypeParserRuleCall_2_0());
				}
				lv_eType_2_0=ruleEType
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getMoveRule());
					}
					set(
						$current,
						"eType",
						lv_eType_2_0,
						"mdsd.RPG.EType");
					afterParserOrEnumRuleCall();
				}
			)
		)?
		(
			(
				{
					newCompositeNode(grammarAccess.getMoveAccess().getAttAltAttributeParserRuleCall_3_0());
				}
				lv_att_3_0=ruleAltAttribute
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getMoveRule());
					}
					add(
						$current,
						"att",
						lv_att_3_0,
						"mdsd.RPG.AltAttribute");
					afterParserOrEnumRuleCall();
				}
			)
		)*
		(
			(
				{
					newCompositeNode(grammarAccess.getMoveAccess().getEffectEffectParserRuleCall_4_0());
				}
				lv_effect_4_0=ruleEffect
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getMoveRule());
					}
					add(
						$current,
						"effect",
						lv_effect_4_0,
						"mdsd.RPG.Effect");
					afterParserOrEnumRuleCall();
				}
			)
		)*
	)
;

// Entry rule entryRuleEType
entryRuleEType returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getETypeRule()); }
	iv_ruleEType=ruleEType
	{ $current=$iv_ruleEType.current; }
	EOF;

// Rule EType
ruleEType returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='type'
		{
			newLeafNode(otherlv_0, grammarAccess.getETypeAccess().getTypeKeyword_0());
		}
		(
			(
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getETypeRule());
					}
				}
				otherlv_1=RULE_ID
				{
					newLeafNode(otherlv_1, grammarAccess.getETypeAccess().getTypeTypeCrossReference_1_0());
				}
			)
		)
	)
;

// Entry rule entryRuleAttributes
entryRuleAttributes returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getAttributesRule()); }
	iv_ruleAttributes=ruleAttributes
	{ $current=$iv_ruleAttributes.current; }
	EOF;

// Rule Attributes
ruleAttributes returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='attributes'
		{
			newLeafNode(otherlv_0, grammarAccess.getAttributesAccess().getAttributesKeyword_0());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getAttributesAccess().getAttributeAttributeParserRuleCall_1_0());
				}
				lv_attribute_1_0=ruleAttribute
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getAttributesRule());
					}
					add(
						$current,
						"attribute",
						lv_attribute_1_0,
						"mdsd.RPG.Attribute");
					afterParserOrEnumRuleCall();
				}
			)
		)+
	)
;

// Entry rule entryRuleAttribute
entryRuleAttribute returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getAttributeRule()); }
	iv_ruleAttribute=ruleAttribute
	{ $current=$iv_ruleAttribute.current; }
	EOF;

// Rule Attribute
ruleAttribute returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='attribute'
		{
			newLeafNode(otherlv_0, grammarAccess.getAttributeAccess().getAttributeKeyword_0());
		}
		(
			(
				(
					lv_name_1_0=RULE_ID
					{
						newLeafNode(lv_name_1_0, grammarAccess.getAttributeAccess().getNameIDTerminalRuleCall_1_0_0());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getAttributeRule());
						}
						setWithLastConsumed(
							$current,
							"name",
							lv_name_1_0,
							"org.eclipse.xtext.common.Terminals.ID");
					}
				)
			)
			(
				(
					{
						newCompositeNode(grammarAccess.getAttributeAccess().getAValAttributeValuesParserRuleCall_1_1_0());
					}
					lv_aVal_2_0=ruleAttributeValues
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getAttributeRule());
						}
						set(
							$current,
							"aVal",
							lv_aVal_2_0,
							"mdsd.RPG.AttributeValues");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)
	)
;

// Entry rule entryRuleEffect
entryRuleEffect returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getEffectRule()); }
	iv_ruleEffect=ruleEffect
	{ $current=$iv_ruleEffect.current; }
	EOF;

// Rule Effect
ruleEffect returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='effect'
		{
			newLeafNode(otherlv_0, grammarAccess.getEffectAccess().getEffectKeyword_0());
		}
		{
			newCompositeNode(grammarAccess.getEffectAccess().getRuleParserRuleCall_1());
		}
		this_Rule_1=ruleRule
		{
			$current = $this_Rule_1.current;
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRuleAttributeValues
entryRuleAttributeValues returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getAttributeValuesRule()); }
	iv_ruleAttributeValues=ruleAttributeValues
	{ $current=$iv_ruleAttributeValues.current; }
	EOF;

// Rule AttributeValues
ruleAttributeValues returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			otherlv_0='is'
			{
				newLeafNode(otherlv_0, grammarAccess.getAttributeValuesAccess().getIsKeyword_0_0());
			}
			(
				(
					(
						{
							newCompositeNode(grammarAccess.getAttributeValuesAccess().getLTypesLegalTypeParserRuleCall_0_1_0_0());
						}
						lv_lTypes_1_0=ruleLegalType
						{
							if ($current==null) {
								$current = createModelElementForParent(grammarAccess.getAttributeValuesRule());
							}
							set(
								$current,
								"lTypes",
								lv_lTypes_1_0,
								"mdsd.RPG.LegalType");
							afterParserOrEnumRuleCall();
						}
					)
				)
				    |
				{
					newCompositeNode(grammarAccess.getAttributeValuesAccess().getAtomicNumberParserRuleCall_0_1_1());
				}
				this_AtomicNumber_2=ruleAtomicNumber
				{
					$current = $this_AtomicNumber_2.current;
					afterParserOrEnumRuleCall();
				}
			)
		)
		    |
		(
			{
				newCompositeNode(grammarAccess.getAttributeValuesAccess().getRuleParserRuleCall_1_0());
			}
			this_Rule_3=ruleRule
			{
				$current = $this_Rule_3.current;
				afterParserOrEnumRuleCall();
			}
			    |
			{
				newCompositeNode(grammarAccess.getAttributeValuesAccess().getRequireParserRuleCall_1_1());
			}
			this_Require_4=ruleRequire
			{
				$current = $this_Require_4.current;
				afterParserOrEnumRuleCall();
			}
		)
	)
;

// Entry rule entryRuleAltAttribute
entryRuleAltAttribute returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getAltAttributeRule()); }
	iv_ruleAltAttribute=ruleAltAttribute
	{ $current=$iv_ruleAltAttribute.current; }
	EOF;

// Rule AltAttribute
ruleAltAttribute returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='attribute'
		{
			newLeafNode(otherlv_0, grammarAccess.getAltAttributeAccess().getAttributeKeyword_0());
		}
		(
			(
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getAltAttributeRule());
					}
				}
				otherlv_1=RULE_ID
				{
					newLeafNode(otherlv_1, grammarAccess.getAltAttributeAccess().getAttributeAttributeCrossReference_1_0());
				}
			)
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getAltAttributeAccess().getAvAttributeValuesParserRuleCall_2_0());
				}
				lv_av_2_0=ruleAttributeValues
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getAltAttributeRule());
					}
					set(
						$current,
						"av",
						lv_av_2_0,
						"mdsd.RPG.AttributeValues");
					afterParserOrEnumRuleCall();
				}
			)
		)?
	)
;

// Entry rule entryRuleRule
entryRuleRule returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getRuleRule()); }
	iv_ruleRule=ruleRule
	{ $current=$iv_ruleRule.current; }
	EOF;

// Rule Rule
ruleRule returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='if'
		{
			newLeafNode(otherlv_0, grammarAccess.getRuleAccess().getIfKeyword_0());
		}
		{
			newCompositeNode(grammarAccess.getRuleAccess().getORconditionParserRuleCall_1());
		}
		this_ORcondition_1=ruleORcondition
		{
			$current = $this_ORcondition_1.current;
			afterParserOrEnumRuleCall();
		}
		otherlv_2='then'
		{
			newLeafNode(otherlv_2, grammarAccess.getRuleAccess().getThenKeyword_2());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getRuleAccess().getSelfTargetingParserRuleCall_3_0());
				}
				ruleSelfTargeting
				{
					afterParserOrEnumRuleCall();
				}
			)?
			(
				(
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getRuleRule());
						}
					}
					otherlv_4=RULE_ID
					{
						newLeafNode(otherlv_4, grammarAccess.getRuleAccess().getAttritbuteToSetAttributeCrossReference_3_1_0());
					}
				)
			)
			otherlv_5='='
			{
				newLeafNode(otherlv_5, grammarAccess.getRuleAccess().getEqualsSignKeyword_3_2());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getRuleAccess().getChangeSumParserRuleCall_3_3_0());
					}
					lv_change_6_0=ruleSum
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getRuleRule());
						}
						add(
							$current,
							"change",
							lv_change_6_0,
							"mdsd.RPG.Sum");
						afterParserOrEnumRuleCall();
					}
				)
			)+
		)*
	)
;

// Entry rule entryRuleEntities
entryRuleEntities returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getEntitiesRule()); }
	iv_ruleEntities=ruleEntities
	{ $current=$iv_ruleEntities.current; }
	EOF;

// Rule Entities
ruleEntities returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='entities'
		{
			newLeafNode(otherlv_0, grammarAccess.getEntitiesAccess().getEntitiesKeyword_0());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getEntitiesAccess().getEntityEntityParserRuleCall_1_0());
				}
				lv_entity_1_0=ruleEntity
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getEntitiesRule());
					}
					add(
						$current,
						"entity",
						lv_entity_1_0,
						"mdsd.RPG.Entity");
					afterParserOrEnumRuleCall();
				}
			)
		)+
	)
;

// Entry rule entryRuleDeath
entryRuleDeath returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getDeathRule()); }
	iv_ruleDeath=ruleDeath
	{ $current=$iv_ruleDeath.current; }
	EOF;

// Rule Death
ruleDeath returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='death'
		{
			newLeafNode(otherlv_0, grammarAccess.getDeathAccess().getDeathKeyword_0());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getDeathAccess().getConORconditionParserRuleCall_1_0());
				}
				lv_con_1_0=ruleORcondition
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getDeathRule());
					}
					add(
						$current,
						"con",
						lv_con_1_0,
						"mdsd.RPG.ORcondition");
					afterParserOrEnumRuleCall();
				}
			)
		)+
	)
;

// Entry rule entryRuleEntity
entryRuleEntity returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getEntityRule()); }
	iv_ruleEntity=ruleEntity
	{ $current=$iv_ruleEntity.current; }
	EOF;

// Rule Entity
ruleEntity returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='entity'
		{
			newLeafNode(otherlv_0, grammarAccess.getEntityAccess().getEntityKeyword_0());
		}
		(
			(
				lv_name_1_0=RULE_ID
				{
					newLeafNode(lv_name_1_0, grammarAccess.getEntityAccess().getNameIDTerminalRuleCall_1_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getEntityRule());
					}
					setWithLastConsumed(
						$current,
						"name",
						lv_name_1_0,
						"org.eclipse.xtext.common.Terminals.ID");
				}
			)
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getEntityAccess().getETypeETypeParserRuleCall_2_0());
				}
				lv_eType_2_0=ruleEType
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getEntityRule());
					}
					set(
						$current,
						"eType",
						lv_eType_2_0,
						"mdsd.RPG.EType");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getEntityAccess().getAttAltAttributeParserRuleCall_3_0());
				}
				lv_att_3_0=ruleAltAttribute
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getEntityRule());
					}
					add(
						$current,
						"att",
						lv_att_3_0,
						"mdsd.RPG.AltAttribute");
					afterParserOrEnumRuleCall();
				}
			)
		)*
		(
			(
				{
					newCompositeNode(grammarAccess.getEntityAccess().getEMovesEntityMovesParserRuleCall_4_0());
				}
				lv_eMoves_4_0=ruleEntityMoves
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getEntityRule());
					}
					add(
						$current,
						"eMoves",
						lv_eMoves_4_0,
						"mdsd.RPG.EntityMoves");
					afterParserOrEnumRuleCall();
				}
			)
		)*
	)
;

// Entry rule entryRuleEntityMoves
entryRuleEntityMoves returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getEntityMovesRule()); }
	iv_ruleEntityMoves=ruleEntityMoves
	{ $current=$iv_ruleEntityMoves.current; }
	EOF;

// Rule EntityMoves
ruleEntityMoves returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='move'
		{
			newLeafNode(otherlv_0, grammarAccess.getEntityMovesAccess().getMoveKeyword_0());
		}
		(
			(
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getEntityMovesRule());
					}
				}
				otherlv_1=RULE_ID
				{
					newLeafNode(otherlv_1, grammarAccess.getEntityMovesAccess().getMoveMoveCrossReference_1_0());
				}
			)
		)+
	)
;

// Entry rule entryRuleTeams
entryRuleTeams returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getTeamsRule()); }
	iv_ruleTeams=ruleTeams
	{ $current=$iv_ruleTeams.current; }
	EOF;

// Rule Teams
ruleTeams returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='teams'
		{
			newLeafNode(otherlv_0, grammarAccess.getTeamsAccess().getTeamsKeyword_0());
		}
		(
			{
				newCompositeNode(grammarAccess.getTeamsAccess().getRequireParserRuleCall_1());
			}
			this_Require_1=ruleRequire
			{
				$current = $this_Require_1.current;
				afterParserOrEnumRuleCall();
			}
		)?
		(
			(
				{
					newCompositeNode(grammarAccess.getTeamsAccess().getBsBattleSizeParserRuleCall_2_0());
				}
				lv_bs_2_0=ruleBattleSize
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getTeamsRule());
					}
					set(
						$current,
						"bs",
						lv_bs_2_0,
						"mdsd.RPG.BattleSize");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getTeamsAccess().getTeamTeamParserRuleCall_3_0());
				}
				lv_team_3_0=ruleTeam
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getTeamsRule());
					}
					add(
						$current,
						"team",
						lv_team_3_0,
						"mdsd.RPG.Team");
					afterParserOrEnumRuleCall();
				}
			)
		)+
	)
;

// Entry rule entryRuleTeam
entryRuleTeam returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getTeamRule()); }
	iv_ruleTeam=ruleTeam
	{ $current=$iv_ruleTeam.current; }
	EOF;

// Rule Team
ruleTeam returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='team'
		{
			newLeafNode(otherlv_0, grammarAccess.getTeamAccess().getTeamKeyword_0());
		}
		(
			(
				lv_name_1_0=RULE_ID
				{
					newLeafNode(lv_name_1_0, grammarAccess.getTeamAccess().getNameIDTerminalRuleCall_1_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getTeamRule());
					}
					setWithLastConsumed(
						$current,
						"name",
						lv_name_1_0,
						"org.eclipse.xtext.common.Terminals.ID");
				}
			)
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getTeamAccess().getMembersMembersParserRuleCall_2_0());
				}
				lv_members_2_0=ruleMembers
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getTeamRule());
					}
					add(
						$current,
						"members",
						lv_members_2_0,
						"mdsd.RPG.Members");
					afterParserOrEnumRuleCall();
				}
			)
		)+
	)
;

// Entry rule entryRuleMembers
entryRuleMembers returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getMembersRule()); }
	iv_ruleMembers=ruleMembers
	{ $current=$iv_ruleMembers.current; }
	EOF;

// Rule Members
ruleMembers returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='members'
		{
			newLeafNode(otherlv_0, grammarAccess.getMembersAccess().getMembersKeyword_0());
		}
		(
			(
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getMembersRule());
					}
				}
				otherlv_1=RULE_ID
				{
					newLeafNode(otherlv_1, grammarAccess.getMembersAccess().getEntityEntityCrossReference_1_0());
				}
			)
		)+
	)
;

// Entry rule entryRuleBattleSize
entryRuleBattleSize returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getBattleSizeRule()); }
	iv_ruleBattleSize=ruleBattleSize
	{ $current=$iv_ruleBattleSize.current; }
	EOF;

// Rule BattleSize
ruleBattleSize returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='battling_member_count'
		{
			newLeafNode(otherlv_0, grammarAccess.getBattleSizeAccess().getBattling_member_countKeyword_0());
		}
		{
			newCompositeNode(grammarAccess.getBattleSizeAccess().getAtomicNumberParserRuleCall_1());
		}
		this_AtomicNumber_1=ruleAtomicNumber
		{
			$current = $this_AtomicNumber_1.current;
			afterParserOrEnumRuleCall();
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getBattleSizeAccess().getReqRequireParserRuleCall_2_0());
				}
				lv_req_2_0=ruleRequire
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getBattleSizeRule());
					}
					set(
						$current,
						"req",
						lv_req_2_0,
						"mdsd.RPG.Require");
					afterParserOrEnumRuleCall();
				}
			)
		)?
	)
;

// Entry rule entryRuleRequire
entryRuleRequire returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getRequireRule()); }
	iv_ruleRequire=ruleRequire
	{ $current=$iv_ruleRequire.current; }
	EOF;

// Rule Require
ruleRequire returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			otherlv_0='require'
			{
				newLeafNode(otherlv_0, grammarAccess.getRequireAccess().getRequireKeyword_0_0());
			}
			{
				newCompositeNode(grammarAccess.getRequireAccess().getORconditionParserRuleCall_0_1());
			}
			this_ORcondition_1=ruleORcondition
			{
				$current = $this_ORcondition_1.current;
				afterParserOrEnumRuleCall();
			}
		)
		    |
		{
			newCompositeNode(grammarAccess.getRequireAccess().getORconditionParserRuleCall_1());
		}
		this_ORcondition_2=ruleORcondition
		{
			$current = $this_ORcondition_2.current;
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRuleORcondition
entryRuleORcondition returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getORconditionRule()); }
	iv_ruleORcondition=ruleORcondition
	{ $current=$iv_ruleORcondition.current; }
	EOF;

// Rule ORcondition
ruleORcondition returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getORconditionAccess().getANDconditionParserRuleCall_0());
		}
		this_ANDcondition_0=ruleANDcondition
		{
			$current = $this_ANDcondition_0.current;
			afterParserOrEnumRuleCall();
		}
		(
			otherlv_1='OR'
			{
				newLeafNode(otherlv_1, grammarAccess.getORconditionAccess().getORKeyword_1_0());
			}
			(
				{
					$current = forceCreateModelElementAndSet(
						grammarAccess.getORconditionAccess().getOrLeftAction_1_1(),
						$current);
				}
			)
			(
				(
					{
						newCompositeNode(grammarAccess.getORconditionAccess().getRightANDconditionParserRuleCall_1_2_0());
					}
					lv_right_3_0=ruleANDcondition
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getORconditionRule());
						}
						set(
							$current,
							"right",
							lv_right_3_0,
							"mdsd.RPG.ANDcondition");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)*
	)
;

// Entry rule entryRuleANDcondition
entryRuleANDcondition returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getANDconditionRule()); }
	iv_ruleANDcondition=ruleANDcondition
	{ $current=$iv_ruleANDcondition.current; }
	EOF;

// Rule ANDcondition
ruleANDcondition returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getANDconditionAccess().getStatementParserRuleCall_0());
		}
		this_Statement_0=ruleStatement
		{
			$current = $this_Statement_0.current;
			afterParserOrEnumRuleCall();
		}
		(
			otherlv_1='AND'
			{
				newLeafNode(otherlv_1, grammarAccess.getANDconditionAccess().getANDKeyword_1_0());
			}
			(
				{
					$current = forceCreateModelElementAndSet(
						grammarAccess.getANDconditionAccess().getAndLeftAction_1_1(),
						$current);
				}
			)
			(
				(
					{
						newCompositeNode(grammarAccess.getANDconditionAccess().getRightStatementParserRuleCall_1_2_0());
					}
					lv_right_3_0=ruleStatement
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getANDconditionRule());
						}
						set(
							$current,
							"right",
							lv_right_3_0,
							"mdsd.RPG.Statement");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)*
	)
;

// Entry rule entryRuleStatement
entryRuleStatement returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getStatementRule()); }
	iv_ruleStatement=ruleStatement
	{ $current=$iv_ruleStatement.current; }
	EOF;

// Rule Statement
ruleStatement returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getStatementAccess().getNumberComparingParserRuleCall_0());
		}
		this_NumberComparing_0=ruleNumberComparing
		{
			$current = $this_NumberComparing_0.current;
			afterParserOrEnumRuleCall();
		}
		    |
		(
			otherlv_1='('
			{
				newLeafNode(otherlv_1, grammarAccess.getStatementAccess().getLeftParenthesisKeyword_1_0());
			}
			{
				newCompositeNode(grammarAccess.getStatementAccess().getORconditionParserRuleCall_1_1());
			}
			this_ORcondition_2=ruleORcondition
			{
				$current = $this_ORcondition_2.current;
				afterParserOrEnumRuleCall();
			}
			otherlv_3=')'
			{
				newLeafNode(otherlv_3, grammarAccess.getStatementAccess().getRightParenthesisKeyword_1_2());
			}
		)
		    |
		(
			(
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getStatementRule());
					}
				}
				otherlv_4=RULE_ID
				{
					newLeafNode(otherlv_4, grammarAccess.getStatementAccess().getTypeTypeCrossReference_2_0());
				}
			)
		)
	)
;

// Entry rule entryRuleNumberComparing
entryRuleNumberComparing returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getNumberComparingRule()); }
	iv_ruleNumberComparing=ruleNumberComparing
	{ $current=$iv_ruleNumberComparing.current; }
	EOF;

// Rule NumberComparing
ruleNumberComparing returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					newCompositeNode(grammarAccess.getNumberComparingAccess().getLeftSumParserRuleCall_0_0());
				}
				lv_left_0_0=ruleSum
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getNumberComparingRule());
					}
					set(
						$current,
						"left",
						lv_left_0_0,
						"mdsd.RPG.Sum");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getNumberComparingAccess().getCompComparatorParserRuleCall_1_0());
				}
				lv_comp_1_0=ruleComparator
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getNumberComparingRule());
					}
					set(
						$current,
						"comp",
						lv_comp_1_0,
						"mdsd.RPG.Comparator");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getNumberComparingAccess().getRightSumParserRuleCall_2_0());
				}
				lv_right_2_0=ruleSum
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getNumberComparingRule());
					}
					set(
						$current,
						"right",
						lv_right_2_0,
						"mdsd.RPG.Sum");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleComparator
entryRuleComparator returns [String current=null]:
	{ newCompositeNode(grammarAccess.getComparatorRule()); }
	iv_ruleComparator=ruleComparator
	{ $current=$iv_ruleComparator.current.getText(); }
	EOF;

// Rule Comparator
ruleComparator returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		kw='<'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getComparatorAccess().getLessThanSignKeyword_0());
		}
		    |
		kw='<='
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getComparatorAccess().getLessThanSignEqualsSignKeyword_1());
		}
		    |
		kw='=='
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getComparatorAccess().getEqualsSignEqualsSignKeyword_2());
		}
		    |
		kw='>='
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getComparatorAccess().getGreaterThanSignEqualsSignKeyword_3());
		}
		    |
		kw='>'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getComparatorAccess().getGreaterThanSignKeyword_4());
		}
		    |
		kw='!='
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getComparatorAccess().getExclamationMarkEqualsSignKeyword_5());
		}
	)
;

// Entry rule entryRuleSum
entryRuleSum returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getSumRule()); }
	iv_ruleSum=ruleSum
	{ $current=$iv_ruleSum.current; }
	EOF;

// Rule Sum
ruleSum returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getSumAccess().getMultiplyParserRuleCall_0());
		}
		this_Multiply_0=ruleMultiply
		{
			$current = $this_Multiply_0.current;
			afterParserOrEnumRuleCall();
		}
		(
			(
				(
					otherlv_1='+'
					{
						newLeafNode(otherlv_1, grammarAccess.getSumAccess().getPlusSignKeyword_1_0_0_0());
					}
					(
						{
							$current = forceCreateModelElementAndSet(
								grammarAccess.getSumAccess().getAddLeftAction_1_0_0_1(),
								$current);
						}
					)
				)
				    |
				(
					otherlv_3='-'
					{
						newLeafNode(otherlv_3, grammarAccess.getSumAccess().getHyphenMinusKeyword_1_0_1_0());
					}
					(
						{
							$current = forceCreateModelElementAndSet(
								grammarAccess.getSumAccess().getSubLeftAction_1_0_1_1(),
								$current);
						}
					)
				)
			)
			(
				(
					{
						newCompositeNode(grammarAccess.getSumAccess().getRightMultiplyParserRuleCall_1_1_0());
					}
					lv_right_5_0=ruleMultiply
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getSumRule());
						}
						set(
							$current,
							"right",
							lv_right_5_0,
							"mdsd.RPG.Multiply");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)*
	)
;

// Entry rule entryRuleMultiply
entryRuleMultiply returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getMultiplyRule()); }
	iv_ruleMultiply=ruleMultiply
	{ $current=$iv_ruleMultiply.current; }
	EOF;

// Rule Multiply
ruleMultiply returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getMultiplyAccess().getAtomicNumberParserRuleCall_0());
		}
		this_AtomicNumber_0=ruleAtomicNumber
		{
			$current = $this_AtomicNumber_0.current;
			afterParserOrEnumRuleCall();
		}
		(
			(
				(
					otherlv_1='*'
					{
						newLeafNode(otherlv_1, grammarAccess.getMultiplyAccess().getAsteriskKeyword_1_0_0_0());
					}
					(
						{
							$current = forceCreateModelElementAndSet(
								grammarAccess.getMultiplyAccess().getMultLeftAction_1_0_0_1(),
								$current);
						}
					)
				)
				    |
				(
					otherlv_3='/'
					{
						newLeafNode(otherlv_3, grammarAccess.getMultiplyAccess().getSolidusKeyword_1_0_1_0());
					}
					(
						{
							$current = forceCreateModelElementAndSet(
								grammarAccess.getMultiplyAccess().getDivLeftAction_1_0_1_1(),
								$current);
						}
					)
				)
			)
			(
				(
					{
						newCompositeNode(grammarAccess.getMultiplyAccess().getRightAtomicNumberParserRuleCall_1_1_0());
					}
					lv_right_5_0=ruleAtomicNumber
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getMultiplyRule());
						}
						set(
							$current,
							"right",
							lv_right_5_0,
							"mdsd.RPG.AtomicNumber");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)*
	)
;

// Entry rule entryRuleAtomicNumber
entryRuleAtomicNumber returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getAtomicNumberRule()); }
	iv_ruleAtomicNumber=ruleAtomicNumber
	{ $current=$iv_ruleAtomicNumber.current; }
	EOF;

// Rule AtomicNumber
ruleAtomicNumber returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					$current = forceCreateModelElement(
						grammarAccess.getAtomicNumberAccess().getAtomicNumberAction_0_0(),
						$current);
				}
			)
			{
				newCompositeNode(grammarAccess.getAtomicNumberAccess().getFloatParserRuleCall_0_1());
			}
			ruleFloat
			{
				afterParserOrEnumRuleCall();
			}
		)
		    |
		(
			(
				{
					$current = forceCreateModelElement(
						grammarAccess.getAtomicNumberAccess().getAtomicNumberAction_1_0(),
						$current);
				}
			)
			this_INT_3=RULE_INT
			{
				newLeafNode(this_INT_3, grammarAccess.getAtomicNumberAccess().getINTTerminalRuleCall_1_1());
			}
		)
		    |
		(
			(
				{
					newCompositeNode(grammarAccess.getAtomicNumberAccess().getSelfTargetingParserRuleCall_2_0());
				}
				ruleSelfTargeting
				{
					afterParserOrEnumRuleCall();
				}
			)?
			(
				(
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getAtomicNumberRule());
						}
					}
					otherlv_5=RULE_ID
					{
						newLeafNode(otherlv_5, grammarAccess.getAtomicNumberAccess().getAttributeAttributeCrossReference_2_1_0());
					}
				)
			)
		)
	)
;

// Entry rule entryRuleSelfTargeting
entryRuleSelfTargeting returns [String current=null]:
	{ newCompositeNode(grammarAccess.getSelfTargetingRule()); }
	iv_ruleSelfTargeting=ruleSelfTargeting
	{ $current=$iv_ruleSelfTargeting.current.getText(); }
	EOF;

// Rule SelfTargeting
ruleSelfTargeting returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	kw='self.'
	{
		$current.merge(kw);
		newLeafNode(kw, grammarAccess.getSelfTargetingAccess().getSelfKeyword());
	}
;

// Entry rule entryRuleFloat
entryRuleFloat returns [String current=null]:
	{ newCompositeNode(grammarAccess.getFloatRule()); }
	iv_ruleFloat=ruleFloat
	{ $current=$iv_ruleFloat.current.getText(); }
	EOF;

// Rule Float
ruleFloat returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		this_INT_0=RULE_INT
		{
			$current.merge(this_INT_0);
		}
		{
			newLeafNode(this_INT_0, grammarAccess.getFloatAccess().getINTTerminalRuleCall_0());
		}
		kw='.'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getFloatAccess().getFullStopKeyword_1());
		}
		this_INT_2=RULE_INT
		{
			$current.merge(this_INT_2);
		}
		{
			newLeafNode(this_INT_2, grammarAccess.getFloatAccess().getINTTerminalRuleCall_2());
		}
	)
;

// Entry rule entryRuleLegalType
entryRuleLegalType returns [String current=null]:
	{ newCompositeNode(grammarAccess.getLegalTypeRule()); }
	iv_ruleLegalType=ruleLegalType
	{ $current=$iv_ruleLegalType.current.getText(); }
	EOF;

// Rule LegalType
ruleLegalType returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		kw='Float'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getLegalTypeAccess().getFloatKeyword_0());
		}
		    |
		kw='Integer'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getLegalTypeAccess().getIntegerKeyword_1());
		}
	)
;

RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' .|~(('\\'|'"')))* '"'|'\'' ('\\' .|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;
