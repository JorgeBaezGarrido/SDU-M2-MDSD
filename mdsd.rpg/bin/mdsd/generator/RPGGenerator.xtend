/*
 * generated by Xtext 2.21.0
 */
package mdsd.generator

import org.eclipse.emf.ecore.resource.Resource
import org.eclipse.xtext.generator.AbstractGenerator
import org.eclipse.xtext.generator.IFileSystemAccess2
import org.eclipse.xtext.generator.IGeneratorContext
import mdsd.rPG.SystemRPG
import mdsd.rPG.Entity
import mdsd.rPG.Type
import mdsd.rPG.Move
import mdsd.rPG.Attribute

/**
 * Generates code from your model files on save.
 * 
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#code-generation
 */
class RPGGenerator extends AbstractGenerator {

	override void doGenerate(Resource resource, IFileSystemAccess2 fsa, IGeneratorContext context) {
		val game = resource.allContents.filter(SystemRPG).next
		val entity = resource.allContents.filter(Entity)
		
//		fsa.generateFile('greetings.txt', 'People to greet: ' + 
//			resource.allContents
//				.filter(Greeting)
//				.map[name]
//				.join(', '))
	}
	

	//	
	def generateEntity(Entity entity){
		'''import java.util.*;
		public class Zyndaquil {
			private Type type = new Type();
			type.addType("Fire");
			private Set<Attribute> attributes = new HashSet<>();
			private Attribute maxHP = Attribute.createAttributeWithInt(AttributeEnum.MAX_HP, 10);
			private Attribute currentHP = Attribute.createAttributeWithInt(AttributeEnum.CURRENT_HP, 10);
			
			attributes.add(maxHP);  attributes.add(currentHP);
			
			public Attribute getMaxHP(){
				return maxHP;
			}
			
			public Attribute getCurrentHP(){
				return currentHP;
			}
			
			public void setCurrentHP(int currentHP){
				 this.currentHP.setValue(i);
			}
			
			public HashSet<Attribute> getEntityAttributes(){
				return attributes;
			}
			
			private Move move = new Move();
			
			move.addMove("Ember");
		}
		
		'''
	}

	def generateType(Type type){
		'''
		import java.util.*;
		
		public class Type{
			
			private Set<Sting> setOfTypes = new HashSet<>();
			private String typeName;
			
			
			public Type(String typeName){
				this.typeName = typeName;
				if(!typeName.isEmpty())){
					addType(typeName);
					}
				}
						
			public void addType(String type){
				setOfTypes.add(type);
				}
		}
		
		
		'''
	}
	
	def generateMove(Move move){
		'''
		import java.util.*;
		
		public class Move{
			private Set<String> setOfMoves = new HashSet<>();
			private String moveName;
			private Type type;
			private Set<Attribute> attributes = new HashSet<>();
			private List<Effect> effects = new ArrayList<>();
			
			private Set<Attribute> entityAttributes = new HashSet<>();
			
			public class Effect{
				
			}
			
			private Attribute attributePP, attributePower;
			
			public Move(String moveName, Type type, Set attributes){
				this.moveName = moveName;
				this.type = type;
				this.attributes = attributes;
				
				if(!moveName.isEmpty()){
					 addMove(moveName);
				}
				
				if(type != null){
					 type.setType("Fire");
				}
				
				if(!attributes.isEmpty()) {
					int pp = 25;
					int power = 45;
					
					attributePP = Attribute.createAttributeWithInt(AttributeEnum.PP.toString(), pp);
					attributePower = Attribute.createAttributeWithInt(AttributeEnum.POWER.toString(), power);
					attributes.add(attributePP); attributes.add(attributePower);
					if()
					
				}
				
				
			}
			
			
			public void addMove(String move){
				setOfMoves.add(move);
			}
			
		}
		
		
		'''
		
	}
	
	def generateAttribute(Attribute attribute){
		'''
		import java.util.*;
		
		public class Attribute{
			//private Map<String, ? extends number> mapOfAttributes = new HashMap<>();
			
			
			private String pp = AttributeEnum.PP.toString());
			private String power = AttributeEnum.POWER.toString();
			private String current_hp = AttributeEnum.CURRENT_HP.toString();
			private String speed = AttributeEnum.SPEED.toString();
			private String max_hp = AttributeEnum.MAX_HP.toString();
		
		    private String attributeName;
		    private <? extends Number> value;
		
		    public Attribute(String attribute){
		        this.attributeName = attribute;
		    }
		
		    public static Attribute createAttributeWithFloat(String attribute, float float){
		      Attribute a = new Attribute(attribute);
		      a.setValue(float);
		      return a;
		    }
		
		    public static Attribute createAttributeWithInt(String attribute, int i){
		      Attribute a = new Attribute(attribute);
		      a.setValue(i);
		      return a; 
		    }
		
		    public <T extends Number> void setValue(T number){
		      value = number;
		    }
		}			
			
			
		'''
	}
	
	def attributeEnum(){
		'''
		enum AttributeEnum{
		  PP, POWER, CURRENT_HP, SPEED, MAX_HP;
		
		  private int value;
		
		  int getValue{value};
		  void setValue(int value) { this.value = value};
		
		  public Attribute(int value){
		    this.value = value;
		  }
		}
		'''
	}
	
	
	 
}
