/*
 * generated by Xtext 2.21.0
 */
package mdsd.generator

import org.eclipse.emf.ecore.resource.Resource
import org.eclipse.xtext.generator.AbstractGenerator
import org.eclipse.xtext.generator.IFileSystemAccess2
import org.eclipse.xtext.generator.IGeneratorContext
import mdsd.rPG.SystemRPG
import mdsd.rPG.Entity
import mdsd.rPG.Type
import mdsd.rPG.Move
import mdsd.rPG.Moves
import mdsd.rPG.Attribute
import mdsd.rPG.Locations
import mdsd.rPG.Death
import mdsd.rPG.NumberComparing
import mdsd.rPG.AtomicNumber
import mdsd.rPG.Require
import mdsd.rPG.Or
import mdsd.rPG.And
import mdsd.rPG.Add
import mdsd.rPG.Sub
import mdsd.rPG.Mult
import mdsd.rPG.Div
import mdsd.rPG.Comparator
import mdsd.rPG.Eq
import mdsd.rPG.Smaller
import mdsd.rPG.SmallerEq
import mdsd.rPG.NEq
import mdsd.rPG.Bigger
import mdsd.rPG.BiggerEq
import mdsd.rPG.IntNum
import mdsd.rPG.NameAttribute
import mdsd.rPG.FloatNum





/**
 * Generates code from your model files on save.
 * 
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#code-generation
 */
class RPGGenerator extends AbstractGenerator {

	override void doGenerate(Resource resource, IFileSystemAccess2 fsa, IGeneratorContext context) {
		val game = resource.allContents.filter(SystemRPG).next
		//val entity = resource.allContents.filter(Entity)
		game.ds
		
//		fsa.generateFile('greetings.txt', 'People to greet: ' + 
//			resource.allContents
//				.filter(Greeting)
//				.map[name]
//				.join(', '))
	}

	def ds(SystemRPG system){
		for(d : system.declarations){
			switch d{
				Death: d.deaths
				default: System.out.println("")
			}
		}
	}
	
	def deaths (Death death){
		death.req.re

	}
	
	
	def re(Require req){
		System.out.println(req.log.logic)
	}
	
	def dispatch CharSequence logic(Or x){
		'''(«x.left.logic»||«x.right.logic»)'''
	}
	
	def dispatch CharSequence logic(And x){
		'''(«x.left.logic»&&«x.right.logic»)'''
	}
	
	def dispatch CharSequence logic(NumberComparing x){
		'''(«x.left.exp»«x.comp.generateComp»«x.right.exp»)'''
	}
	
	def generateComp(Comparator op) {
		switch op { Eq: '==' Smaller: '<' Bigger: '>' SmallerEq: '<=' BiggerEq: '>=' NEq: '!=' }
	}
	
	def dispatch CharSequence exp(Add x){
		'''(«x.left.exp»+«x.right.exp»)'''
	}
	def dispatch CharSequence exp(Sub x){
		'''(«x.left.exp»-«x.right.exp»)'''
	}
	def dispatch CharSequence exp(Mult x){
		'''(«x.left.exp»*«x.right.exp»)'''
	}
	def dispatch CharSequence exp(Div x){
		'''(«x.left.exp»/«x.right.exp»)'''
	}
	def dispatch CharSequence exp(IntNum x){
		Integer.toString(x.value)
	}
	def dispatch CharSequence exp(FloatNum x){
		Integer.toString(x.i) + '.' + Integer.toString(x.decimal)
	}
	
	
	def dispatch CharSequence exp(NameAttribute x){
		{"_"+x.attribute.name}
	}
}
	
	
	 

